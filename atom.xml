<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笔记</title>
  
  <subtitle>以每一个问题为目标，每解决一个问题给自己及时反馈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.wjc66.cn/"/>
  <updated>2022-04-08T08:08:22.259Z</updated>
  <id>https://blog.wjc66.cn/</id>
  
  <author>
    <name>w-klover</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript装饰器</title>
    <link href="https://blog.wjc66.cn/TypeScript%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://blog.wjc66.cn/TypeScript%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2022-04-08T08:00:13.000Z</published>
    <updated>2022-04-08T08:08:22.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TypeScript-装饰器（decorators）"><a href="#TypeScript-装饰器（decorators）" class="headerlink" title="TypeScript 装饰器（decorators）"></a>TypeScript 装饰器（decorators）</h2><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>随着 TypeScript 和 ES6 里引入了类，在一些场景下我们需要额外的特性来支持标注或修改类及其成员。 装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式</p><p>若要启用实验性的装饰器特性，你必须在命令行或 tsconfig.json 里启用 experimentalDecorators 编译器选项</p><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。它可以在不修改代码自身的前提下，给已有代码增加额外的行为</p><a id="more"></a><h4 id="如何定义装饰器"><a href="#如何定义装饰器" class="headerlink" title="如何定义装饰器"></a>如何定义装饰器</h4><p>装饰器本身其实就是一个函数，理论上忽略参数的话，任何函数都可以当做装饰器使用。例：<br><img src="https://img-blog.csdnimg.cn/b395d828580548309bb20db21cadb236.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/01e5db190c6045b58ef392621507d510.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6f0f4a6744684de18576ad682185b018.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这个注解也称 <code>JavaScript中函数柯里化特性</code></p><p><img src="https://img-blog.csdnimg.cn/a84781a59e6d4c7686eebb4a0d300c8f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="装饰器执行时机"><a href="#装饰器执行时机" class="headerlink" title="装饰器执行时机"></a>装饰器执行时机</h4><p>修饰器对类的行为的改变，是代码编译时发生的（不是 TypeScript 编译，而是 js 在执行机中编译阶段），而不是在运行时。这意味着，修饰器能在编译阶段运行代码。也就是说，修饰器本质就是编译时执行的函数。<br>在 Node.js 环境中模块一加载时就会执行</p><h3 id="五种装饰器"><a href="#五种装饰器" class="headerlink" title="五种装饰器"></a>五种装饰器</h3><p>类装饰器、属性装饰器、方法装饰器、访问器装饰器、参数装饰器；</p><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><p>应用于类构造函数，其参数是类的构造函数。<br>注意 class 并不是像 Java 那种强类型语言中的类，而是 JavaScript 构造函数的语法糖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类装饰器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Class2Decorator = (options?: any): <span class="function"><span class="params">ClassDecorator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: object</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是类装饰器，我跑起来了"</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(<span class="string">"SCOPE_OPTIONS_METADATA"</span>, options, target);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1de912e5b3d8492b974e4bcf3249bfe2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><p>属性装饰器表达式会在运行时当作函数被调用，传入下列 2 个参数：</p><p>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>2、成员的名字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性装饰器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PropertyDecorator = <span class="function">(<span class="params">value: string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: object, key: string | symbol</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是属性装饰器，我跑起来了"</span>, key);</span><br><span class="line">    target[key] = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ac99883d853a401badf8d24d44181880.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h4><p>它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。<br>方法装饰会在运行时传入下列 3 个参数：</p><p>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>2、成员的名字。<br>3、成员的属性描述符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 方法装饰器</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">export</span> const MethodDecorator = (options?: any): MethodDecorator =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> (target: any, key?: any, descriptor?: PropertyDescriptor) =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'我是方法装饰器，我跑起来了'</span>, key);</span><br><span class="line">    Reflect.defineMetadata(`MethodDecorator`, options, target?.constructor);</span><br><span class="line"></span><br><span class="line">    const oldFunc = descriptor.value;</span><br><span class="line">    descriptor.value = async (...args: any) =&gt; &#123;</span><br><span class="line">      <span class="built_in">let</span> result: any;</span><br><span class="line">      try &#123;</span><br><span class="line">        console.log(<span class="string">'拿到方法的参数==============&gt;'</span>, args);</span><br><span class="line">        result = await oldFunc.apply(this, args);</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37e21ec40bcb4358918b26b704737476.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h4><p>在 js 中类中（Object）中的属性有 4 个描述起行为的特性：<br>Configurable:表示能否通过 delete 删除属性从而重新定义属性；<br>Enumerable：表示能否通过 for-in 循环返回属性<br>writable：表示能否修改属性的值<br>Value：包含这个属性的数据值（个人认为其作用就是赋值）<br>以上四个属性在不显示调用 Object.defineProperty()的时候，前三个默认值都为 true，而 value 为你自己设定的值，如果不设定的话则为 undefined。<br>而其中最特殊的则是 configurable，根据《javascript 高级程序设计（第三版）》所说：一旦把该属性定义为 false 之后，那么除了 writable 之外，其他所有的属性都无法再修改。</p><blockquote><p>注意 TypeScript 不允许同时装饰一个成员的 get 和 set 访问器。取而代之的是，一个成员的所有装饰的必须应用在文档顺序的第一个访问器上。这是因为，在装饰器应用于一个属性描述符时，它联合了 get 和 set 访问器，而不是分开声明的。</p></blockquote><blockquote><p>对比结果：方法装饰器的 descriptor 有 value 和 witable 属性，但没有 get 和 set 属性；访问器装饰器有 get 和 set 属性，但没有 value 和 witable 属性。</p></blockquote><ol><li>访问器注解<br><img src="https://img-blog.csdnimg.cn/487c127d7afa40d085ca6575dbcafd7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>普通方法注解<br><img src="https://img-blog.csdnimg.cn/35b8b857e03a4ee1b8e11a0acb3f78c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ol><h4 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h4><p>参数装饰器表达式会在运行时当作函数被调用，传入下列 3 个参数：</p><p>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>2、参数的名字。<br>3、参数在函数参数列表中的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数装饰器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ParamsDecorator = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: any, key: string | symbol, index: number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是参数装饰器，我跑起来了"</span>, key, index);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/290db925645a445aaec74e8fe76aefa2.png" alt="在这里插入图片描述"></p><h2 id="装饰器加载顺序"><a href="#装饰器加载顺序" class="headerlink" title="装饰器加载顺序"></a>装饰器加载顺序</h2><p><img src="https://img-blog.csdnimg.cn/38c5cdabf4254bdabe445363d3940e3f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>从上述例子得出如下结论：</p><p>1、有多个参数装饰器时：从最后一个参数依次向前执行</p><p>2、方法和方法参数中参数装饰器先执行。</p><p>3、类装饰器总是最后执行。</p><p>4、方法和属性装饰器，谁在前面谁先执行。因为参数属于方法一部分，所以参数会一直紧紧挨着方法执行。</p><p>5、方法参数装饰器&gt;方法装饰器&gt;类装饰器，自右向左，自内而外，自上而下。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://es6.ruanyifeng.com/#docs/decorator" target="_blank" rel="external nofollow noopener noreferrer">装饰器</a><br><a href="https://www.cnblogs.com/winfred/p/8216650.html" target="_blank" rel="external nofollow noopener noreferrer">陈峰装饰器</a></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><a href="https://github.com/klover2/typeScript-decorator" target="_blank" rel="external nofollow noopener noreferrer">gitHub</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TypeScript-装饰器（decorators）&quot;&gt;&lt;a href=&quot;#TypeScript-装饰器（decorators）&quot; class=&quot;headerlink&quot; title=&quot;TypeScript 装饰器（decorators）&quot;&gt;&lt;/a&gt;TypeScript 装饰器（decorators）&lt;/h2&gt;&lt;h4 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h4&gt;&lt;p&gt;随着 TypeScript 和 ES6 里引入了类，在一些场景下我们需要额外的特性来支持标注或修改类及其成员。 装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式&lt;/p&gt;
&lt;p&gt;若要启用实验性的装饰器特性，你必须在命令行或 tsconfig.json 里启用 experimentalDecorators 编译器选项&lt;/p&gt;
&lt;p&gt;装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。它可以在不修改代码自身的前提下，给已有代码增加额外的行为&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nodejs" scheme="https://blog.wjc66.cn/tags/nodejs/"/>
    
      <category term="typescript" scheme="https://blog.wjc66.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>通过注解获取对应的类型</title>
    <link href="https://blog.wjc66.cn/%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B/"/>
    <id>https://blog.wjc66.cn/%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-03-30T07:12:49.000Z</published>
    <updated>2022-03-30T07:24:20.487Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> klover</span></span><br><span class="line"><span class="comment"> * 处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Processor &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">            annotation = Component<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">    <span class="meta">@interface</span> Process &#123;</span><br><span class="line">        <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>通过 SpringContextUtil 获取</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qbit.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(@NotNull ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前环境</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> env</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getActiveProfile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getEnvironment().getActiveProfiles()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isProd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"prod"</span>.equals(getActiveProfile());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取applicationContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ApplicationContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过Annotation获取 Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 注解类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map&lt;String, Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getBeansWithAnnotation</span><span class="params">(Class&lt;? extends Annotation&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBeansWithAnnotation(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取注解的类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 注解类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] getBeanNamesForAnnotation(Class&lt;? extends Annotation&gt; clazz)&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBeanNamesForAnnotation(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name获取 Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过class获取Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; beans = SpringContextUtil.getBeansWithAnnotation(Processor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (String key : beans.keySet()) &#123;</span><br><span class="line">            Object oldBean = beans.get(key);</span><br><span class="line">            Object bean = oldBean;</span><br><span class="line">            <span class="comment">// 开启aop后getAnnotation拿不到原生类 所以需要这个</span></span><br><span class="line">            <span class="keyword">while</span> (AopUtils.isAopProxy(bean)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bean = ((Advised) bean).getTargetSource().getTarget();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"get target bean failed"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">assert</span> bean != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; clazz = bean.getClass();</span><br><span class="line">            System.out.println(clazz.getName());</span><br><span class="line"></span><br><span class="line">            Processor annotation = clazz.getAnnotation(Processor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">            Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.isAnnotationPresent(Processor.Process<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    System.out.println(method);</span><br><span class="line">                    Method method1 = oldBean.getClass().getMethod(method.getName());</span><br><span class="line">                    method1.invoke(oldBean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过 Reflections 获取</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.reflections/reflections --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.reflections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;reflections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Reflections f = <span class="keyword">new</span> Reflections(packageName);</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; set = f.getTypesAnnotatedWith(Processor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; c : set) &#123;</span><br><span class="line">            Object bean = c.getDeclaredConstructor().newInstance();</span><br><span class="line">            Processor annotation = c.getAnnotation(Processor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Method[] methods = bean.getClass().getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.isAnnotationPresent(Processor.Process<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    System.out.println(method);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            beanContainer.put(annotation.value(), bean);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; klover&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 处理器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(&amp;#123;ElementType.TYPE&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Inherited&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; Processor &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@AliasFor&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            annotation = Component&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String value() default &quot;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 执行器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(&amp;#123;ElementType.METHOD&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; Process &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.wjc66.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>amazon配置邮件推送服务</title>
    <link href="https://blog.wjc66.cn/amazon%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1/"/>
    <id>https://blog.wjc66.cn/amazon%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1/</id>
    <published>2022-02-21T08:44:36.000Z</published>
    <updated>2022-03-30T07:01:57.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="亚马逊邮箱推送配置"><a href="#亚马逊邮箱推送配置" class="headerlink" title="亚马逊邮箱推送配置"></a>亚马逊邮箱推送配置</h2><ol><li><p>进入<code>Amazon Simple Email Service</code>服务<br><img src="https://img-blog.csdnimg.cn/8e02bde958154d65916d263e32f38e09.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>在 Account dashboard-&gt;Simple Mail Transfer Protocol (SMTP) settings-&gt;create SMTP credentials 创建简单邮件传输协议 (SMTP) - （如果不想设置就用最高账户）<br><img src="https://img-blog.csdnimg.cn/1bc1b69874884f94845ecd07e81b4971.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>记好对应的 smtp user 和 smtp password<br>忘了也没事 可以在<a href="https://console.aws.amazon.com/iamv2/home?#/home" target="_blank" rel="external nofollow noopener noreferrer">IAM 控制面板</a><br><img src="https://img-blog.csdnimg.cn/7591d5ef6a1244fcaa8e686fea95efdc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>修改对应权限 把 ses 的权限都选中<br><img src="https://img-blog.csdnimg.cn/4777b3b316ac4f2da511f1dbe8046c6b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>配置域名<br><img src="https://img-blog.csdnimg.cn/59e2e067a59142fa9f2d718e15287bb0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3fac5f066fb642f38e958d93992b76d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7f747537abd447028d4e5d1ed8a5f995.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>配置管理集 （例如取名-noreply）<br><img src="https://img-blog.csdnimg.cn/bcc61d0f76254d3ea315daed06c79c1d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="6."></p></li><li><p>获取 Amazon SES SMTP 凭证<br>文档<code>https://docs.aws.amazon.com/zh_cn/ses/latest/dg/smtp-credentials.html</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> crypto <span class="keyword">from</span> <span class="string">"crypto"</span>;</span><br><span class="line"><span class="comment">// The values of the following variables should always stay the same.</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="string">"11111111"</span>;</span><br><span class="line"><span class="keyword">const</span> service = <span class="string">"ses"</span>;</span><br><span class="line"><span class="keyword">const</span> terminal = <span class="string">"aws4_request"</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">"SendRawEmail"</span>;</span><br><span class="line"><span class="keyword">const</span> version = <span class="string">"04"</span>;</span><br><span class="line"><span class="keyword">const</span> region = <span class="string">"us-west-1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modify this variable to include your AWS secret access key</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kDate = HmacSha256(date, Buffer.from(<span class="string">"AWS4"</span> + key, <span class="string">"utf8"</span>));</span><br><span class="line"><span class="keyword">const</span> kRegion = HmacSha256(region, kDate);</span><br><span class="line"><span class="keyword">const</span> kService = HmacSha256(service, kRegion);</span><br><span class="line"><span class="keyword">const</span> kTerminal = HmacSha256(terminal, kService);</span><br><span class="line"><span class="keyword">const</span> kMessage = HmacSha256(message, kTerminal);</span><br><span class="line"><span class="keyword">const</span> signatureAndVersion = Buffer.concat([</span><br><span class="line">  Buffer.from(version, <span class="string">"hex"</span>),</span><br><span class="line">  kMessage,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取smtpPassword 以后就可以永久使用了 除非更新了 AWS secret access key</span></span><br><span class="line"><span class="keyword">const</span> smtpPassword = signatureAndVersion.toString(<span class="string">"base64"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HmacSha256</span>(<span class="params">data: string, key: Buffer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHmac(<span class="string">"sha256"</span>, key).update(data).digest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发送邮件-使用 smtp 发送</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> nodemailer <span class="keyword">from</span> <span class="string">"nodemailer"</span>;</span><br><span class="line"><span class="keyword">const</span> mailer = nodemailer.createTransport(&#123;</span><br><span class="line">  host: <span class="string">"email-smtp.us-west-1.amazonaws.com"</span>,</span><br><span class="line">  port: <span class="string">"465"</span>,</span><br><span class="line">  ignoreTLS: <span class="literal">true</span>,</span><br><span class="line">  secure: <span class="literal">true</span>,</span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: <span class="string">"AWS 访问密钥 ID"</span>,</span><br><span class="line">    pass: smtpPassword,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>发送邮件-使用 npm 包 发送</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mailerService = <span class="keyword">new</span> SES(&#123;</span><br><span class="line">  region: <span class="string">"us-west-1"</span>,</span><br><span class="line">  credentialDefaultProvider: <span class="function">(<span class="params">input: any</span>) =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">      accessKeyId: <span class="string">"AWS 访问密钥 ID"</span>,</span><br><span class="line">      secretAccessKey: <span class="string">"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</span>, <span class="comment">// secret access key</span></span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/** 收件人邮箱 */</span></span><br><span class="line"><span class="keyword">const</span> destination = &#123;</span><br><span class="line">  <span class="comment">/** 收件 */</span></span><br><span class="line">  ToAddresses: [<span class="string">"test@qq.com"</span>],</span><br><span class="line">  <span class="comment">/** 抄送 */</span></span><br><span class="line">  <span class="comment">// CcAddresses: [],</span></span><br><span class="line">  <span class="comment">/** 密件抄送 */</span></span><br><span class="line">  <span class="comment">// BccAddresses:[]</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** 标题 */</span></span><br><span class="line"><span class="keyword">const</span> subject = &#123;</span><br><span class="line">  Data: <span class="string">"test"</span>,</span><br><span class="line">  Charset: <span class="keyword">this</span>.mailInfo.charset,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** 内容 */</span></span><br><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">  Html: &#123;</span><br><span class="line">    Data: <span class="string">"&lt;P&gt;test&lt;/P&gt;"</span>,</span><br><span class="line">    Charset: <span class="string">"UTF-8"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.mailerService.sendEmail(&#123;</span><br><span class="line">  Message: &#123; <span class="attr">Subject</span>: subject, <span class="attr">Body</span>: body &#125;,</span><br><span class="line">  Source: <span class="keyword">from</span>,</span><br><span class="line">  Destination: destination,</span><br><span class="line">  ConfigurationSetName: <span class="string">"noreply"</span>, <span class="comment">// 上面配置的管理集</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="7"><li>移出 Amazon SES 沙盒<br>文档<code>https://docs.aws.amazon.com/zh_cn/ses/latest/dg/request-production-access.html</code></li></ol><p><img src="https://img-blog.csdnimg.cn/c390e5d98281496ca0145023d1752295.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e654d17f7efc409380d7a1e7d073e018.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><code>注意</code>: 里面内容不用乱写，最好详细介绍你为啥要使用这个，不然容易驳回</p><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><ol><li>没有移除邮箱不能随便发送到其他邮箱，可以自己添加对应的邮箱到 amazon ses 中，他会发一封验证邮件 验证通过就可以测试邮件发送了<br><img src="https://img-blog.csdnimg.cn/c9461fa734bf48d9bf94fd8b8e68ecb8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>关于发送邮件日志的查询<br>还在处理中 文档 <a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/ses-email-sending-history/" target="_blank" rel="external nofollow noopener noreferrer"> Amazon Simple Email Service（Amazon SES）中查看电子邮件发送历史记录。该如何操作?</a></li></ol><h2 id="邮件接收回调"><a href="#邮件接收回调" class="headerlink" title="邮件接收回调"></a>邮件接收回调</h2><p>由于流记录那种方式没有配置成功，所以还是配置回调来记录接收情况。<br>文档： <a href="https://docs.aws.amazon.com/zh_cn/ses/latest/dg/configure-sns-notifications.html" target="_blank" rel="external nofollow noopener noreferrer">使用 Amazon SES 控制台来配置通知</a></p><ol><li>创建主题 <code>https://us-west-1.console.aws.amazon.com/sns/v3/home?region=us-west-1#/topics</code><br><img src="https://img-blog.csdnimg.cn/77654bdba94541378f4f9ce9e6a35e29.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>为主题增加订阅<br><img src="https://img-blog.csdnimg.cn/d736fb6c2cc9433d9c8a4b6e79745054.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>选择 https 协议，如果选择邮箱太烦了，这样就会推送到你的服务器上<br><img src="https://img-blog.csdnimg.cn/367594b02ffe4abfa5dfdb6fd6f95fbc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>服务器接收 - 它是 text/plain 方式请求过来的 拿出里面的<code>SubscribeURL</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result: string = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">""</span>;</span><br><span class="line">  req.setEncoding(<span class="string">"utf8"</span>);</span><br><span class="line">  req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    data += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">"error"</span>, (err) =&gt; reject(err));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者直接 req.body</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用<code>SubscribeURL</code> 来确认订阅 正常就可以了<br><img src="https://img-blog.csdnimg.cn/f6b6bd56f4c2481fa98768cc20fae886.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>接入到对应的发送邮件域名中</li></ol><p><img src="https://img-blog.csdnimg.cn/423fce423dfb44d8ab8d4fd40e3c4c99.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>主题选择你自己设置的名称就可以了</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://docs.aws.amazon.com/zh_cn/opensearch-service/latest/developerguide/integrations.html" target="_blank" rel="external nofollow noopener noreferrer">Amazon Kinesis Data Firehose 加载流数据</a><br><a href="https://docs.aws.amazon.com/zh_cn/ses/latest/dg/event-publishing-add-event-destination-firehose.html#event-publishing-add-event-destination-firehose-role" target="_blank" rel="external nofollow noopener noreferrer">为 Amazon SES 事件发布设置 Kinesis Data Firehose 事件目的地</a><br><a href="https://us-west-1.console.aws.amazon.com/firehose/home?region=us-west-1#/streams" target="_blank" rel="external nofollow noopener noreferrer">流控制台</a><br><a href="https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html" target="_blank" rel="external nofollow noopener noreferrer">监控您的 Amazon SES 发送活动</a><br><a href="https://docs.aws.amazon.com/ses/latest/dg/configure-sns-notifications.html" target="_blank" rel="external nofollow noopener noreferrer">为 Amazon SES 配置 Amazon SNS 通知</a><br><a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/ses-email-sending-history/" target="_blank" rel="external nofollow noopener noreferrer"> Amazon Simple Email Service（Amazon SES）中查看电子邮件发送历史记录。该如何操作?</a><br><a href="https://docs.aws.amazon.com/zh_cn/ses/latest/dg/request-production-access.html" target="_blank" rel="external nofollow noopener noreferrer">关于移除沙盒</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;亚马逊邮箱推送配置&quot;&gt;&lt;a href=&quot;#亚马逊邮箱推送配置&quot; class=&quot;headerlink&quot; title=&quot;亚马逊邮箱推送配置&quot;&gt;&lt;/a&gt;亚马逊邮箱推送配置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入&lt;code&gt;Amazon Simple Email Servi
      
    
    </summary>
    
    
    
      <category term="amazon" scheme="https://blog.wjc66.cn/tags/amazon/"/>
    
  </entry>
  
  <entry>
    <title>飞书-企业自建应用</title>
    <link href="https://blog.wjc66.cn/%E9%A3%9E%E4%B9%A6-%E4%BC%81%E4%B8%9A%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8/"/>
    <id>https://blog.wjc66.cn/%E9%A3%9E%E4%B9%A6-%E4%BC%81%E4%B8%9A%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8/</id>
    <published>2022-02-21T08:44:36.000Z</published>
    <updated>2022-02-21T08:55:32.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="企业自建应用-嵌入三方网页"><a href="#企业自建应用-嵌入三方网页" class="headerlink" title="企业自建应用 嵌入三方网页"></a>企业自建应用 嵌入三方网页</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>进入<code>https://open.feishu.cn/app?lang=zh-CN</code></p></li><li><p>选择创建自建应用-内容随便</p></li><li><p>获取对应的应用凭证<br><img src="https://img-blog.csdnimg.cn/12c92114f8584f10b3a2c2aca6f41ba3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>嵌入网页配置<br><img src="https://img-blog.csdnimg.cn/7d733f9fd91a4266ba8ec41391962940.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>手机端和电脑端可以一样</p></li><li><p>在权限关联中授权获取手机号和邮箱<br><img src="https://img-blog.csdnimg.cn/af64c572686147a5a271d6b4298156af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol><li>获取 AppAccessToken<br>文档： <code>https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/auth-v3/auth/app_access_token_internal</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const res = await request</span><br><span class="line">      .post(<span class="string">'https://open.feishu.cn/open-apis/auth/v3/app_access_token/internal'</span>)</span><br><span class="line">      .<span class="built_in">set</span>(&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .send(&#123;</span><br><span class="line">        app_id: data.client_id,</span><br><span class="line">        app_secret: data.client_secret,</span><br><span class="line">      &#125;);</span><br><span class="line">    const body = res.body;</span><br><span class="line">    <span class="keyword">if</span> (!(body.msg === <span class="string">'ok'</span> &amp;&amp; body.code === 0)) throw new CustomException(-1, <span class="string">'获取app_access_token失败'</span>);</span><br><span class="line">    const &#123; app_access_token, expire &#125; = body;</span><br></pre></td></tr></table></figure><ol start="2"><li>获取用户信息<br>文档<code>https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const res = await request</span><br><span class="line">      .post(<span class="string">'https://open.feishu.cn/open-apis/authen/v1/access_token'</span>)</span><br><span class="line">      .<span class="built_in">set</span>(&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">        Authorization: `Bearer <span class="variable">$&#123;data.access_token&#125;</span>`,</span><br><span class="line">      &#125;)</span><br><span class="line">      .send(&#123;</span><br><span class="line">        grant_type: <span class="string">'authorization_code'</span>,</span><br><span class="line">        code: code,</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;企业自建应用-嵌入三方网页&quot;&gt;&lt;a href=&quot;#企业自建应用-嵌入三方网页&quot; class=&quot;headerlink&quot; title=&quot;企业自建应用 嵌入三方网页&quot;&gt;&lt;/a&gt;企业自建应用 嵌入三方网页&lt;/h1&gt;&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; cla
      
    
    </summary>
    
    
    
      <category term="飞书" scheme="https://blog.wjc66.cn/tags/%E9%A3%9E%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>如何对typescript进行单元测试</title>
    <link href="https://blog.wjc66.cn/%E5%A6%82%E4%BD%95%E5%AF%B9typescript%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.wjc66.cn/%E5%A6%82%E4%BD%95%E5%AF%B9typescript%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2022-01-06T13:34:18.000Z</published>
    <updated>2022-03-30T07:06:54.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>yarn add -D ts-jest jest @types/jest</code></p><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p><code>npm i jest -g</code></p><h2 id="初始化-jest"><a href="#初始化-jest" class="headerlink" title="初始化 jest"></a>初始化 jest</h2><p><code>jest --init</code></p><h2 id="移除生成的-jest-config-js-文件"><a href="#移除生成的-jest-config-js-文件" class="headerlink" title="移除生成的 jest.config.js 文件"></a>移除生成的 jest.config.js 文件</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 package.json 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jest"</span>: &#123;</span><br><span class="line">    <span class="string">"moduleFileExtensions"</span>: [</span><br><span class="line">      <span class="string">"js"</span>,</span><br><span class="line">      <span class="string">"json"</span>,</span><br><span class="line">      <span class="string">"ts"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"rootDir"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="string">"testRegex"</span>: <span class="string">".spec.ts$"</span>,</span><br><span class="line">    <span class="string">"transform"</span>: &#123;</span><br><span class="line">      <span class="string">"^.+\\.(t|j)s$"</span>: <span class="string">"ts-jest"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"coverageDirectory"</span>: <span class="string">"./coverage"</span>,</span><br><span class="line">    <span class="string">"testEnvironment"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="string">"roots"</span>: [</span><br><span class="line">      <span class="string">"&lt;rootDir&gt;/test/"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"test"</span>, () =&gt; &#123;</span><br><span class="line">  beforeAll(<span class="keyword">async</span> () =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"test"</span>, () =&gt; &#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;code&gt;yarn add -D ts-jest jest @types/jest&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;全局安装&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
      <category term="typescript" scheme="https://blog.wjc66.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL中JSONB的使用</title>
    <link href="https://blog.wjc66.cn/PostgreSQL%E4%B8%ADJSONB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.wjc66.cn/PostgreSQL%E4%B8%ADJSONB%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-27T05:23:52.000Z</published>
    <updated>2021-12-27T05:58:23.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json-类型"><a href="#json-类型" class="headerlink" title="json 类型"></a>json 类型</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>根据 RFC 7159[1]中的说明，JSON 数据类型是用来存储 JSON（JavaScript Object Notation） 数据的。这种数据也可以被存储为 text，但是 JSON 数据类型的 优势在于能强制要求每个被存储的值符合 JSON 规则。也有很多 JSON 相关的函 数和操作符可以用于存储在这些数据类型中的数据</p><p>PostgreSQL 支持两种 JSON 数据类型：json 和 jsonb。它们几乎接受完全相同的值集合作为输入。两者最大的区别是效率。json 数据类型存储输入文本的精准拷贝，处理函数必须在每 次执行时必须重新解析该数据。而 jsonb 数据被存储在一种分解好的二进制格式中，因为需要做附加的转换，它在输入时要稍慢一些。但是 jsonb 在处理时要快很多，因为不需要重新解析。</p><blockquote><p>重点：jsonb 支持索引</p></blockquote><a id="more"></a><p>由于 json 类型存储的是输入文本的准确拷贝，存储时会空格和 JSON 对象内部的键的顺序。如果一个值中的 JSON 对象包含同一个键超过一次，所有的键/值对都会被保留（** 处理函数会把最后的值当作有效值**）。</p><p>jsonb 不保留空格、不保留对象键的顺序并且不保留重复的对象键。如果在输入中指定了重复的键，只有最后一个值会被保留。</p><blockquote><p>推荐把 JSON 数据存储为 jsonb</p></blockquote><p>在把文本 JSON 输入转换成 jsonb 时，JSON 的基本类型（RFC 7159[1] ）会被映射到原生的 PostgreSQL 类型。因此，jsonb 数据有一些次要额外约束。比如：jsonb 将拒绝除 PostgreSQL numeric 数据类型范围之外的数字，而 json 则不会。</p><h2 id="json-输入输出语法"><a href="#json-输入输出语法" class="headerlink" title="json 输入输出语法"></a>json 输入输出语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-- 简单标量/基本值</span><br><span class="line">-- 基本值可以是数字、带引号的字符串、<span class="literal">true</span>、<span class="literal">false</span>或者null</span><br><span class="line">SELECT <span class="string">'5'</span>::json;</span><br><span class="line"></span><br><span class="line">-- 有零个或者更多元素的数组（元素不需要为同一类型）</span><br><span class="line">SELECT <span class="string">'[1, 2, "foo", null]'</span>::json;</span><br><span class="line"></span><br><span class="line">-- 包含键值对的对象</span><br><span class="line">-- 注意对象键必须总是带引号的字符串</span><br><span class="line">SELECT <span class="string">'&#123;"bar": "baz", "balance": 7.77, "active": false&#125;'</span>::json;</span><br><span class="line"></span><br><span class="line">-- 数组和对象可以被任意嵌套</span><br><span class="line">SELECT <span class="string">'&#123;"foo": [true, "bar"], "tags": &#123;"a": 1, "b": null&#125;&#125;'</span>::json;</span><br><span class="line"></span><br><span class="line">-- <span class="string">"-&gt;"</span> 通过键获得 JSON 对象域 结果为json对象</span><br><span class="line">select <span class="string">'&#123;"nickname": "goodspeed", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;<span class="string">'nickname'</span> as nickname;</span><br><span class="line"> nickname</span><br><span class="line">-------------</span><br><span class="line"> <span class="string">"goodspeed"</span></span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">-- <span class="string">"-&gt;&gt;"</span> 通过键获得 JSON 对象域 结果为text</span><br><span class="line">select <span class="string">'&#123;"nickname": "goodspeed", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;&gt;<span class="string">'nickname'</span> as nickname;</span><br><span class="line"> nickname</span><br><span class="line">-----------</span><br><span class="line"> goodspeed</span><br><span class="line"></span><br><span class="line">-- <span class="string">"-&gt;"</span> 通过键获得 JSON 对象域 结果为json对象</span><br><span class="line">select <span class="string">'&#123;"nickname": "goodspeed", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;<span class="string">'nickname'</span> as nickname;</span><br><span class="line"> nickname</span><br><span class="line">-------------</span><br><span class="line"> <span class="string">"goodspeed"</span></span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">-- <span class="string">"-&gt;&gt;"</span> 通过键获得 JSON 对象域 结果为text</span><br><span class="line">select <span class="string">'&#123;"nickname": "goodspeed", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;&gt;<span class="string">'nickname'</span> as nickname;</span><br><span class="line"> nickname</span><br><span class="line">-----------</span><br><span class="line"> goodspeed</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h2 id="包含和存在"><a href="#包含和存在" class="headerlink" title="包含和存在"></a>包含和存在</h2><h3 id="gt-和-gt-gt-操作符"><a href="#gt-和-gt-gt-操作符" class="headerlink" title="-&gt; 和 -&gt;&gt; 操作符"></a>-&gt; 和 -&gt;&gt; 操作符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- nickname 为 gs 的用户 这里使用 -&gt;&gt; 查出的数据为text，所以匹配项也应该是text</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;&gt;<span class="string">'nickname'</span> = <span class="string">'gs'</span>;</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;&gt;<span class="string">'nickname'</span> = <span class="string">'gs'</span>;</span><br><span class="line"></span><br><span class="line">-- 使用 -&gt; 查询，会抛出错误，这里无论匹配项是text类型的 <span class="string">'gs'</span>  还是 json 类型的 <span class="string">'"gs"'</span>::json都会抛出异常，json 类型不支持 等号（=）操作符</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;<span class="string">'nickname'</span> = <span class="string">'"gs"'</span>;</span><br><span class="line">ERROR:  operator does not exist: json = unknown</span><br><span class="line"></span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;<span class="string">'nickname'</span> = <span class="string">'"gs"'</span>::json;</span><br><span class="line">ERROR:  operator does not exist: json = json</span><br><span class="line"></span><br><span class="line">-- jsonb 格式是可以查询成功的，这里使用 -&gt; 查出的数据为json 对象，所以匹配项也应该是json 对象</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;<span class="string">'nickname'</span> = <span class="string">'"gs"'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用 -&gt;&gt; 查出的数据为 text 使用 -&gt; 查出的数据为 json 对象</p></blockquote><h3 id="gt-和-gt-gt-操作符-1"><a href="#gt-和-gt-gt-操作符-1" class="headerlink" title="#&gt; 和 #&gt;&gt; 操作符"></a>#&gt; 和 #&gt;&gt; 操作符</h3><blockquote><p>使用 #&gt;&gt; 查出的数据为 text 使用 #&gt; 查出的数据为 json 对象</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json<span class="comment">#&gt;'&#123;tags,0&#125;' as tag;</span></span><br><span class="line">   tag</span><br><span class="line">----------</span><br><span class="line"> <span class="string">"python"</span></span><br><span class="line"></span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json<span class="comment">#&gt;&gt;'&#123;tags,0&#125;' as tag;</span></span><br><span class="line">  tag</span><br><span class="line">--------</span><br><span class="line"> python</span><br><span class="line"></span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb<span class="comment">#&gt;'&#123;tags,0&#125;' = '"python"';</span></span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb<span class="comment">#&gt;&gt;'&#123;tags,0&#125;' = 'python';</span></span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line"></span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json<span class="comment">#&gt;&gt;'&#123;tags,0&#125;' = 'python';</span></span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line">-- 会抛出错误，这里无论匹配项是text类型的 <span class="string">'python'</span>  还是 json 类型的 <span class="string">'"python"'</span>::json都会抛出异常，json 类型不支持 等号（=）操作符</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json<span class="comment">#&gt;'&#123;tags,0&#125;' = '"python"';</span></span><br><span class="line">ERROR:  operator does not exist: json = unknown</span><br></pre></td></tr></table></figure><h2 id="jsonb-数据查询（不适用于-json）"><a href="#jsonb-数据查询（不适用于-json）" class="headerlink" title="jsonb 数据查询（不适用于 json）"></a>jsonb 数据查询（不适用于 json）</h2><h3 id="gt-操作符"><a href="#gt-操作符" class="headerlink" title="@&gt;操作符"></a>@&gt;操作符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- nickname 为 nickname 的用户</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb @&gt; <span class="string">'&#123;"nickname": "gs"&#125;'</span>::jsonb;</span><br><span class="line"></span><br><span class="line">-- 等同于以下查询</span><br><span class="line">-- 这里使用 -&gt; 查出的数据为json 对象，所以匹配项也应该是json 对象</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;<span class="string">'nickname'</span> = <span class="string">'"gs"'</span>;</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;&gt;<span class="string">'nickname'</span> = <span class="string">'gs'</span>;</span><br><span class="line"></span><br><span class="line">-- 查询有 python 和 golang 标签的数据</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb @&gt; <span class="string">'&#123;"tags": ["python", "golang"]&#125;'</span>;</span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br></pre></td></tr></table></figure><h3 id="操作符、-操作符和-amp-操作符"><a href="#操作符、-操作符和-amp-操作符" class="headerlink" title="?操作符、?|操作符和?&amp;操作符"></a>?操作符、?|操作符和?&amp;操作符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 查询有 avatar 属性的用户</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb ? <span class="string">'avatar'</span>;</span><br><span class="line">-- 查询有 avatar 属性 并且avatar 数据不为空的数据</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": null, "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;&gt;<span class="string">'avatar'</span> is not <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">-- 查询 有 avatar 或 tags 的数据</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb ?| array[<span class="string">'avatar'</span>, <span class="string">'tags'</span>];</span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line"></span><br><span class="line">-- 查询 既有 avatar 又有 tags 的用户</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb ?&amp; array[<span class="string">'avatar'</span>, <span class="string">'tags'</span>];</span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> f</span><br><span class="line"></span><br><span class="line"> -- 查询 tags 中包含 python 标签的数据</span><br><span class="line"> select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;<span class="string">'tags'</span> ? <span class="string">'python'</span>;</span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br></pre></td></tr></table></figure><h2 id="json-和-jsonb-的操作符列表"><a href="#json-和-jsonb-的操作符列表" class="headerlink" title="json 和 jsonb 的操作符列表"></a>json 和 jsonb 的操作符列表</h2><h3 id="json-和-jsonb-操作符"><a href="#json-和-jsonb-操作符" class="headerlink" title="json 和 jsonb 操作符"></a>json 和 jsonb 操作符</h3><p><img src="https://img-blog.csdnimg.cn/9ccc01b6ffff49899299fe404358df1d.png" alt="在这里插入图片描述"></p><h3 id="额外的-jsonb-操作符"><a href="#额外的-jsonb-操作符" class="headerlink" title="额外的 jsonb 操作符"></a>额外的 jsonb 操作符</h3><p><img src="https://img-blog.csdnimg.cn/327e12ce9d3c4cbfa06fe4ed4f5cfd22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="新增或者修改"><a href="#新增或者修改" class="headerlink" title="新增或者修改"></a>新增或者修改</h2><p><code>原始数据结构 {&quot;accountClear&quot;: {&quot;clearType&quot;: &quot;Clear&quot;, &quot;csmReason&quot;: &quot;钱不对&quot;, &quot;addToBlackList&quot;: {&quot;blackCorporate&quot;: true, &quot;blackEnterprise&quot;: true}, &quot;applyReviewReason&quot;: &quot;钱不对&quot;}}</code></p><ol><li><p>修改 clearType 的参数<br><code>update apply set &quot;data&quot; = jsonb_set(&quot;data&quot;::jsonb, &#39;{accountClear, clearType}&#39;, &#39;&quot;Clear&quot;&#39;, true) where &quot;type&quot; = &#39;AccountClear&#39;;</code></p></li><li><p>移除 accountClear<br><code>update apply set &quot;data&quot;= &quot;data&quot;- &#39;accountClear&#39; where id=&#39;4cb0568d-d571-4256-8aea-7eee9a6dca1c&#39;;</code></p></li><li><p>移除 data 中 accountClear 下的 clearType<br><code>update apply set &quot;data&quot;= &quot;data&quot; #- &#39;{accountClear,clearType}&#39; where id=&#39;4cb0568d-d571-4256-8aea-7eee9a6dca1c&#39;;</code></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jsonb_set(target         jsonb,  // 需要修改的数据</span><br><span class="line">          path           text[], // 数据路径</span><br><span class="line">          new_value      jsonb,  // 新数据</span><br><span class="line">          create_missing boolean default <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><code>如果 create_missing 是 true （缺省是 true），并且 path 指定的路径在 target 中不存在，那么 target 将包含 path 指定部分， new_value 替换部分， 或者 new_value 添加部分。</code></p><h2 id="GIN-索引介绍"><a href="#GIN-索引介绍" class="headerlink" title="GIN 索引介绍"></a>GIN 索引介绍</h2><p>JSONB 最常用的是 GIN 索引，GIN 索引可以被用来有效地搜索在大量 jsonb 文档（数据）中出现 的键或者键值对。</p><blockquote><p>GIN(Generalized Inverted Index, 通用倒排索引) 是一个存储对(key, posting list)集合的索引结构，其中 key 是一个键值，而 posting list 是一组出现过 key 的位置。如(‘hello’, ‘14:2 23:4’)中，表示 hello 在 14:2 和 23:4 这两个位置出现过，在 PG 中这些位置实际上就是元组的 tid(行号，包括数据块 ID（32bit）,以及 item point(16 bit) )。</p></blockquote><blockquote><p>在表中的每一个属性，在建立索引时，都可能会被解析为多个键值，所以同一个元组的 tid 可能会出现在多个 key 的 posting list 中。</p></blockquote><blockquote><p>通过这种索引结构可以快速的查找到包含指定关键字的元组，因此 GIN 索引特别适用于多值类型的元素搜索，比如支持全文搜索，数组中元素的搜索，而 PG 的 GIN 索引模块最初也是为了支持全文搜索而开发的。</p></blockquote><p>jsonb 的默认 GIN 操作符类支持使用顶层键存在运算符?、?&amp;以及?| 操作符和路径/值存在运算符@&gt;的查询。</p><p><code>-- 创建默认索引</code><br><code>CREATE INDEX idxgin ON api USING GIN (jdoc);</code></p><p>非默认的 GIN 操作符类 jsonb_path_ops 只支持索引@&gt;操作符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 创建指定路径的索引</span><br><span class="line">CREATE INDEX idxgin ON api USING GIN (jdoc, (<span class="string">'a'</span>-&gt;<span class="string">'b'</span>));</span><br></pre></td></tr></table></figure><p>eg:</p><p><code>EXPLAIN SELECT * from apply where &quot;data&quot;-&gt;&#39;accountClear&#39;-&gt;&#39;clearType&#39; ? &#39;LogOff&#39;</code></p><p>上述 sql 会使用索引：<br><img src="https://img-blog.csdnimg.cn/5de8c6b5ade14fc296250282dc1010ae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><code>EXPLAIN SELECT * from apply where &quot;data&quot;-&gt;&#39;accountClear&#39;-&gt;&#39;clearType&#39; = &#39;&quot;LogOff&quot;&#39;</code></p><p><img src="https://img-blog.csdnimg.cn/441e7bffd7d6471d994b01e2fd03d298.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;json-类型&quot;&gt;&lt;a href=&quot;#json-类型&quot; class=&quot;headerlink&quot; title=&quot;json 类型&quot;&gt;&lt;/a&gt;json 类型&lt;/h2&gt;&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;根据 RFC 7159[1]中的说明，JSON 数据类型是用来存储 JSON（JavaScript Object Notation） 数据的。这种数据也可以被存储为 text，但是 JSON 数据类型的 优势在于能强制要求每个被存储的值符合 JSON 规则。也有很多 JSON 相关的函 数和操作符可以用于存储在这些数据类型中的数据&lt;/p&gt;
&lt;p&gt;PostgreSQL 支持两种 JSON 数据类型：json 和 jsonb。它们几乎接受完全相同的值集合作为输入。两者最大的区别是效率。json 数据类型存储输入文本的精准拷贝，处理函数必须在每 次执行时必须重新解析该数据。而 jsonb 数据被存储在一种分解好的二进制格式中，因为需要做附加的转换，它在输入时要稍慢一些。但是 jsonb 在处理时要快很多，因为不需要重新解析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重点：jsonb 支持索引&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="postgresql" scheme="https://blog.wjc66.cn/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>压测工具使用</title>
    <link href="https://blog.wjc66.cn/%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.wjc66.cn/%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-16T09:34:43.000Z</published>
    <updated>2021-12-16T10:19:57.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-Bench"><a href="#Apache-Bench" class="headerlink" title="Apache Bench"></a>Apache Bench</h2><p>Apache Bench 简介<br>ApacheBench 是 Apache 服务器自带的一个 web 压力测试工具，简称 ab。ab 又是一个命令行工具，对发起负载的本机要求很低，根据 ab 命令可以创建很多的并发访问线程，模拟多个访问者同时对某一 URL 地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说 ab 工具小巧简单，上手学习较快，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。</p><a id="more"></a><ol><li><p><a href="https://www.apachelounge.com/download/#google_vignette" target="_blank" rel="external nofollow noopener noreferrer">下载</a></p><p><img src="https://img-blog.csdnimg.cn/cb7d20bc7f9040c38d4a0fadd05dbdbf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>解压到本地就可以直接使用,使用如下<br><code>.\bin\abs.exe -c 1 -n 1 -p .\body.txt -T application/json http://127.0.0.1:3000/testing/nium/api/v1/authorization</code></p></li></ol><p><img src="https://img-blog.csdnimg.cn/9ca0540115c0436cad7042e636115b3d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>body.txt 就是请求的 body 参数<br><img src="https://img-blog.csdnimg.cn/d3a1a92dc12644238c80507c808b6b15.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ol start="3"><li>参数介绍：</li></ol><p>参数说明：<br>格式：ab [options] [http://]hostname[:port]/path</p><p>-n requests Number of requests to perform //本次测试发起的总请求数<br>-c concurrency Number of multiple requests to make //一次产生的请求数（或并发数）<br>-t timelimit Seconds to max. wait for responses //测试所进行的最大秒数，默认没有时间限制。<br>-r Don’t exit on socket receive errors. // 抛出异常继续执行测试任务<br>-p postfile File containing data to POST //包含了需要 POST 的数据的文件，文件格式如“p1=1&amp;p2=2”.使用方法是 -p 111.txt</p><p>-T content-type Content-type header for POSTing<br>//POST 数据所使用的 Content-type 头信息，如 -T “application/x-www-form-urlencoded” 。 （配合-p）</p><p>-v verbosity How much troubleshooting info to print<br>//设置显示信息的详细程度 – 4 或更大值会显示头信息， 3 或更大值可以显示响应代码(404, 200 等), 2 或更大值可以显示警告和其他信息。</p><p>-V 显示版本号并退出。<br>-C attribute Add cookie, eg. -C “c1=1234,c2=2,c3=3” (repeatable)<br>//-C cookie-name=value 对请求附加一个 Cookie:行。 其典型形式是 name=value 的一个参数对。此参数可以重复，用逗号分割。<br>提示：可以借助 session 实现原理传递 JSESSIONID 参数， 实现保持会话的功能，如-C ” c1=1234,c2=2,c3=3, JSESSIONID=FF056CD16DA9D71CB131C1D56F0319F8″ 。</p><p>-w Print out results in HTML tables //以 HTML 表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。<br>-i Use HEAD instead of GET</p><ol start="4"><li><p>返回介绍<br>Document Path:测试页面<br>Document Length: 页面大小<br>Concurrency Level: 测试的并发数<br>Time taken for tests:整个测试持续的时间<br>Complete requests:完成的请求数量<br>Failed requests: 失败的请求数量<br>Write errors: 0<br>Total transferred: 整个过程中的网络传输量<br>HTML transferred: 整个过程中的 HTML 内容传输量<br>Requests per second: 最重要的指标之一，相当于 LR 中的每秒事务数，后面括号中的 mean 表示这是一个平均值<br>Time per request: 最重要的指标之二，相当于 LR 中的平均事务响应时间，后面括号中的 mean 表示这是一个平均值<br>Time per request: 每个连接请求实际运行时间的平均值<br>Transfer rate: 平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</p></li><li><p><a href="https://blog.csdn.net/weixin_39089928/article/details/87371792" target="_blank" rel="external nofollow noopener noreferrer">参考文档</a></p></li></ol><h2 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h2><ol><li><p>jmeter 简介<br>Apache JMeter 是 Apache 组织开发的基于 Java 的压力测试工具。用于对软件做压力测试，它最初被设计用于 Web 应用测试，但后来扩展到其他测试领域。 可以用于测试静态和动态资源，例如静态文件、CGI 脚本、Java 对象、数据库、FTP 服务器 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。</p></li><li><p>jmeter 安装<br>由于 Jmeter 是基于 java 开发，首先需要下载安装 JDK （目前 JMeter 只支持到 Java 8，尚不支持 Java 9）。<br>官网下载地址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="external nofollow noopener noreferrer">http://jmeter.apache.org/download_jmeter.cgi</a><br>下载完成后解压 zip 包<br>启动 JMeter，双击 JMeter 解压路径（apache-jmeter-3.3\bin）bin 下面的 jmeter.bat 即可<br>Jmeter 是支持中文的，启动 Jmeter 后， 点击 Options -&gt; Choose Language 来选择语言</p></li><li><p>jmeter 使用<br>(1) 添加线程组<br>线程数：虚拟用户数，用于并发测试。<br>Ramp-Up Period(in seconds)准备时长：设置的虚拟用户数需要多长时间全部启动。如果线程数为 10，准备时长为 2，那么需要 2 秒钟启动 10 个线程，也就是每秒钟启动 5 个线程。<br>循环次数：每个线程发送请求的次数。如果线程数为 10，循环次数为 100，那么每个线程发送 100 次请求。总请求数为 10*100=1000 。如果勾选了“永远”，那么所有线程会一直发送请求，一到选择停止运行脚本。<br>(2) 在线程组下添加测试的请求类型，例如 http 请求、TCP 请求等，注意一些请求可能需要添加额外的插件才能实现（例如 UDP）。下面以常用的 http 请求为例。<br>协议：向目标服务器发送 HTTP 请求协议，可以是 HTTP 或 HTTPS，默认为 HTTP 。<br>服务器名称或 IP ：HTTP 请求发送的目标服务器名称或 IP 。<br>端口号：目标服务器的端口号，默认值为 80 。<br>方法：发送 HTTP 请求的方法，可用方法包括 GET、POST、HEAD、PUT、OPTIONS、TRACE、DELETE 等。<br>路径：目标 URL 路径（URL 中去掉服务器地址、端口及参数后剩余部分）<br>Content encoding ：编码方式，默认为 ISO-8859-1 编码，可以配置为 utf-8<br><img src="https://img-blog.csdnimg.cn/437d0dcc10164e89a29a4d987b5c845f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d99e7674f1ff418e8c2043957d7fa41a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>（3）添加监听器-查看结果树</p></li><li><p>聚合报告详解：<br>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值。<br>#Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟 10 个用户，每个用户迭代 10 次，那么这里显示 100。<br>Average：平均响应时间——默认情况下是单个 Request 的平均响应时间（ms），当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间。<br>Median：中位数，也就是 50％ 用户的响应时间<br>90% Line：90％ 用户的响应时间<br>Min：最小响应时间<br>Max：最大响应时间<br>Error%：错误率——错误请求数/请求总数<br>throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second）<br>KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput/Sec</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Apache-Bench&quot;&gt;&lt;a href=&quot;#Apache-Bench&quot; class=&quot;headerlink&quot; title=&quot;Apache Bench&quot;&gt;&lt;/a&gt;Apache Bench&lt;/h2&gt;&lt;p&gt;Apache Bench 简介&lt;br&gt;ApacheBench 是 Apache 服务器自带的一个 web 压力测试工具，简称 ab。ab 又是一个命令行工具，对发起负载的本机要求很低，根据 ab 命令可以创建很多的并发访问线程，模拟多个访问者同时对某一 URL 地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说 ab 工具小巧简单，上手学习较快，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="压测工具" scheme="https://blog.wjc66.cn/tags/%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>git撤销commit中单个文件的修改</title>
    <link href="https://blog.wjc66.cn/git%E6%92%A4%E9%94%80commit%E4%B8%AD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9/"/>
    <id>https://blog.wjc66.cn/git%E6%92%A4%E9%94%80commit%E4%B8%AD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9/</id>
    <published>2021-12-01T05:28:22.000Z</published>
    <updated>2021-12-01T05:32:42.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于不小心提交了了 yarn.lock 文件，后面还 commit 了几次提交。现在只要回退 yarn.lock 的提交。</p><ol><li><p>先查询 yarn.lock 的提交记录<br><code>git log yarn.lock</code></p></li><li><p>找到这个文件的上次 commit id, 并对其进行 reset 操作<br><code>git reset &lt;commit-id&gt; yarn.lock</code></p></li><li><p>再撤销对此文件的修改<br><code>git checkout yarn.lock</code></p></li><li><p>重新 commit 提交就好<br><code>git commit -m &#39;&#39;</code><br><code>git push</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;由于不小心提交了了 yarn.lock 文件，后面还 commit 了几次提交。现在只要回退 yarn.lock 的提交。&lt;/p&gt;
&lt;ol&gt;
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://blog.wjc66.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>配置jdk与maven</title>
    <link href="https://blog.wjc66.cn/%E9%85%8D%E7%BD%AEjdk%E4%B8%8Emaven/"/>
    <id>https://blog.wjc66.cn/%E9%85%8D%E7%BD%AEjdk%E4%B8%8Emaven/</id>
    <published>2021-11-26T02:21:33.000Z</published>
    <updated>2021-11-26T02:23:12.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装与配置-jdk"><a href="#安装与配置-jdk" class="headerlink" title="安装与配置 jdk"></a>安装与配置 jdk</h2><ol><li><p>下载链接（<a href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows）" target="_blank" rel="external nofollow noopener noreferrer">https://www.oracle.com/java/technologies/downloads/#jdk17-windows）</a><br>默认安装就好</p></li><li><p>配置环境变量<br>在系统变量里面增加<br><code>JAVA_HOME C:\Program Files\Java\jdk-17.0.1</code><br><code>Path %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code><br><code>CLASSPATH .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></p></li></ol><a id="more"></a><ol start="3"><li>检验是否配置成功(如下就成功了)<br><img src="https://img-blog.csdnimg.cn/b767a02e41564a34acea65a65e491c40.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ol><h2 id="安装与配置-maven"><a href="#安装与配置-maven" class="headerlink" title="安装与配置 maven"></a>安装与配置 maven</h2><ol><li><p>下载链接（<a href="https://maven.apache.org/download.cgi）" target="_blank" rel="external nofollow noopener noreferrer">https://maven.apache.org/download.cgi）</a><br><img src="https://img-blog.csdnimg.cn/100e624ae8ba497ca780550ce7aa8e72.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>解压 并且创建 maven-local-repository 目录用于存储 jar 包</p></li><li><p>配置环境变量<br>在系统变量里面增加<br><code>Maven_Home D:\maven\apache-maven-3.8.4</code><br>Path 变量值增加 <code>%Maven_Home%\bin</code></p></li><li><p>检测是否配置成功 <code>mvn -v</code><br><img src="https://img-blog.csdnimg.cn/66f6977fc2544e919db721b2b6b9249f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>Maven 的配置<br>打开 settings.xml<br>本地仓库位置<br><code>&lt;localRepository&gt;D:\maven\maven-local-repository&lt;/localRepository&gt;</code></p></li></ol><!-- 配置中央仓库的镜像（改用：阿里云中央仓库镜像）--><pre><code>&lt;mirror&gt;  &lt;id&gt;alimaven&lt;/id&gt;  &lt;name&gt;aliyun-maven&lt;/name&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><ol start="6"><li>IntelliJ IDEA 中使用 Maven<br><img src="https://img-blog.csdnimg.cn/849c3d4f1624456b9c24147d979c05a4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装与配置-jdk&quot;&gt;&lt;a href=&quot;#安装与配置-jdk&quot; class=&quot;headerlink&quot; title=&quot;安装与配置 jdk&quot;&gt;&lt;/a&gt;安装与配置 jdk&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载链接（&lt;a href=&quot;https://www.oracle.com/java/technologies/downloads/#jdk17-windows）&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;https://www.oracle.com/java/technologies/downloads/#jdk17-windows）&lt;/a&gt;&lt;br&gt;默认安装就好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置环境变量&lt;br&gt;在系统变量里面增加&lt;br&gt;&lt;code&gt;JAVA_HOME C:\Program Files\Java\jdk-17.0.1&lt;/code&gt;&lt;br&gt;&lt;code&gt;Path %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;&lt;/code&gt;&lt;br&gt;&lt;code&gt;CLASSPATH .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.wjc66.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>buffer与stream互相转换</title>
    <link href="https://blog.wjc66.cn/buffer%E4%B8%8Estream%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <id>https://blog.wjc66.cn/buffer%E4%B8%8Estream%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-10-25T10:07:30.000Z</published>
    <updated>2022-03-30T07:06:54.332Z</updated>
    
    <content type="html"><![CDATA[<ol><li>流到缓冲区</li></ol><p>第一个操作是将读取流转换为缓冲区。Streams 最有效的操作是将它们通过管道传输到另一个流。这在您不想增加内存使用量的文件系统访问中很常见。</p><p>但是，在处理 HTTP 请求时，您可能希望直接将响应流转换为 JSON 对象或解析 url 编码值。</p><p>为此，您将读取缓冲区 data 事件提供的数据。Streams 将提供一个字符串或一个缓冲区作为数据事件的值。这取决于 Buffer 是否有编码集。默认情况下，它会在 data 事件期间输出 Buffers 。</p><p>这意味着您可以执行以下操作以从流中读取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">streamToBuffer</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> buffers = [];</span><br><span class="line">    stream.on(<span class="string">"error"</span>, reject);</span><br><span class="line">    stream.on(<span class="string">"data"</span>, (data) =&gt; buffers.push(data));</span><br><span class="line">    stream.on(<span class="string">"end"</span>, () =&gt; resolve(Buffer.concat(buffers)));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数获取流（可能来自 HTTP 或 FS 访问）。然后它将每个 Buffer 推送到一个 Buffer 数组中。当流被完全读取时，它会将所有这些 Buffers 与 Buffer.concat 结合起来。</p><p>这显然会对大流造成一些问题，但对于需要在应用程序的后续部分中转换并在内存中携带的小流来说，它非常有用。</p><ol start="2"><li>缓冲区到流<br>下一部分是将 Buffer 转换为流。当您想将数据通过管道传输到现有流中时，这很有用。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Duplex = <span class="built_in">require</span>(<span class="string">"stream"</span>).Duplex;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bufferToStream</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stream = <span class="keyword">new</span> Duplex();</span><br><span class="line">  stream.push(buffer);</span><br><span class="line">  stream.push(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此操作创建一个双工字符串并简单地将缓冲区写入其中。该流现在可以像通常的任何写入流一样使用。</p><p>文档：<br><a href="https://www.derpturkey.com/buffer-to-stream-in-node/" target="_blank" rel="external nofollow noopener noreferrer">缓冲到节点中的流</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;流到缓冲区&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个操作是将读取流转换为缓冲区。Streams 最有效的操作是将它们通过管道传输到另一个流。这在您不想增加内存使用量的文件系统访问中很常见。&lt;/p&gt;
&lt;p&gt;但是，在处理 HTTP 请求时，您可能希望直接将响应流转换为 J
      
    
    </summary>
    
    
    
      <category term="nodejs" scheme="https://blog.wjc66.cn/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>使用git出现过的问题</title>
    <link href="https://blog.wjc66.cn/%E4%BD%BF%E7%94%A8git%E5%87%BA%E7%8E%B0%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.wjc66.cn/%E4%BD%BF%E7%94%A8git%E5%87%BA%E7%8E%B0%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-09-23T07:28:19.000Z</published>
    <updated>2021-09-23T07:30:46.323Z</updated>
    
    <content type="html"><![CDATA[<ol><li>拉取代码出现下面问题<br><code>load pubkey &quot;/c/Users/klover/.ssh/id_rsa&quot;: invalid format</code><br>是因为公钥之前我换过名字，导致出现问题<br>执行修复公钥命令，解决问题<br><code>ssh-keygen -f ~/.ssh/id_rsa -y &gt; ~/.ssh/id_rsa.pub</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;拉取代码出现下面问题&lt;br&gt;&lt;code&gt;load pubkey &amp;quot;/c/Users/klover/.ssh/id_rsa&amp;quot;: invalid format&lt;/code&gt;&lt;br&gt;是因为公钥之前我换过名字，导致出现问题&lt;br&gt;执行修复公钥命令，解
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://blog.wjc66.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>封装elementui的table组件</title>
    <link href="https://blog.wjc66.cn/%E5%B0%81%E8%A3%85elementui%E7%9A%84table%E7%BB%84%E4%BB%B6/"/>
    <id>https://blog.wjc66.cn/%E5%B0%81%E8%A3%85elementui%E7%9A%84table%E7%BB%84%E4%BB%B6/</id>
    <published>2021-09-03T01:45:17.000Z</published>
    <updated>2021-09-23T07:24:47.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-vue"><a href="#table-vue" class="headerlink" title="table.vue"></a>table.vue</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table</span><br><span class="line">    v-bind=<span class="string">"$props"</span></span><br><span class="line">    border</span><br><span class="line">    :header-cell-style=<span class="string">"&#123; 'text-align': 'center' &#125;"</span></span><br><span class="line">    style=<span class="string">"width: 100%"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      label=<span class="string">"序号"</span></span><br><span class="line">      width=<span class="string">"50"</span></span><br><span class="line">      align=<span class="string">"center"</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot-scope=<span class="string">"scope"</span>&gt;</span><br><span class="line">        &#123;&#123; scope.$index + <span class="number">1</span> &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line">    &lt;template v-<span class="keyword">for</span>=<span class="string">"(col, key) in tableColumns"</span>&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        :key=<span class="string">"key"</span></span><br><span class="line">        v-bind=<span class="string">"col"</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>el-table&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import &#123; Vue, Component, Prop &#125; from 'vue-property-decorator'</span></span><br><span class="line"><span class="regexp">import &#123; Table &#125; from 'element-ui'</span></span><br><span class="line"><span class="regexp">export type Column = &#123;</span></span><br><span class="line"><span class="regexp">  label: string</span></span><br><span class="line"><span class="regexp">  prop?: string</span></span><br><span class="line"><span class="regexp">  width?: string</span></span><br><span class="line"><span class="regexp">  minWidth?: string</span></span><br><span class="line"><span class="regexp">  fixed?: string | boolean</span></span><br><span class="line"><span class="regexp">  align?: 'left' | 'center' | 'right'</span></span><br><span class="line"><span class="regexp">  formatter?: &#123; (row: any, col: any, value: any): unknown &#125;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ renderHeader的使用 https:/</span><span class="regexp">/www.cnblogs.com/yi</span>xiancheng/p/<span class="number">11525970.</span>html</span><br><span class="line">  renderHeader?: &#123; (h: <span class="built_in">any</span>, &#123; column, $index &#125;: <span class="built_in">any</span>): unknown &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    ...(Table <span class="keyword">as</span> <span class="built_in">any</span>).props,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Prop</span>(&#123; <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> ([]) &#125;) tableColumns!: Column</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">&lt;Table</span><br><span class="line">        v-loading=<span class="string">"loadings.fetch"</span></span><br><span class="line">        :data=<span class="string">"tableData"</span></span><br><span class="line">        :table-columns=<span class="string">"tableColumns"</span></span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  components: &#123; Pagination, Search, CreateCoupon, CreateAccountCoupon, Table &#125;,</span><br><span class="line">  name: <span class="string">'coupon'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  loadings = &#123; fetch: <span class="literal">false</span> &#125;</span><br><span class="line">  tableData: <span class="built_in">any</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// table 列</span></span><br><span class="line">  <span class="keyword">get</span> tableColumns(): Column[] &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'创建人'</span>,</span><br><span class="line">        prop: <span class="string">'userInfo.nickname'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'主体名称'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.$createElement(CopyAccountTableColumnNew, &#123;</span><br><span class="line">            props: &#123;</span><br><span class="line">              align: <span class="string">'center'</span>,</span><br><span class="line">              <span class="string">'name-key'</span>: row?.accountInfo?.verifiedName,</span><br><span class="line">              <span class="string">'id-key'</span>: row?.accountInfo?.id,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'来源'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.couponSourceEnumMap.get(row.source)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'类型'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.couponTypeEnumMap.get(row?.couponTemplate?.type)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'使用场景'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> row.couponTemplate.usage.map(<span class="function">(<span class="params">item: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">this</span>.couponUsageEnumMap.get(item)).join(<span class="string">'|'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'折扣'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.convert(row)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'状态'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.couponStatusMap.get(row.status)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'创建时间'</span>,</span><br><span class="line">        prop: <span class="string">'createTime'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">this</span>.timeFormatter(row, col, value),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'过期时间'</span>,</span><br><span class="line">        prop: <span class="string">'expiredAt'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">this</span>.timeFormatter(row, col, value),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'操作'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">this</span>.tableBtn(row, col, value),</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  timeFormatter(row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> moment(value).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 操作按钮</span></span><br><span class="line"><span class="comment">   * 文档 https://vuejs.org/v2/guide/render-function.html#createElement-Arguments</span></span><br><span class="line"><span class="comment">   * @param row</span></span><br><span class="line"><span class="comment">   * @param col</span></span><br><span class="line"><span class="comment">   * @param value</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  tableBtn(row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> h = <span class="keyword">this</span>.$createElement</span><br><span class="line">    <span class="keyword">return</span> h(</span><br><span class="line">      <span class="string">'el-button'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        style: &#123;</span><br><span class="line">          fontSize: <span class="string">'18px;'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        props: &#123;</span><br><span class="line">          size: <span class="string">'mini'</span>,</span><br><span class="line">          plain: <span class="literal">true</span>,</span><br><span class="line">          <span class="keyword">type</span>: <span class="string">'text'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        on: &#123;</span><br><span class="line">          click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">              name: <span class="string">'couponRecords'</span>,</span><br><span class="line">              params: &#123;</span><br><span class="line">                accountCouponId: row?.id,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      [<span class="string">'使用详情'</span>],</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-vue&quot;&gt;&lt;a href=&quot;#table-vue&quot; class=&quot;headerlink&quot; title=&quot;table.vue&quot;&gt;&lt;/a&gt;table.vue&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;el-table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v-bind=&lt;span class=&quot;string&quot;&gt;&quot;$props&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :header-cell-style=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123; &#39;text-align&#39;: &#39;center&#39; &amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    style=&lt;span class=&quot;string&quot;&gt;&quot;width: 100%&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;el-table-column&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      label=&lt;span class=&quot;string&quot;&gt;&quot;序号&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      width=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      align=&lt;span class=&quot;string&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;template slot-scope=&lt;span class=&quot;string&quot;&gt;&quot;scope&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&amp;#123; scope.$index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/template&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    &amp;lt;/&lt;/span&gt;el-table-column&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;template v-&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(col, key) in tableColumns&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;el-table-column&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :key=&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        v-bind=&lt;span class=&quot;string&quot;&gt;&quot;col&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/template&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;lt;/&lt;/span&gt;el-table&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/template&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;script lang=&quot;ts&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;import &amp;#123; Vue, Component, Prop &amp;#125; from &#39;vue-property-decorator&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;import &amp;#123; Table &amp;#125; from &#39;element-ui&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;export type Column = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  label: string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  prop?: string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  width?: string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  minWidth?: string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  fixed?: string | boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  align?: &#39;left&#39; | &#39;center&#39; | &#39;right&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  formatter?: &amp;#123; (row: any, col: any, value: any): unknown &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  /&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/ renderHeader的使用 https:/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/www.cnblogs.com/yi&lt;/span&gt;xiancheng/p/&lt;span class=&quot;number&quot;&gt;11525970.&lt;/span&gt;html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  renderHeader?: &amp;#123; (h: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;, &amp;#123; column, $index &amp;#125;: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;): unknown &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  props: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...(Table &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;).props,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; Vue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Prop&lt;/span&gt;(&amp;#123; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ([]) &amp;#125;) tableColumns!: Column&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="https://blog.wjc66.cn/tags/vue/"/>
    
      <category term="element" scheme="https://blog.wjc66.cn/tags/element/"/>
    
  </entry>
  
  <entry>
    <title>typescript泛型的使用</title>
    <link href="https://blog.wjc66.cn/typescript%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.wjc66.cn/typescript%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-08-06T10:07:58.000Z</published>
    <updated>2022-03-30T07:06:54.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="keyof-指的是把我们一个对象里面的-键值对里的键【key】-给罗列取出来，并把它们联合起来形成一种联合类型"><a href="#keyof-指的是把我们一个对象里面的-键值对里的键【key】-给罗列取出来，并把它们联合起来形成一种联合类型" class="headerlink" title="keyof 指的是把我们一个对象里面的 键值对里的键【key】 给罗列取出来，并把它们联合起来形成一种联合类型"></a>keyof 指的是把我们一个对象里面的 键值对里的键【key】 给罗列取出来，并把它们联合起来形成一种联合类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type QunYou = Person &amp; QunYouAttribute;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  QunYou = &#123;</span></span><br><span class="line"><span class="comment">    name: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">    isLsp: boolean;</span></span><br><span class="line"><span class="comment">    sex: '男' | '女' | 0 | 1;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">type QunYouKeys = keyof QunYou; <span class="comment">// "name" | "age" | "isLsp" | "sex"</span></span><br></pre></td></tr></table></figure><p><code>in</code> 又是什么</p><p>Partial<t> 里面的 P 充当了另一个泛型。</t></p><p>in 在这里充当一个遍历的作用</p><p>把 <code>keyof T</code> 进行一个个遍历并且每个都单独拿出来生成新的 “键值对”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部就会变成这样</span></span><br><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type newQunyou = Partial&lt;QunYou&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type Partial&lt;QunYou&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> <span class="string">'name'</span> | <span class="string">'age'</span> | <span class="string">'isLsp'</span> | <span class="string">'sex'</span>]?: QunYou[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type Partial = &#123;</span><br><span class="line">  name?: QunYou[<span class="string">"name"</span>];</span><br><span class="line">  age?: QunYou[<span class="string">"age"</span>];</span><br><span class="line">  isLsp?: QunYou[<span class="string">"isLsp"</span>];</span><br><span class="line">  sex?:QunYou[<span class="string">"sex"</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type Partial = &#123;</span><br><span class="line">  name?: string;</span><br><span class="line">  age?: number;</span><br><span class="line">  isLsp?: boolean;</span><br><span class="line">  sex?: <span class="string">'男'</span> | <span class="string">'女'</span> | <span class="number">0</span> | <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以这个 <code>Partial</code> 就达到我们的效果 【通过泛型让目标类型中的所有属性变为可选】</p><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过上面 <code>Partial</code> 讲解这个 <code>Pick</code> 相信大伙应该好理解很多了。</p><p>Pick 接收两个参数做泛型。</p><p>这里第二个泛型 K 后面跟着约束条件 K extends keyof T，</p><p>泛型 的 <code>extends</code>， 与后续 运算的 extends 需要稍微留心做个区分。 这次看 extends 在这里充当 类似于判断的 “约束” 角色</p><p>意思就是说 这个 K 必须 符合 keyof T 这个集合里面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">type QunYou = Person &amp; QunYouAttribute;</span><br><span class="line"></span><br><span class="line">type QunYouOnlyLsp = Pick&lt;QunYou, <span class="string">'name'</span> | <span class="string">'isLsp'</span>&gt;;</span><br><span class="line"><span class="comment">// 内部就会变成这样</span></span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type QunYouOnlyLsp = Pick&lt;QunYou, <span class="string">"name"</span> | <span class="string">"isLsp"</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line"><span class="comment">// "name" | "isLsp"  是否包含在 K的集合里面？ 是的，符合要求</span></span><br><span class="line">type Pick&lt;QunYou, <span class="string">"name"</span> | <span class="string">"isLsp"</span>&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> <span class="string">'name'</span> | <span class="string">'isLsp'</span>]: QunYou[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type Pick = &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  isLsp: boolean;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extract from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Extract&lt;T, U&gt; = T extends U ? T : never;</span><br><span class="line"></span><br><span class="line">就是在一个对象中取出你想要的几个值</span><br><span class="line">Extract&lt;QunYou, <span class="string">'name'</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Omit-和-Exclude"><a href="#Omit-和-Exclude" class="headerlink" title="Omit 和 Exclude"></a>Omit 和 Exclude</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Exclude&lt;T, U&gt; = T extends U ? never : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with the properties of T except for those in type K.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure><blockquote><p>这里是 运算的 extends 书接上面 的泛型 的 extends，在此处记得对比。</p></blockquote><p>同样扮演 “判断” 的角色， 但是 在所谓 “TS 中的三目运算符” 里面，</p><p>更像是一层 “过滤” 的作用。</p><p>我们依旧以上面的例子作为介绍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">type QunYou = Person &amp; QunYouAttribute;</span><br><span class="line"></span><br><span class="line">type QunDaLao = Omit&lt;QunYou, <span class="string">'name'</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type QunDaLao = Pick&lt;QunYou, Exclude&lt;keyof T, K&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要观察Exclude</span></span><br><span class="line">type ExcludeKeys = Exclude&lt;keyof QunYou, <span class="string">"name"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓    type Exclude&lt;T, U&gt; = T extends U ? never : T;</span></span><br><span class="line">type Exclude&lt;<span class="string">"name"</span> | <span class="string">"age"</span> | <span class="string">"isLsp"</span> | <span class="string">"sex"</span>, <span class="string">"name"</span>&gt;  =  T extends U ? never : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓ 继续观察， 它将这么去 “判断”</span></span><br><span class="line"><span class="comment">//  在  T extends U ? never : T; 里面</span></span><br><span class="line"><span class="comment">//  将 T 里面的联合类型逐个逐个 与 U 进行 约束判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  T 里面的 "name" 与 U 的 "name" (类型)符合吗？ 符合， 返回 never ，既 什么都没有。</span></span><br><span class="line"><span class="comment">//  T 里面的 "age" 与 U 的 "name" (类型)符合吗？ 不符合 返回 "age" 本身。</span></span><br><span class="line"><span class="comment">//  T 里面的 "isLsp" 与 U 的 "name" (类型)符合吗？ 不符合 返回 "isLsp" 本身。</span></span><br><span class="line"><span class="comment">//  T 里面的 "sex" 与 U 的 "name" (类型)符合吗？ 不符合 返回 "sex" 本身。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以 我们得到的结果就是 被 "过滤"后的 联合类型</span></span><br><span class="line">type ExcludeResult = <span class="string">"age"</span> | <span class="string">"isLsp"</span> | <span class="string">"sex"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么回过头继续看 Omit</span></span><br><span class="line">type QunDaLao = Pick&lt;QunYou, Exclude&lt;keyof T, K&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type QunDaLao = Pick&lt;QunYou, <span class="string">"age"</span> | <span class="string">"isLsp"</span> | <span class="string">"sex"</span>&gt;</span><br><span class="line"><span class="comment">//  嗯？是不是很熟悉了，跟上面一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以 Omit 他的结果就达到了剔除  "name"的效果</span></span><br><span class="line">type QunDaLao = &#123;</span><br><span class="line">  age: number;</span><br><span class="line">  isLsp: boolean;</span><br><span class="line">  sex: <span class="string">'男'</span> | <span class="string">'女'</span> | <span class="number">0</span> | <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后 再聊一个 infer 与 typeof 关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qunYous: QunHaiXing[] = [];</span><br><span class="line"></span><br><span class="line">type whatIsQunYou&lt;T&gt; = T extends <span class="built_in">Array</span>&lt;infer V&gt; ? V : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newQunYou: whatIsQunYou&lt;<span class="keyword">typeof</span> qunYous&gt; = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>infer 的意思是待推导一个泛型，</p><p>在这里形容更像是一个 “标记”，</p><p>我在这里先把 V 给标记了，等下你们给我推出这个 V 的类型然后让我用！</p><p>注意看 typeof 的位置，他处在泛型的位置，</p><p>这将意味着 “Ts 的 typeof” 和 “Js 和 typeof” 不是一个东西。</p><p>在普通写运行代码的地方 typeof 是真的会运行并返回出一个变量的类型字符串。</p><p>但是写在类型地方的 typeof 仅起到一个静态类型的作用（既不会真的返回一个字符串出来）</p><p>那他在这里的作用是什么</p><p>还是同一个思想，只不过他在这里 typeof 返回的是 TS 里的类型</p><p>即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qunYous: QunHaiXing[] = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newQunYou: whatIsQunYou&lt;<span class="keyword">typeof</span> qunYous&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line"><span class="keyword">const</span> newQunYou: whatIsQunYou&lt;<span class="built_in">Array</span>&lt;QunHaiXing&gt;&gt;;</span><br><span class="line"><span class="comment">// 或者是 whatIsQunYou&lt;QunHaiXing[]&gt;</span></span><br></pre></td></tr></table></figure><p>回过头继续看 whatIsQunYou 中 infer 的标记 是怎么标记法！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type whatIsQunYou&lt;T&gt; = T extends <span class="built_in">Array</span>&lt;infer V&gt; ? V : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newQunYou: whatIsQunYou&lt;<span class="built_in">Array</span>&lt;QunHaiXing&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type whatIsQunYou&lt; <span class="built_in">Array</span>&lt;QunHaiXing&gt; &gt; = <span class="built_in">Array</span>&lt;QunHaiXing&gt; extends <span class="built_in">Array</span>&lt;infer V&gt; ? V : never;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T 里面的 Array&lt;QunHaiXing&gt; 与 Array&lt;infer V&gt; 类型是否符合吗？ 符合， 符合返回 V</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 等等！ V 是什么！！！</span></span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line"><span class="comment">// 我们看看位置进行“对比”</span></span><br><span class="line"><span class="comment">// 我们用简单的语言进行概括。</span></span><br><span class="line"><span class="comment">// 把尖括号的位置 一样的！就赋值给 V！</span></span><br><span class="line"><span class="comment">// Array&lt;QunHaiXing&gt; 与 Array&lt;infer V&gt; 对比下</span></span><br><span class="line"><span class="comment">// 很明显 QunHaiXing 这个类型符合 V 的位置 所以把他赋值给V</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新来！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// T 里面的 Array&lt;QunHaiXing&gt; 与 Array&lt;infer V&gt; 类型是否符合吗？ 符合， 符合返回 QunHaiXing</span></span><br></pre></td></tr></table></figure><p>这就是 infer 具有推导作用的关键字。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p><a href="https://zhuanlan.zhihu.com/p/361968852" target="_blank" rel="external nofollow noopener noreferrer">文章来源</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冻结客户类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> BlockOrUnblockCustomerActionEnum &#123;</span><br><span class="line">  <span class="comment">/** 永久冻结 */</span></span><br><span class="line">  TEMPORARY_BLOCK = <span class="string">'TEMPORARY_BLOCK'</span>,</span><br><span class="line">  <span class="comment">/** 临时冻结 */</span></span><br><span class="line">  PERMANENT_BLOCK = <span class="string">'PERMANENT_BLOCK'</span>,</span><br><span class="line">  <span class="comment">/** 解冻 */</span></span><br><span class="line">  UNBLOCK = <span class="string">'UNBLOCK'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冻结客户理由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> BlockOrUnblockCustomerReasonEnum &#123;</span><br><span class="line">  CUSTOMER_REQUEST = <span class="string">'CUSTOMER_REQUEST'</span>,</span><br><span class="line">  CLIENT_REQUEST = <span class="string">'CLIENT_REQUEST'</span>,</span><br><span class="line">  DECEASED = <span class="string">'DECEASED'</span>,</span><br><span class="line">  ACCOUNT_CLOSURE = <span class="string">'ACCOUNT_CLOSURE'</span>,</span><br><span class="line">  SUSPICIOUS_ACTIVITY = <span class="string">'SUSPICIOUS_ACTIVITY'</span>,</span><br><span class="line">  FRAUDULENT_ACTIVITY = <span class="string">'FRAUDULENT_ACTIVITY'</span>,</span><br><span class="line">  POTENTIAL_SANCTION = <span class="string">'POTENTIAL_SANCTION'</span>,</span><br><span class="line">  SANCTIONED_CUSTOMER = <span class="string">'SANCTIONED_CUSTOMER'</span>,</span><br><span class="line">  BLACKLISTED_CUSTOMER = <span class="string">'BLACKLISTED_CUSTOMER'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> IBlockOrUnblockCustomerReason = &#123;</span><br><span class="line">  [BlockOrUnblockCustomerActionEnum.PERMANENT_BLOCK]: BlockOrUnblockCustomerReasonEnum;</span><br><span class="line">  [BlockOrUnblockCustomerActionEnum.TEMPORARY_BLOCK]: Extract&lt;</span><br><span class="line">    BlockOrUnblockCustomerReasonEnum,</span><br><span class="line">    | BlockOrUnblockCustomerReasonEnum.CUSTOMER_REQUEST</span><br><span class="line">    | BlockOrUnblockCustomerReasonEnum.CLIENT_REQUEST</span><br><span class="line">    | BlockOrUnblockCustomerReasonEnum.SUSPICIOUS_ACTIVITY</span><br><span class="line">    | BlockOrUnblockCustomerReasonEnum.POTENTIAL_SANCTION</span><br><span class="line">  &gt;;</span><br><span class="line">  [BlockOrUnblockCustomerActionEnum.UNBLOCK]: Extract&lt;</span><br><span class="line">    BlockOrUnblockCustomerReasonEnum,</span><br><span class="line">    BlockOrUnblockCustomerReasonEnum.CUSTOMER_REQUEST | BlockOrUnblockCustomerReasonEnum.CLIENT_REQUEST</span><br><span class="line">  &gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> BlockOrUnblockCustomerInput&lt;K <span class="keyword">extends</span> BlockOrUnblockCustomerActionEnum, T <span class="keyword">extends</span> IBlockOrUnblockCustomerReason&gt; = &#123;</span><br><span class="line">  <span class="comment">// 冻结类型</span></span><br><span class="line">  action: K;</span><br><span class="line">  <span class="comment">// 理由</span></span><br><span class="line">  reason: T[K];</span><br><span class="line">  <span class="comment">// 自定义</span></span><br><span class="line">  comment?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> blockOrUnblockCustomer&lt;K <span class="keyword">extends</span> BlockOrUnblockCustomerActionEnum, T <span class="keyword">extends</span> IBlockOrUnblockCustomerReason&gt;(</span><br><span class="line">    customerHashId: <span class="built_in">string</span>,</span><br><span class="line">    dataParams: BlockOrUnblockCustomerInput&lt;K, T&gt;,</span><br><span class="line">  ) &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Partial&quot;&gt;&lt;a href=&quot;#Partial&quot; class=&quot;headerlink&quot; title=&quot;Partial&quot;&gt;&lt;/a&gt;Partial&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
    
      <category term="typescript" scheme="https://blog.wjc66.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>nestjs单元测试</title>
    <link href="https://blog.wjc66.cn/nestjs%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.wjc66.cn/nestjs%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2021-07-12T15:02:38.000Z</published>
    <updated>2021-09-23T07:24:47.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><ol><li>You are trying to <code>import</code> a file after the Jest environment has been torn down.<br>或者 TypeError: Right-hand side of ‘instanceof’ is not an object</li></ol><p>在最外层加上 <code>jest.useFakeTimers();</code></p><ol start="2"><li>Timeout - Async callback was not invoked within the 5000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 5000 ms timeout specified by jest.setTimeout.Error:</li></ol><p>超时错误<br>在最外层加上 <code>jest.setTimeout(1000000);</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;出现的问题&quot;&gt;&lt;a href=&quot;#出现的问题&quot; class=&quot;headerlink&quot; title=&quot;出现的问题&quot;&gt;&lt;/a&gt;出现的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;You are trying to &lt;code&gt;import&lt;/code&gt; a file after t
      
    
    </summary>
    
    
    
      <category term="nestjs" scheme="https://blog.wjc66.cn/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>nodejs下载文件遇到内存超出导致pm2重启</title>
    <link href="https://blog.wjc66.cn/nodejs%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%81%87%E5%88%B0%E5%86%85%E5%AD%98%E8%B6%85%E5%87%BA%E5%AF%BC%E8%87%B4pm2%E9%87%8D%E5%90%AF/"/>
    <id>https://blog.wjc66.cn/nodejs%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%81%87%E5%88%B0%E5%86%85%E5%AD%98%E8%B6%85%E5%87%BA%E5%AF%BC%E8%87%B4pm2%E9%87%8D%E5%90%AF/</id>
    <published>2021-06-28T09:42:45.000Z</published>
    <updated>2022-03-30T07:06:54.327Z</updated>
    
    <content type="html"><![CDATA[<p>例子如下，由于 request 下载速度特别快，而自定义的处理方法更不上导致流一直写在内存中得不到释放，所以这里加上了 req.pause();和 req.resume();</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> req = request</span><br><span class="line">    .get(url)</span><br><span class="line">    .auth(worldCheck.userName, worldCheck.password, <span class="literal">false</span>)</span><br><span class="line">    .on(<span class="string">"response"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"开始"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"data"</span>, <span class="keyword">async</span> (chunk: any) =&gt; &#123;</span><br><span class="line">      <span class="comment">// _md5.update(chunk);</span></span><br><span class="line">      <span class="comment">// 暂停</span></span><br><span class="line">      req.pause();</span><br><span class="line">      <span class="keyword">let</span> data = chunk.toString();</span><br><span class="line">      <span class="keyword">if</span> (lastRow) &#123;</span><br><span class="line">        data = lastRow + data;</span><br><span class="line">        lastRow = <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> rows: any[] = [];</span><br><span class="line">      <span class="comment">// 数据正好完整</span></span><br><span class="line">      <span class="keyword">if</span> (data.slice(data.length - <span class="number">2</span>) === <span class="string">"\r\n"</span>) &#123;</span><br><span class="line">        rows = data.split(<span class="regexp">/[\r\n]/</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rows = data.split(<span class="regexp">/[\r\n]/</span>);</span><br><span class="line">        lastRow = rows.pop();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理数据</span></span><br><span class="line">      <span class="keyword">if</span> (type === DownloadFileEnum.Wc1) &#123;</span><br><span class="line">        <span class="keyword">await</span> $<span class="keyword">this</span>.dealRows(rows);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === DownloadFileEnum.Wc1Names) &#123;</span><br><span class="line">        <span class="keyword">await</span> $<span class="keyword">this</span>.dealNamesRows(rows);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 恢复</span></span><br><span class="line">      req.resume();</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"error"</span>, (err: any) =&gt; &#123;</span><br><span class="line">      Logger4.error(err);</span><br><span class="line">      reject(<span class="literal">false</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"end"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// console.log('结束');</span></span><br><span class="line">      <span class="comment">// const newSign = _md5.digest('hex');</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// if (newSign === sign) &#123;</span></span><br><span class="line">      <span class="comment">// 数据正确 保存到数据库</span></span><br><span class="line">      <span class="comment">// 保存最后一行数据</span></span><br><span class="line">      <span class="keyword">if</span> (lastRow) &#123;</span><br><span class="line">        <span class="keyword">const</span> rows = [lastRow];</span><br><span class="line">        <span class="keyword">if</span> (type === DownloadFileEnum.Wc1) &#123;</span><br><span class="line">          <span class="keyword">await</span> $<span class="keyword">this</span>.dealRows(rows);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === DownloadFileEnum.Wc1Names) &#123;</span><br><span class="line">          <span class="keyword">await</span> $<span class="keyword">this</span>.dealNamesRows(rows);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      reslove(<span class="literal">true</span>);</span><br><span class="line">      <span class="comment">// &#125; else &#123;</span></span><br><span class="line">      <span class="comment">//   reject(false);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"close"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"关闭"</span>);</span><br><span class="line">      req.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;例子如下，由于 request 下载速度特别快，而自定义的处理方法更不上导致流一直写在内存中得不到释放，所以这里加上了 req.pause();和 req.resume();&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nodejs" scheme="https://blog.wjc66.cn/tags/nodejs/"/>
    
      <category term="request" scheme="https://blog.wjc66.cn/tags/request/"/>
    
  </entry>
  
  <entry>
    <title>linux系统中限制了用户可以watch文件变更的最大数</title>
    <link href="https://blog.wjc66.cn/linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%99%90%E5%88%B6%E4%BA%86%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5watch%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <id>https://blog.wjc66.cn/linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%99%90%E5%88%B6%E4%BA%86%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5watch%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/</id>
    <published>2021-06-22T02:32:18.000Z</published>
    <updated>2021-09-23T07:24:47.889Z</updated>
    
    <content type="html"><![CDATA[<p>启动或者编译报<br>System limit for number of file watchers reached</p><p>原因：<br>linux 系统中限制了用户可以 watch 文件变更的最大数，因此需要通过 sysctl.conf 进行更改数值</p><p>临时限额增加可以设置新的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl fs.inotify.max_user_watches = 524288</span><br><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></table></figure><p>永久增加限额</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf</span><br><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;启动或者编译报&lt;br&gt;System limit for number of file watchers reached&lt;/p&gt;
&lt;p&gt;原因：&lt;br&gt;linux 系统中限制了用户可以 watch 文件变更的最大数，因此需要通过 sysctl.conf 进行更改数值&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://blog.wjc66.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下安装elasticsearch</title>
    <link href="https://blog.wjc66.cn/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85elasticsearch/"/>
    <id>https://blog.wjc66.cn/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85elasticsearch/</id>
    <published>2021-06-21T12:32:57.000Z</published>
    <updated>2021-09-23T07:24:47.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>1.ElasticSearch 下载地址：</p><p><code>https://www.elastic.co/downloads/elasticsearch</code>（最新 es）</p><p>如果你想要下载其他版本请访问<code>https://www.elastic.co/cn/downloads/past-releases#elasticsearch</code></p><p>我这里选择的是 7.12.0<br>进入/home 文件夹下（最好不要放在 root 下，会报错）<br>下载命令<br><code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.12.0-linux-x86_64.tar.gz</code></p><a id="more"></a><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><code>tar -xzvf elasticsearch-7.12.0-linux-x86_64.tar.gz</code></p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>adduser elasticsearch（回车 按照提示输入两次密码，其他的直接回车）</p><h2 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h2><p>chown -R elasticsearch elasticsearch-7.12.0<br>可以使用（ll 命令查看）</p><h2 id="进入新用户"><a href="#进入新用户" class="headerlink" title="进入新用户"></a>进入新用户</h2><p>su elasticsearch</p><h2 id="配置-elasticsearch-自带-jdk"><a href="#配置-elasticsearch-自带-jdk" class="headerlink" title="配置 elasticsearch 自带 jdk"></a>配置 elasticsearch 自带 jdk</h2><p>修改 bin 下 elasticsearch-env 文件<br><code>vim elasticsearch-env</code><br><img src="https://img-blog.csdnimg.cn/20210621204459266.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> [ ! -z <span class="string">"<span class="variable">$JAVA_HOME</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># fallback to JAVA_HOME</span></span><br><span class="line">  <span class="comment"># 取消警告</span></span><br><span class="line">  <span class="comment"># echo "warning: usage of JAVA_HOME is deprecated, use ES_JAVA_HOME" &gt;&amp;2</span></span><br><span class="line">  JAVA=<span class="string">"/home/elasticsearch/elasticsearch-7.12.0/jdk/bin/java"</span></span><br><span class="line">  JAVA_TYPE=<span class="string">"JAVA_HOME"</span></span><br></pre></td></tr></table></figure><p>保存就好</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在 bin 下<br><code>./elasticsearch</code> 或者<br>后台启动 <code>./elasticsearch -d</code></p><p>检测是否正常启动<br>lsof -i:9200<br>curl 127.0.0.1:9200</p><h2 id="其他配置（可以不用配置）"><a href="#其他配置（可以不用配置）" class="headerlink" title="其他配置（可以不用配置）"></a>其他配置（可以不用配置）</h2><p>配置让外网访问<br>vim config/elasticsearch.yml<br><code>network.host: 0.0.0.0</code></p><h2 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h2><ol><li><p>could not find java in JAVA_HOME at ￥ ELASTIC_HOME/jdk//bin/java<br>这是 jdk 版本问题</p></li><li><p>Error: Could not find or load main class org.elasticsearch.tools.java_version_checker.JavaVersionCh</p></li></ol><p>把 elasticsearch 目录换到不属于 root 目录的其他目录就行了</p><p>3.</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210621203731298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不能使用 root 用户启动</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;1.ElasticSearch 下载地址：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://www.elastic.co/downloads/elasticsearch&lt;/code&gt;（最新 es）&lt;/p&gt;
&lt;p&gt;如果你想要下载其他版本请访问&lt;code&gt;https://www.elastic.co/cn/downloads/past-releases#elasticsearch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我这里选择的是 7.12.0&lt;br&gt;进入/home 文件夹下（最好不要放在 root 下，会报错）&lt;br&gt;下载命令&lt;br&gt;&lt;code&gt;wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.12.0-linux-x86_64.tar.gz&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Elasticsearch" scheme="https://blog.wjc66.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>windows10环境下安装elasticsearch</title>
    <link href="https://blog.wjc66.cn/windows10%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85elasticsearch/"/>
    <id>https://blog.wjc66.cn/windows10%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85elasticsearch/</id>
    <published>2021-06-19T12:32:16.000Z</published>
    <updated>2021-09-23T07:24:47.890Z</updated>
    
    <content type="html"><![CDATA[<p>注意 现在安装 Elasticsearch 可以不需要去安装 jdk 有自带</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>1.ElasticSearch 下载地址：</p><p><code>https://www.elastic.co/downloads/elasticsearch</code>（最新 es）</p><p>如果你想要下载其他版本请访问<code>https://www.elastic.co/cn/downloads/past-releases#elasticsearch</code></p><a id="more"></a><p>2.下载安装包后解压<br><img src="https://img-blog.csdnimg.cn/20210619201301236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>进入 bin 目录下,双击执行 elasticsearch.bat<br><code>注意</code>:在启动前需要配置 jdk 环境，如果你本地已经配置了 jdk 就需要注意 jdk 版本问题，由于 es 现在都自带 jdk,所以使用 vscode 或者其他工具编辑<code>elasticsearch-certgen.bat</code><br>加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rem 配置自己的jdk</span><br><span class="line"><span class="keyword">set</span> JAVA_HOME=D:/downloads/elasticsearch-7.12.0-windows-x86_64/elasticsearch-7.12.0/jdk</span><br></pre></td></tr></table></figure><p><code>注意上面的路径是你es解压后的路径</code></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>双击启动 或者打开命令进入 bin 文件夹 写入 <code>.\elasticsearch</code> 回车执行，如下就是执行成功<br><img src="https://img-blog.csdnimg.cn/20210619201819898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><img src="https://img-blog.csdnimg.cn/20210619202035515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="ElasticSearch-安装为-Windows-服务"><a href="#ElasticSearch-安装为-Windows-服务" class="headerlink" title="ElasticSearch 安装为 Windows 服务"></a>ElasticSearch 安装为 Windows 服务</h2><p>由于每次都要这样启动太麻烦了，es 还提供了加入 Windows 服务的命令</p><p>elasticsearch 的 bin 目录下有一个 elasticsearch-service.bat<br><img src="https://img-blog.csdnimg.cn/20210619202930826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一个命令是安装服务，第二个命令是启动，这样就不用一直开着命令窗口了</p><p>其他命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-service.bat后面还可以执行这些命令</span><br><span class="line">install: 安装Elasticsearch服务</span><br><span class="line">remove: 删除已安装的Elasticsearch服务（如果启动则停止服务）</span><br><span class="line">start: 启动Elasticsearch服务（如果已安装）</span><br><span class="line">stop: 停止服务（如果启动）</span><br><span class="line">manager:启动GUI来管理已安装的服务</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注意 现在安装 Elasticsearch 可以不需要去安装 jdk 有自带&lt;/p&gt;
&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;1.ElasticSearch 下载地址：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://www.elastic.co/downloads/elasticsearch&lt;/code&gt;（最新 es）&lt;/p&gt;
&lt;p&gt;如果你想要下载其他版本请访问&lt;code&gt;https://www.elastic.co/cn/downloads/past-releases#elasticsearch&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Elasticsearch" scheme="https://blog.wjc66.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>使用nest遇到的问题</title>
    <link href="https://blog.wjc66.cn/%E4%BD%BF%E7%94%A8nest%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.wjc66.cn/%E4%BD%BF%E7%94%A8nest%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-06-11T07:28:25.000Z</published>
    <updated>2021-09-23T07:24:47.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h2><p>访问接口报下面警告<br>No metadata found. There is more than once class-validator version installed probably. You need to flatten your dependencies<br>原因 是类验证版本有问题<br>处理 <code>npm install --save class-validator</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题-1&quot;&gt;&lt;a href=&quot;#问题-1&quot; class=&quot;headerlink&quot; title=&quot;问题 1&quot;&gt;&lt;/a&gt;问题 1&lt;/h2&gt;&lt;p&gt;访问接口报下面警告&lt;br&gt;No metadata found. There is more than once class-
      
    
    </summary>
    
    
    
      <category term="nestjs" scheme="https://blog.wjc66.cn/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>vue-socket.io的使用</title>
    <link href="https://blog.wjc66.cn/vue-socket-io%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.wjc66.cn/vue-socket-io%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-04-22T01:58:35.000Z</published>
    <updated>2021-09-23T07:24:47.889Z</updated>
    
    <content type="html"><![CDATA[<p>ts + vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module, VuexModule, Mutation, Action, getModule &#125; <span class="keyword">from</span> <span class="string">'vuex-module-decorators'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'@/main'</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'@/store/modules/user'</span></span><br><span class="line"></span><br><span class="line">@Module(&#123; <span class="attr">dynamic</span>: <span class="literal">true</span>, store, <span class="attr">name</span>: <span class="string">'WebSocket'</span> &#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSocket</span> <span class="keyword">extends</span> <span class="title">VuexModule</span> </span>&#123;</span><br><span class="line">  connect_status: <span class="built_in">Boolean</span> = <span class="literal">false</span> <span class="comment">// 连接状态</span></span><br><span class="line">  message: any <span class="comment">// 全局消息</span></span><br><span class="line">  env = process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_CONNECT() &#123;</span><br><span class="line">    <span class="keyword">this</span>.connect_status = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.env) <span class="built_in">console</span>.log(<span class="string">'socket连接成功==========&gt;'</span>, <span class="keyword">this</span>.connect_status)</span><br><span class="line">  &#125;</span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_CONNECT_ERROR() &#123;</span><br><span class="line">    <span class="keyword">this</span>.connect_status = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.env) <span class="built_in">console</span>.log(<span class="string">'socket连接失败==========&gt;'</span>, <span class="keyword">this</span>.connect_status)</span><br><span class="line">  &#125;</span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_DISCONNECT() &#123;</span><br><span class="line">    <span class="keyword">this</span>.connect_status = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.env) <span class="built_in">console</span>.log(<span class="string">'socket连接断开==========&gt;'</span>, <span class="keyword">this</span>.connect_status)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_NOTIFICATION(message: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = message</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_JOINACCOUNTROOM(data: any) &#123;</span><br><span class="line">    App.$socket.emit(<span class="string">'joinAccountRoom'</span>, &#123;</span><br><span class="line">      accountId: data.accountId,</span><br><span class="line">      userId: data.userId,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Action</span><br><span class="line">  socket_connect() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_CONNECT'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  @Action</span><br><span class="line">  socket_disconnet() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_DISCONNECT'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  @Action</span><br><span class="line">  socket_reconnect() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'重连成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器重启 重新加入私有房间</span></span><br><span class="line">    <span class="keyword">const</span> accountId = UserModule.accountId</span><br><span class="line">    <span class="keyword">const</span> userId = UserModule.userId</span><br><span class="line">    <span class="built_in">console</span>.log(accountId, userId)</span><br><span class="line">    <span class="keyword">if</span> (accountId &amp;&amp; userId)</span><br><span class="line">      <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_JOINACCOUNTROOM'</span>, &#123;</span><br><span class="line">        accountId,</span><br><span class="line">        userId,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  @Action</span><br><span class="line">  socket_connect_error() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_CONNECT_ERROR'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Action <span class="comment">// notification 与后端 通知的方法名称一致</span></span><br><span class="line">  socket_notification(message: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_NOTIFICATION'</span>, message)</span><br><span class="line">  &#125;</span><br><span class="line">  @Action <span class="comment">// 加入私有房间</span></span><br><span class="line">  socket_joinAccountRoom(data: any) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.connect_status) <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_JOINACCOUNTROOM'</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> WebSocketModule = getModule(WebSocket)</span><br></pre></td></tr></table></figure><p>在 main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(</span><br><span class="line">  <span class="keyword">new</span> VueSocketIO(&#123;</span><br><span class="line">    debug: process.env.NODE_ENV === <span class="string">"development"</span>,</span><br><span class="line">    connection: process.env.VUE_APP_SOCKET_UEL || <span class="string">""</span>,</span><br><span class="line">    vuex: &#123;</span><br><span class="line">      store,</span><br><span class="line">      actionPrefix: <span class="string">"socket_"</span>,</span><br><span class="line">      mutationPrefix: <span class="string">"SOCKET_"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 app.vue 导入 就可以用了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"@/store/modules/websocket"</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ts + vue&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://blog.wjc66.cn/tags/vue/"/>
    
      <category term="socket" scheme="https://blog.wjc66.cn/tags/socket/"/>
    
  </entry>
  
</feed>
