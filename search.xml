<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>amazon中kms的使用</title>
      <link href="amazon%E4%B8%ADkms%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>amazon%E4%B8%ADkms%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.16.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String encryptedMessage = Kms.encrypt(<span class="string">"test message"</span>);</span><br><span class="line">System.out.println(encryptedMessage);</span><br><span class="line">String decrypt = Kms.decrypt(encryptedMessage);</span><br><span class="line">System.out.println(decrypt);</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klover.kms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.AwsBasicCredentials;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.core.SdkBytes;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.regions.Region;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.kms.KmsClient;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.kms.model.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kms</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/src/main/java/com/example/kms/EncryptDataKey.java"&gt;docs&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> klover</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/28 19:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kms</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> KmsClient kmsClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKeyId = <span class="string">"&lt;your access key id&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String secretAccessKey = <span class="string">"&lt;your secret access key&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String keyId = <span class="string">"&lt;your key id&gt;"</span>; <span class="comment">// 密钥keyId</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        AwsBasicCredentials credentials = AwsBasicCredentials.create(</span><br><span class="line">                accessKeyId,</span><br><span class="line">                secretAccessKey</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        kmsClient = KmsClient.builder()</span><br><span class="line">                .region(Region.US_WEST_1)</span><br><span class="line">                .credentialsProvider(() -&gt; credentials)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> base64 加密好的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EncryptRequest encryptRequest = EncryptRequest.builder()</span><br><span class="line">                    .keyId(keyId)</span><br><span class="line">                    .plaintext(SdkBytes.fromByteArray(message.getBytes()))</span><br><span class="line">                    .encryptionAlgorithm(EncryptionAlgorithmSpec.RSAES_OAEP_SHA_256)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            EncryptResponse response = kmsClient.encrypt(encryptRequest);</span><br><span class="line">            String algorithm = response.encryptionAlgorithm().toString();</span><br><span class="line">            System.out.println(<span class="string">"The encryption algorithm is "</span> + algorithm);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get the encrypted data.</span></span><br><span class="line">            SdkBytes ciphertext = response.ciphertextBlob();</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(ciphertext.asByteArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KmsException e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String encryptedMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先base64解密</span></span><br><span class="line">            <span class="keyword">byte</span>[] decode = Base64.getDecoder().decode(encryptedMessage);</span><br><span class="line"></span><br><span class="line">            DecryptRequest decryptRequest = DecryptRequest.builder()</span><br><span class="line">                    .ciphertextBlob(SdkBytes.fromByteArray(decode))</span><br><span class="line">                    .keyId(keyId)</span><br><span class="line">                    .encryptionAlgorithm(EncryptionAlgorithmSpec.RSAES_OAEP_SHA_256)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            DecryptResponse decryptResponse = kmsClient.decrypt(decryptRequest);</span><br><span class="line">            SdkBytes plaintext = decryptResponse.plaintext();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> plaintext.asUtf8String();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (KmsException e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> amazon </tag>
            
            <tag> kms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传文件到amazon中的S3</title>
      <link href="%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0amazon%E4%B8%AD%E7%9A%84S3/"/>
      <url>%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0amazon%E4%B8%AD%E7%9A%84S3/</url>
      
        <content type="html"><![CDATA[<h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>s3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.16.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String fileUrl = S3.putFile(<span class="string">"4.png"</span>, <span class="keyword">new</span> File(<span class="string">"C:\\Users\\klover\\Desktop\\file\\4.png"</span>));</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klover.s3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.AwsBasicCredentials;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.core.sync.RequestBody;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.regions.Region;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.S3Client;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.model.GetObjectRequest;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.presigner.S3Presigner;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * S3</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> klover</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/27 20:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">S3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> S3Client s3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String bucketName = <span class="string">"klover-test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKeyId = <span class="string">"&lt;your access key id&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String secretAccessKey = <span class="string">"&lt;your secret access key&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> S3Presigner preSigner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        AwsBasicCredentials credentials = AwsBasicCredentials.create(</span><br><span class="line">                accessKeyId,</span><br><span class="line">                secretAccessKey</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        s3 = S3Client.builder()</span><br><span class="line">                .region(Region.of(<span class="string">"us-west-1"</span>))</span><br><span class="line">                .credentialsProvider(() -&gt; credentials)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        preSigner = S3Presigner.builder().region(Region.of(<span class="string">"us-west-1"</span>))</span><br><span class="line">                .credentialsProvider(() -&gt; credentials)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">putFile</span><span class="params">(String fileName, File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putObject(fileName, RequestBody.fromFile(file));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">putFile</span><span class="params">(String fileName, InputStream stream)</span> </span>&#123;</span><br><span class="line">        RequestBody requestBody = RequestBody.fromContentProvider(() -&gt; stream, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">        <span class="keyword">return</span> putObject(fileName, requestBody);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * &lt;a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/userguide/example_s3_Scenario_PresignedUrl_section.html"&gt;生成预签名文档&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body     参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">putObject</span><span class="params">(String fileName, RequestBody body)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; metadata = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        metadata.put(<span class="string">"author"</span>, <span class="string">"Klover"</span>);</span><br><span class="line">        metadata.put(<span class="string">"version"</span>, <span class="string">"1.0.0"</span>);</span><br><span class="line"></span><br><span class="line">        PutObjectRequest putOb = PutObjectRequest.builder()</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .key(fileName)</span><br><span class="line">                .metadata(metadata)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        s3.putObject(putOb, body);</span><br><span class="line"></span><br><span class="line">        GetObjectRequest objectRequest = GetObjectRequest.builder()</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .key(fileName)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        GetObjectPresignRequest preSignRequest = GetObjectPresignRequest.builder()</span><br><span class="line">                .signatureDuration(Duration.ofMinutes(<span class="number">10</span>))  <span class="comment">// The URL will expire in 10 minutes.</span></span><br><span class="line">                .getObjectRequest(objectRequest)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        PresignedGetObjectRequest preSignedRequest = preSigner.presignGetObject(preSignRequest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> preSignedRequest.url().toExternalForm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getObject</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        GetObjectRequest getObjectRequest = GetObjectRequest.builder().bucket(bucketName)</span><br><span class="line">                .key(fileName).build();</span><br><span class="line">        <span class="keyword">return</span> s3.getObject(getObjectRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/klover2/java-demo/blob/master/aws-demo/s3-demo/src/test/java/com/klover/s3/S3Test.java" target="_blank" rel="external nofollow noopener noreferrer">代码示例</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> amazon </tag>
            
            <tag> S3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次springboot3中swagger服务启动失败</title>
      <link href="%E8%AE%B0%E4%B8%80%E6%AC%A1springboot3%E4%B8%ADswagger%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
      <url>%E8%AE%B0%E4%B8%80%E6%AC%A1springboot3%E4%B8%ADswagger%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>项目开始进行升级，jDk 使用 21，springboot 使用 3 导致引入的 swagger jar 包无效，后来发现，springboot3 已经替换了支持的 jar 包。</p><p>把老 jar 包</p><p><code>&lt;dependency&gt;&lt;groupId&gt;org.springdoc&lt;/groupId&gt;&lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;&lt;version&gt;1.6.14&lt;/version&gt;&lt;/dependency&gt;</code></p><p>替换成</p><p><code>&lt;dependency&gt;&lt;groupId&gt;org.springdoc&lt;/groupId&gt; &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&lt;version&gt;2.3.0&lt;/version&gt;&lt;/dependency&gt;</code></p><h2 id="在-application-yml-配置"><a href="#在-application-yml-配置" class="headerlink" title="在 application.yml 配置"></a>在 application.yml 配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">springdoc:</span><br><span class="line">  swagger-ui:</span><br><span class="line">    enabled: <span class="keyword">true</span></span><br><span class="line">  api-docs:</span><br><span class="line">    groups:</span><br><span class="line">      enabled: <span class="keyword">true</span></span><br><span class="line">  group-configs:</span><br><span class="line">    - group: admin</span><br><span class="line">      display-name: 管理后台</span><br><span class="line">      paths-to-match: /admin<span class="comment">/**</span></span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://springdoc.org/#getting-started" target="_blank" rel="external nofollow noopener noreferrer">springdoc-openapi-starter-webmvc-ui</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql异步创建索引或者删除索引</title>
      <link href="postgresql%E5%BC%82%E6%AD%A5%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E6%88%96%E8%80%85%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95/"/>
      <url>postgresql%E5%BC%82%E6%AD%A5%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E6%88%96%E8%80%85%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>在 PostgreSQL 中，可以通过使用 CREATE INDEX 命令来异步创建索引。PostgreSQL 会将创建索引的任务放入后台进程进行处理，不会阻塞当前的数据库操作。</p><p>要创建一个异步索引，可以使用 CONCURRENTLY 关键字。这允许你在不锁定表的情况下创建索引，这在创建大型索引时特别有用，因为它可以减少对正常数据库操作的影响。</p><p>以下是一个创建异步索引的示例代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> CONCURRENTLY index_name <span class="keyword">ON</span> table_name (column_name);</span><br></pre></td></tr></table></figure><ol><li><p>删除索引 DROP INDEX CONCURRENTLY “public”.”IDX_e29aa01138f7e5dbe59261e52c”;</p></li><li><p>创建索引</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span>  CONCURRENTLY <span class="string">"IDX_25db9e4a7d54a460f256c567b2"</span> <span class="keyword">ON</span> <span class="string">"public"</span>.<span class="string">"attachment"</span> <span class="keyword">USING</span> btree (</span><br><span class="line">  <span class="string">"mediaId"</span> <span class="keyword">COLLATE</span> <span class="string">"pg_catalog"</span>.<span class="string">"default"</span> <span class="string">"pg_catalog"</span>.<span class="string">"text_ops"</span> <span class="keyword">ASC</span> <span class="keyword">NULLS</span> <span class="keyword">LAST</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java序列化进行参数脱敏</title>
      <link href="java%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E8%84%B1%E6%95%8F/"/>
      <url>java%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E8%84%B1%E6%95%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="JsonSerializer"><a href="#JsonSerializer" class="headerlink" title="JsonSerializer"></a>JsonSerializer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardNumberSerialize</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(String s, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        jsonGenerator.writeString(Objects.equals(s, <span class="string">""</span>) ? s : s.replaceAll(<span class="string">"(\\d&#123;6&#125;)\\d&#123;6&#125;(\\d&#123;4&#125;)"</span>, <span class="string">"$1******$2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">"张三"</span>);</span><br><span class="line">        student.setCardNumber(<span class="string">"1111111111111111"</span>);</span><br><span class="line">        student.setAddress(<span class="string">"beijing"</span>);</span><br><span class="line">        System.out.println(JsonUtil.toJSONString(student));</span><br><span class="line">        <span class="comment">// ======&gt; &#123;"name":"张三","cardNumber":"111111******1111","address":"***"&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@JsonSerialize</span>(using = CardNumberSerialize<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">        <span class="title">private</span> <span class="title">String</span> <span class="title">cardNumber</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@JsonSerialize</span>(using = CompleteDesensitizationSerialize<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">        <span class="title">private</span> <span class="title">String</span> <span class="title">address</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/klover2/java-demo/blob/master/serialize-demo/src/main/java/com/klover/serialize/Demo.java" target="_blank" rel="external nofollow noopener noreferrer">代码示例</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传日志到aws日志服务</title>
      <link href="%E4%B8%8A%E4%BC%A0%E6%97%A5%E5%BF%97%E5%88%B0aws%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/"/>
      <url>%E4%B8%8A%E4%BC%A0%E6%97%A5%E5%BF%97%E5%88%B0aws%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudwatchlogs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.16.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"key1"</span>, <span class="string">"val1"</span>);</span><br><span class="line">map.put(<span class="string">"key2"</span>, <span class="string">"val2"</span>);</span><br><span class="line">CloudWatchLog.putLog(map);</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudWatchLog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKey = <span class="string">"&lt;your key&gt;"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String secretKey = <span class="string">"&lt;your secret&gt;"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String region = <span class="string">"us-west-1"</span>;</span><br><span class="line">    <span class="comment">// 日志组的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String groupName = <span class="string">"klover-test"</span>;</span><br><span class="line">    <span class="comment">// 日志流的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String streamName = <span class="string">"klover"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CloudWatchLogsClient slsClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        AwsBasicCredentials credentials = AwsBasicCredentials.create(</span><br><span class="line">                accessKey,</span><br><span class="line">                secretKey</span><br><span class="line">        );</span><br><span class="line">        slsClient = CloudWatchLogsClient.builder()</span><br><span class="line">                .region(Region.of(region))</span><br><span class="line">                .credentialsProvider(() -&gt; credentials)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传日志</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putLog</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        DescribeLogStreamsRequest logStreamRequest = DescribeLogStreamsRequest.builder()</span><br><span class="line">                .logGroupName(groupName)</span><br><span class="line">                .logStreamNamePrefix(streamName)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        DescribeLogStreamsResponse describeLogStreamsResponse = slsClient.describeLogStreams(logStreamRequest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assume that a single stream is returned since a specific stream name was</span></span><br><span class="line">        <span class="comment">// specified in the previous request.</span></span><br><span class="line">        String sequenceToken = describeLogStreamsResponse.logStreams().getFirst().uploadSequenceToken();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Build an input log message to put to CloudWatch.</span></span><br><span class="line">        InputLogEvent inputLogEvent = InputLogEvent.builder()</span><br><span class="line">                .message(JsonUtil.toJSONString(params))</span><br><span class="line">                .timestamp(System.currentTimeMillis())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Specify the request parameters.</span></span><br><span class="line">        <span class="comment">// Sequence token is required so that the log can be written to the</span></span><br><span class="line">        <span class="comment">// latest location in the stream.</span></span><br><span class="line">        PutLogEventsRequest putLogEventsRequest = PutLogEventsRequest.builder()</span><br><span class="line">                .logEvents(Collections.singletonList(inputLogEvent))</span><br><span class="line">                .logGroupName(groupName)</span><br><span class="line">                .logStreamName(streamName)</span><br><span class="line">                .sequenceToken(sequenceToken)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        slsClient.putLogEvents(putLogEventsRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/klover2/java-demo/blob/master/aws-demo/cloud-watch-log-demo/src/test/java/com/klover/cloudwatchlog/CloudWatchLogTest.java" target="_blank" rel="external nofollow noopener noreferrer">代码示例</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> amazon </tag>
            
            <tag> CloudWatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json序列化和反序列化</title>
      <link href="json%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>json%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setName(<span class="string">"张三"</span>);</span><br><span class="line">student.setAge(<span class="number">10</span>);</span><br><span class="line">String jsonString = JsonUtil.toJSONString(student);</span><br><span class="line">System.out.println(jsonString);</span><br></pre></td></tr></table></figure><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"&#123;\"name\":\"张三\",\"age\":10&#125;"</span>;</span><br><span class="line">      <span class="comment">// 第一种</span></span><br><span class="line">      Student parse = JsonUtil.parse(s, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      System.out.println(parse);</span><br><span class="line">      <span class="comment">// 第二种</span></span><br><span class="line">      Student parse1 = JsonUtil.parse(s, <span class="keyword">new</span> TypeReference&lt;Student&gt;() &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">      System.out.println(parse1);</span><br><span class="line">      <span class="comment">// 第三种</span></span><br><span class="line">      JavaType javaType = JsonUtil.getCollectionType(Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      Object parse2 = JsonUtil.parse(s, javaType);</span><br><span class="line">      System.out.println(parse2);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/klover2/java-demo/blob/master/json-demo/src/test/java/com/klover/jackson/JsonUtilTest.java" target="_blank" rel="external nofollow noopener noreferrer">代码示例</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml转json</title>
      <link href="xml%E8%BD%ACjson/"/>
      <url>xml%E8%BD%ACjson/</url>
      
        <content type="html"><![CDATA[<h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JacksonXmlRootElement</span>(localName = <span class="string">"room"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 房间名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 房间号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"no"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer no;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 其他信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"info"</span>)</span><br><span class="line">    <span class="keyword">private</span> Info info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JacksonXmlElementWrapper</span>(localName = <span class="string">"students"</span>)</span><br><span class="line">    <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"student"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 老师</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JacksonXmlElementWrapper</span>(useWrapping = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"teacher"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Teacher&gt; teachers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"name"</span>)</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"age"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"name"</span>)</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"age"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"address"</span>)</span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 人数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@JacksonXmlProperty</span>(localName = <span class="string">"number"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toStringXml"><a href="#toStringXml" class="headerlink" title="toStringXml"></a>toStringXml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Room room = <span class="keyword">new</span> Room();</span><br><span class="line">        room.setNo(<span class="number">1</span>);</span><br><span class="line">        room.setName(<span class="string">"天水一班"</span>);</span><br><span class="line">        Room.Info info = <span class="keyword">new</span> Room.Info();</span><br><span class="line">        info.setAddress(<span class="string">"天水"</span>);</span><br><span class="line">        info.setNumber(<span class="number">5</span>);</span><br><span class="line">        room.setInfo(info);</span><br><span class="line">        ArrayList&lt;Room.Teacher&gt; teachers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Room.Teacher teacher = <span class="keyword">new</span> Room.Teacher();</span><br><span class="line">        teacher.setAge(<span class="number">40</span>);</span><br><span class="line">        teacher.setName(<span class="string">"王老师"</span>);</span><br><span class="line">        teachers.add(teacher);</span><br><span class="line">        Room.Teacher teacher2 = <span class="keyword">new</span> Room.Teacher();</span><br><span class="line">        teacher2.setAge(<span class="number">45</span>);</span><br><span class="line">        teacher2.setName(<span class="string">"曾老师"</span>);</span><br><span class="line">        teachers.add(teacher2);</span><br><span class="line">        room.setTeachers(teachers);</span><br><span class="line">        ArrayList&lt;Room.Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Room.Student student = <span class="keyword">new</span> Room.Student();</span><br><span class="line">        student.setAge(<span class="number">18</span>);</span><br><span class="line">        student.setName(<span class="string">"张三"</span>);</span><br><span class="line">        students.add(student);</span><br><span class="line">        Room.Student student2 = <span class="keyword">new</span> Room.Student();</span><br><span class="line">        student2.setAge(<span class="number">19</span>);</span><br><span class="line">        student2.setName(<span class="string">"李四"</span>);</span><br><span class="line">        students.add(student2);</span><br><span class="line">        Room.Student student3 = <span class="keyword">new</span> Room.Student();</span><br><span class="line">        student3.setAge(<span class="number">19</span>);</span><br><span class="line">        student3.setName(<span class="string">"王五"</span>);</span><br><span class="line">        students.add(student3);</span><br><span class="line">        room.setStudents(students);</span><br><span class="line"></span><br><span class="line">        String xmlString = XmlUtil.toXMLString(room);</span><br><span class="line">        System.out.println(xmlString);</span><br><span class="line"><span class="comment">// 打印========&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        xmlString = "&lt;room&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;name&gt;天水一班&lt;/name&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;no&gt;1&lt;/no&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;info&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;address&gt;天水&lt;/address&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;number&gt;5&lt;/number&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;/info&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;students&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;student&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "            &lt;name&gt;张三&lt;/name&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "            &lt;age&gt;18&lt;/age&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;/student&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;student&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "            &lt;name&gt;李四&lt;/name&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "            &lt;age&gt;19&lt;/age&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;/student&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;student&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "            &lt;name&gt;王五&lt;/name&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "            &lt;age&gt;19&lt;/age&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;/student&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;/students&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;teacher&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;name&gt;王老师&lt;/name&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;age&gt;40&lt;/age&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;/teacher&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;teacher&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;name&gt;曾老师&lt;/name&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "        &lt;age&gt;45&lt;/age&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "    &lt;/teacher&gt;\n" +</span></span><br><span class="line"><span class="comment">//                "&lt;/room&gt;";</span></span><br></pre></td></tr></table></figure><h3 id="toJson"><a href="#toJson" class="headerlink" title="toJson"></a>toJson</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">String xmlString = <span class="string">"&lt;room&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;name&gt;天水一班&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;no&gt;1&lt;/no&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;info&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;address&gt;天水&lt;/address&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;number&gt;5&lt;/number&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;/info&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;students&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;name&gt;张三&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;age&gt;18&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;name&gt;李四&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;age&gt;19&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;name&gt;王五&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;age&gt;19&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;/students&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;teacher&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;name&gt;王老师&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;age&gt;40&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;/teacher&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;teacher&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;name&gt;曾老师&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;age&gt;45&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;/teacher&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/room&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        Room parse = XmlUtil.parse(xmlString, Room<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(parse);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/klover2/java-demo/blob/master/json-demo/src/test/java/com/klover/jackson/XmlUtilTest.java" target="_blank" rel="external nofollow noopener noreferrer">代码示例</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pgp加解密和生成密钥</title>
      <link href="pgp%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%92%8C%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5/"/>
      <url>pgp%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%92%8C%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GPG, 或 GnuPG (GNU Privacy Guard) 是一个遵照 OpenPGP 协议的用于加密、数字签名以及认证的软件。它与 PGP (Pretty Good Privacy) 的区别是它是开源的，而 PGP 则是 Symantec 公司的专有软件。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcpg-jdk18on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.77<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码使用"><a href="#代码使用" class="headerlink" title="代码使用"></a>代码使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成公私钥</span></span><br><span class="line">PgpKeyDTO generate = PgpUtil.generate(<span class="string">"123456"</span>, <span class="string">"123@qq.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"> String testMessage = PgpUtil.encrypt(<span class="string">"test message"</span>, <span class="keyword">this</span>.publicKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">  String decrypt = PgpUtil.decrypt(message, <span class="keyword">this</span>.privateKey, <span class="keyword">this</span>.passphrase);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/klover2/java-demo/blob/master/pgp-demo/src/test/java/com/klover/pgp/PgpUtilTest.java" target="_blank" rel="external nofollow noopener noreferrer">代码示例</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://medium.com/@kthsingh.ms/encrypt-and-decrypt-anything-bytes-files-streams-with-pgp-using-bouncy-castle-and-java-ad335ae9f747" target="_blank" rel="external nofollow noopener noreferrer">Encrypt and decrypt anything (bytes/files/streams) with PGP using bouncy castle and java</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> java </tag>
            
            <tag> pgp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用STS临时访问凭证访问OSS</title>
      <link href="%E4%BD%BF%E7%94%A8STS%E4%B8%B4%E6%97%B6%E8%AE%BF%E9%97%AE%E5%87%AD%E8%AF%81%E8%AE%BF%E9%97%AEOSS/"/>
      <url>%E4%BD%BF%E7%94%A8STS%E4%B8%B4%E6%97%B6%E8%AE%BF%E9%97%AE%E5%87%AD%E8%AF%81%E8%AE%BF%E9%97%AEOSS/</url>
      
        <content type="html"><![CDATA[<p>todo</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://help.aliyun.com/zh/oss/developer-reference/use-temporary-access-credentials-provided-by-sts-to-access-oss?spm=a2c4g.11186623.4.1.3baf297alQfiKs&scm=20140722.H_100624._.ID_100624-OR_rec-V_1" target="_blank" rel="external nofollow noopener noreferrer">STS 临时访问凭证访问 OSS</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> STS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册美区苹果账号</title>
      <link href="%E6%B3%A8%E5%86%8C%E7%BE%8E%E5%8C%BA%E8%8B%B9%E6%9E%9C%E8%B4%A6%E5%8F%B7/"/>
      <url>%E6%B3%A8%E5%86%8C%E7%BE%8E%E5%8C%BA%E8%8B%B9%E6%9E%9C%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>链接 &gt; <a href="https://github.com/getlantern/lantern/wiki/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E7%BE%8E%E5%8C%BA%E8%8B%B9%E6%9E%9C%E8%B4%A6%E5%8F%B7" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/getlantern/lantern/wiki/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E7%BE%8E%E5%8C%BA%E8%8B%B9%E6%9E%9C%E8%B4%A6%E5%8F%B7</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在PostgreSQL中创建只读用户</title>
      <link href="%E5%9C%A8PostgreSQL%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%8F%AA%E8%AF%BB%E7%94%A8%E6%88%B7/"/>
      <url>%E5%9C%A8PostgreSQL%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%8F%AA%E8%AF%BB%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="创建只读用户"><a href="#创建只读用户" class="headerlink" title="创建只读用户"></a>创建只读用户</h2><blockquote><p>CREATE USER readonly_user WITH PASSWORD ‘password’;</p></blockquote><p>这条命令会创建一个名为 readonly_user 的用户，并设置用户的密码为 ‘password’。请务必将 ‘password’ 替换为实际的密码。</p><h2 id="进入你需要赋予权限的数据库-授予只读权限"><a href="#进入你需要赋予权限的数据库-授予只读权限" class="headerlink" title="进入你需要赋予权限的数据库 授予只读权限"></a>进入你需要赋予权限的数据库 授予只读权限</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">ON</span> <span class="keyword">DATABASE</span> <span class="keyword">database</span> <span class="keyword">TO</span> readonly_user;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">USAGE</span> <span class="keyword">ON</span> <span class="keyword">SCHEMA</span> <span class="keyword">public</span> <span class="keyword">TO</span> readonly_user;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">ALL</span> <span class="keyword">TABLES</span> <span class="keyword">IN</span> <span class="keyword">SCHEMA</span> <span class="keyword">public</span> <span class="keyword">TO</span> readonly_user;</span><br></pre></td></tr></table></figure><p>其中，database 是要授予权限的数据库名称。</p><p>第一条命令 GRANT CONNECT ON DATABASE database TO readonly_user; 授予用户连接数据库的权限。</p><p>第二条命令 GRANT USAGE ON SCHEMA public TO readonly_user; 授予用户对数据库中公共模式的使用权限。</p><p>第三条命令 GRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly_user; 授予用户对数据库中公共模式下所有表的只读权限。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://deepinout.com/sqlite/sqlite-questions/89_postgresql_how_do_you_create_a_readonly_user_in_postgresql.html" target="_blank" rel="external nofollow noopener noreferrer">PostgreSQL 如何在 PostgreSQL 中创建只读用户</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs中google授权登录</title>
      <link href="nodejs%E4%B8%ADgoogle%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95/"/>
      <url>nodejs%E4%B8%ADgoogle%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="google-授权配置"><a href="#google-授权配置" class="headerlink" title="google 授权配置"></a>google 授权配置</h2><p>创建项目 &gt;&gt; 在凭据页面创建 OAuth 2.0 客户端 ID &gt;&gt; 配置 (已获授权的重定向 URI) &gt;&gt; 测试完成 在 OAuth 同意屏幕 发布正式版</p><h2 id="授权跳转连接"><a href="#授权跳转连接" class="headerlink" title="授权跳转连接"></a>授权跳转连接</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">`https://accounts.google.com/o/oauth2/v2/auth?scope=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(</span></span></span><br><span class="line"><span class="string"><span class="subst">  <span class="string">"https://www.googleapis.com/auth/userinfo.email"</span></span></span></span><br><span class="line"><span class="string"><span class="subst">)&#125;</span>&amp;include_granted_scopes=true&amp;</span></span><br><span class="line"><span class="string">response_type=token&amp;state=1234&amp;redirect_uri=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(</span></span></span><br><span class="line"><span class="string"><span class="subst">  <span class="string">"&lt;跳转连接 需要在谷歌配置&gt;"</span></span></span></span><br><span class="line"><span class="string"><span class="subst">)&#125;</span>&amp;client_id=client_id`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(url);</span><br></pre></td></tr></table></figure><h2 id="授权成功后跳转链接如下"><a href="#授权成功后跳转链接如下" class="headerlink" title="授权成功后跳转链接如下"></a>授权成功后跳转链接如下</h2><blockquote><p>(跳转连接 需要在谷歌配置)#state=1234&amp;access_token=<access_token>&amp;token_type=Bearer&amp;expires_in=3599&amp;scope=email%20<a href="https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/drive.metadata.readonly%20openid&amp;authuser=0&amp;prompt=none" target="_blank" rel="external nofollow noopener noreferrer">https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/drive.metadata.readonly%20openid&amp;authuser=0&amp;prompt=none</a></access_token></p></blockquote><h2 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> superagent <span class="keyword">from</span> <span class="string">"superagent"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`https://www.googleapis.com/oauth2/v1/userinfo`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> superagent.get(url, &#123; access_token: token &#125;).set(&#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取客户邮箱 和id 头像</span></span><br><span class="line">  <span class="keyword">return</span> res.body;</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://developers.google.cn/identity/protocols/oauth2/javascript-implicit-flow?hl=zh-cn" target="_blank" rel="external nofollow noopener noreferrer">适用于客户端 Web 应用的 OAuth 2.0</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs中google-authenticator使用</title>
      <link href="nodejs%E4%B8%ADgoogle-authenticator%E4%BD%BF%E7%94%A8/"/>
      <url>nodejs%E4%B8%ADgoogle-authenticator%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="GA-6-为验证码"><a href="#GA-6-为验证码" class="headerlink" title="GA 6 为验证码"></a>GA 6 为验证码</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; authenticator &#125; <span class="keyword">from</span> <span class="string">"otplib"</span>;</span><br><span class="line"></span><br><span class="line">authenticator.options = &#123;</span><br><span class="line">  epoch: <span class="built_in">Date</span>.now() - <span class="number">30</span> * <span class="number">1000</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> secret_key = authenticator.generateSecret();</span><br><span class="line"><span class="built_in">console</span>.log(authenticator.generate(secret_key));</span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" target="_blank" rel="external nofollow noopener noreferrer">google-authenticator</a><br><a href="https://www.5axxw.com/wiki/content/6cwktj" target="_blank" rel="external nofollow noopener noreferrer">Otplib</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node版本管理工具nvm</title>
      <link href="node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nvm/"/>
      <url>node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nvm/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-Centos-8-环境下安装-nvm"><a href="#Linux-Centos-8-环境下安装-nvm" class="headerlink" title="Linux Centos 8 环境下安装 nvm"></a>Linux Centos 8 环境下安装 nvm</h2><p>官网：<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/nvm-sh/nvm</a></p><h3 id="下载-nvm-sh-文件"><a href="#下载-nvm-sh-文件" class="headerlink" title="下载 nvm.sh 文件"></a>下载 nvm.sh 文件</h3><p>方式一：命令行工具输入，通过 curl 工具下载</p><blockquote><p>curl -o- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh" target="_blank" rel="external nofollow noopener noreferrer">https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh</a> | bash</p></blockquote><p>方式二：命令行工具输入，通过 wget 工具下载</p><blockquote><p>wget -qO- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh" target="_blank" rel="external nofollow noopener noreferrer">https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh</a> | bash</p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这将在主目录下创建一个.nvm 目录。nvm 保留自己的二进制文件和所有其他所需文件。然后在用户.bashrc 文件中设置环境。您需要通过运行以下命令来加载此环境以设置所需的配置：</p><blockquote><p>source ~/.bashrc</p></blockquote><h2 id="windows-环境下安装-nvm"><a href="#windows-环境下安装-nvm" class="headerlink" title="windows 环境下安装 nvm"></a>windows 环境下安装 nvm</h2><h3 id="下载指定版本安装包"><a href="#下载指定版本安装包" class="headerlink" title="下载指定版本安装包"></a>下载指定版本安装包</h3><blockquote><p><a href="https://github.com/nvm-sh/nvm/releases" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/nvm-sh/nvm/releases</a></p></blockquote><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://yuencode.cn/2023/01/03/Linux-Centos-8-%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85nvm/" target="_blank" rel="external nofollow noopener noreferrer">Linux Centos 8 环境下安装 nvm</a><br><a href="https://blog.csdn.net/baidu_30506559/article/details/127379924" target="_blank" rel="external nofollow noopener noreferrer">nvm 安装及基础命令</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA:java:无效的源发行版：14</title>
      <link href="IDEA-java-%E6%97%A0%E6%95%88%E7%9A%84%E6%BA%90%E5%8F%91%E8%A1%8C%E7%89%88%EF%BC%9A14/"/>
      <url>IDEA-java-%E6%97%A0%E6%95%88%E7%9A%84%E6%BA%90%E5%8F%91%E8%A1%8C%E7%89%88%EF%BC%9A14/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>用 IDEA 编写 sdk 代码运行后报如下错误：<br><code>警告: 源发行版 14 需要目标发行版 14</code></p><h2 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h2><p>出现该问题的原因是项目 Project 当中的 jdk 与电脑当中的 jdk 版本不一致造成的。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>修改 IDEA 当中的 Project 项目的 jdk 版本</p><ol><li>修改 Project 的 SDK 版本<br><img src="https://img-blog.csdnimg.cn/c7c4e3084a3348bfadeab5bd23b5a010.png" alt="在这里插入图片描述"></li><li>修改 Module 模块的 Language Level<br><img src="https://img-blog.csdnimg.cn/baf4d6b24a454decbe98c5a860783a2b.png" alt="在这里插入图片描述"></li><li>修改 Module 模块中的 Module SDK<br><img src="https://img-blog.csdnimg.cn/12cf70053f044e1e9ba6133776459ca2.png" alt></li><li>设置 plaform settings Sdks<br><img src="https://img-blog.csdnimg.cn/0bf3e0671c5c499b9da89c7e3773691d.png" alt="在这里插入图片描述"></li><li>找到 Java Complier，修改 byte code version，使其版本与 sdk 版本保持一致<br><img src="https://img-blog.csdnimg.cn/a480b77b9e774f1891bd335b0385703c.png" alt="在这里插入图片描述"><br>修改过后，再次编译运行就没有问题了！</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql敏感信息处理</title>
      <link href="postgresql%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/"/>
      <url>postgresql%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>对手机号 和 邮箱进行脱敏处理</p><h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><p>使用数据库<code>regexp_replace</code>函数进行数据处理</p><a id="more"></a><h2 id="regexp-replace函数介绍"><a href="#regexp-replace函数介绍" class="headerlink" title="regexp_replace函数介绍"></a><code>regexp_replace</code>函数介绍</h2><p>regexp_replace(source, pattern, replace_string, occurrence)<br>参数说明：</p><ol><li>source: string 类型，要替换的原始字符串。</li><li>pattern: string 类型常量，要匹配的正则模式，pattern 为空串时抛异常。</li><li>replace_string:string，将匹配的 pattern 替换成的字符串。</li><li>occurrence: bigint 类型常量，必须大于等于 0，<br>大于 0：表示将第几次匹配替换成 replace_string，<br>等于 0：表示替换掉所有的匹配子串。<br>其它类型或小于 0 抛异常。</li></ol><p>返回值：<br>将 source 字符串中匹配 pattern 的子串替换成指定字符串后返回，当输入 source, pattern, occurrence 参数为 NULL 时返回 NULL，若 replace_string 为 NULL 且 pattern 有匹配，返回 NULL，replace_string 为 NULL 但 pattern 不匹配，则返回原串。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users: User[] = <span class="keyword">await</span> <span class="keyword">this</span>.userRepo</span><br><span class="line">  .createQueryBuilder()</span><br><span class="line">  .select(<span class="string">'"id"'</span>)</span><br><span class="line">  .addSelect(<span class="string">"nickname"</span>)</span><br><span class="line">  .addSelect(<span class="string">`REGEXP_REPLACE(phone, '(^.&#123;3&#125;).*(\\d&#123;4&#125;)$', '\\1**\\2')`</span>, <span class="string">"phone"</span>) <span class="comment">// 格式 +86**4352</span></span><br><span class="line">  .addSelect(<span class="string">`REGEXP_REPLACE(email, '(^.&#123;2&#125;).*@(.*)', '\\1**@\\2')`</span>, <span class="string">"email"</span>) <span class="comment">// 格式 fe**@qq.com</span></span><br><span class="line">  .where(&#123; id: <span class="string">"c66d2386-bcfb-420d-91be-ca6af07415d2"</span> &#125;)</span><br><span class="line">  .getRawMany();</span><br></pre></td></tr></table></figure><p>生成的 sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">"id"</span>, nickname, REGEXP_REPLACE(phone, <span class="string">'(^.&#123;3&#125;).*(\d&#123;4&#125;)$'</span>, <span class="string">'\1**\2'</span>) <span class="keyword">AS</span> <span class="string">"phone"</span>, REGEXP_REPLACE(email, <span class="string">'(^.&#123;2&#125;).*@(.*)'</span>, <span class="string">'\1**@\2'</span>) <span class="keyword">AS</span> <span class="string">"email"</span> <span class="keyword">FROM</span> <span class="string">"user"</span> <span class="string">"User"</span> <span class="keyword">WHERE</span> ( <span class="string">"User"</span>.<span class="string">"id"</span> = <span class="string">'c66d2386-bcfb-420d-91be-ca6af07415d2'</span> ) <span class="keyword">AND</span> ( <span class="string">"User"</span>.<span class="string">"deleteTime"</span> <span class="keyword">IS</span> <span class="literal">NULL</span> )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> typeorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国密sm2加密</title>
      <link href="%E5%9B%BD%E5%AF%86sm2%E5%8A%A0%E5%AF%86/"/>
      <url>%E5%9B%BD%E5%AF%86sm2%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="SM2-国密算法-，加密模式-C1C3C2"><a href="#SM2-国密算法-，加密模式-C1C3C2" class="headerlink" title="SM2(国密算法)，加密模式 C1C3C2"></a>SM2(国密算法)，加密模式 C1C3C2</h2><p>SM2 为非对称加密，基于 ECC。该算法已公开。由于该算法基于 ECC，故其签名速度与秘钥生成速度都快于 RSA。ECC 256 位（SM2 采用的就是 ECC 256 位的一种）安全强度比 RSA 2048 位高，但运算速度快于 RSA。<br>旧标准的加密排序 C1C2C3 新标准 C1C3C2，C1 为 65 字节第 1 字节为压缩标识，这里固定为 0x04，后面 64 字节为 xy 分量各 32 字节。C3 为 32 字节。C2 长度与原文一致。</p><blockquote><p>公钥：049cbf6df92258b385b82844d29039183d98e205726bcecd71b40ded26e717d3ccb9132685432eaafbcb58683c3d303a1e79137447231f8db33226b24893fcd429</p></blockquote><blockquote><p>私钥：6c4a9b2d44704400552b4b90c39c5bca3e5c0ac1b91324e3d0579eebf24830bd</p></blockquote><a id="more"></a><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><ol><li>添加包</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;bcpkix-jdk15on&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.70&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>java 加密</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> crypto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.asn1.gm.GMNamedCurves;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.asn1.x9.X9ECParameters;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.InvalidCipherTextException;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.engines.SM2Engine;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.params.ECDomainParameters;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.params.ECPublicKeyParameters;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.params.ParametersWithRandom;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.math.ec.ECPoint;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.util.encoders.Base64;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.util.encoders.Hex;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> klover</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> SM2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/25 12:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SM2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InvalidCipherTextException </span>&#123;</span><br><span class="line">        <span class="comment">// 加密代码示例</span></span><br><span class="line">        <span class="keyword">final</span> String SPEC_NAME = <span class="string">"sm2p256v1"</span>;</span><br><span class="line">        <span class="keyword">final</span> X9ECParameters x9ECParameters = GMNamedCurves.getByName(SPEC_NAME);</span><br><span class="line">        <span class="keyword">final</span> ECDomainParameters ecDomainParameters = <span class="keyword">new</span> ECDomainParameters(x9ECParameters.getCurve(), x9ECParameters.getG(), x9ECParameters.getN());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 公钥数据</span></span><br><span class="line">        String encodedPub = <span class="string">"049cbf6df92258b385b82844d29039183d98e205726bcecd71b40ded26e717d3ccb9132685432eaafbcb58683c3d303a1e79137447231f8db33226b24893fcd429"</span>;</span><br><span class="line">        String data = <span class="string">"6220012345670001"</span>; <span class="comment">// 待加密数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] pointBytes = Hex.decode(encodedPub);</span><br><span class="line">        ECPoint q = x9ECParameters.getCurve().decodePoint(pointBytes);</span><br><span class="line">        ECPublicKeyParameters ecPublicKeyParameters = <span class="keyword">new</span> ECPublicKeyParameters(q, ecDomainParameters);</span><br><span class="line">        <span class="comment">// 采用 C1 || C3 || C2 的模式</span></span><br><span class="line">        SM2Engine sm2Engine = <span class="keyword">new</span> SM2Engine(SM2Engine.Mode.C1C3C2);</span><br><span class="line">        <span class="comment">// 自定义固定签名</span></span><br><span class="line"><span class="comment">//        SecureRandom secureRandom = new SecureRandom(encodedPub.getBytes(StandardCharsets.UTF_8));</span></span><br><span class="line"><span class="comment">//        SecureRandom random = CryptoServicesRegistrar.getSecureRandom(secureRandom);</span></span><br><span class="line"><span class="comment">//        sm2Engine.init(true, new ParametersWithRandom(ecPublicKeyParameters, random));</span></span><br><span class="line">        <span class="comment">// 动态</span></span><br><span class="line">        sm2Engine.init(<span class="keyword">true</span>, <span class="keyword">new</span> ParametersWithRandom(ecPublicKeyParameters));</span><br><span class="line">        <span class="keyword">byte</span>[] dataBytes = data.getBytes();</span><br><span class="line">        <span class="keyword">byte</span>[] cipherBytes = sm2Engine.processBlock(dataBytes, <span class="number">0</span>, dataBytes.length);</span><br><span class="line">        String encryptedData = <span class="keyword">new</span> String(Base64.encode(cipherBytes));</span><br><span class="line">        System.out.println(encryptedData);</span><br><span class="line">        <span class="comment">// 加密结果示例: BB5SdLKsA2dqJTeXUFpRf9M6htKBrfYOTlaVUFHp340wXQ6quFU3fT9PSw8Hf6s1QyqMizJYjnvl/Jsqn91Zr6KXXhZUdeRctUBtvkUOFB6QYeHLa+dk5mQTOhG0cJGaOWd3tNF/3pM7w0lk3snC6X0=</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><ol><li>添加包</li></ol><blockquote><p>gmsm-sm2js</p></blockquote><ol start="2"><li>使用</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> SM2 <span class="keyword">from</span> <span class="string">"gmsm-sm2js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密方式 SM2 sm2p256v1</span></span><br><span class="line"><span class="comment"> * @publicKey 加密公钥</span></span><br><span class="line"><span class="comment"> * @msg 原文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sm2p256v1Encrypt = <span class="function">(<span class="params">publicKey: <span class="built_in">string</span>, msg: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> encrypt = SM2.encrypt(publicKey, msg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Buffer.from(encrypt, <span class="string">"hex"</span>).toString(<span class="string">"base64"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密方式 SM2 sm2p256v1</span></span><br><span class="line"><span class="comment"> * @publicKey 解密私钥</span></span><br><span class="line"><span class="comment"> * @msg 密文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sm2p256v1Decrypt = <span class="function">(<span class="params">privateKey: <span class="built_in">string</span>, msg: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> decrypt = SM2.decrypt(privateKey, Buffer.from(msg, <span class="string">"base64"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Buffer.from(decrypt, <span class="string">"hex"</span>).toString(<span class="string">"utf8"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> privateKey =</span><br><span class="line">  <span class="string">"6c4a9b2d44704400552b4b90c39c5bca3e5c0ac1b91324e3d0579eebf24830bd"</span>;</span><br><span class="line"><span class="keyword">const</span> publicKey =</span><br><span class="line">  <span class="string">"049cbf6df92258b385b82844d29039183d98e205726bcecd71b40ded26e717d3ccb9132685432eaafbcb58683c3d303a1e79137447231f8db33226b24893fcd429"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msgString = <span class="string">"6220012345670001"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encryptData = sm2p256v1Encrypt(publicKey, msgString);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(encryptData);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sm2p256v1Decrypt(privateKey, encryptData));</span><br></pre></td></tr></table></figure><h3 id="node-解密-java-加密的值"><a href="#node-解密-java-加密的值" class="headerlink" title="node 解密 java 加密的值"></a>node 解密 java 加密的值</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  sm2p256v1Decrypt(</span><br><span class="line">    privateKey,</span><br><span class="line">    <span class="string">"BB5SdLKsA2dqJTeXUFpRf9M6htKBrfYOTlaVUFHp340wXQ6quFU3fT9PSw8Hf6s1QyqMizJYjnvl/Jsqn91Zr6KXXhZUdeRctUBtvkUOFB6QYeHLa+dk5mQTOhG0cJGaOWd3tNF/3pM7w0lk3snC6X0="</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> crypto </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布一个golang的工具包到github</title>
      <link href="%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAgolang%E7%9A%84%E5%B7%A5%E5%85%B7%E5%8C%85%E5%88%B0github/"/>
      <url>%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAgolang%E7%9A%84%E5%B7%A5%E5%85%B7%E5%8C%85%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<h2 id="Go-语言环境安装"><a href="#Go-语言环境安装" class="headerlink" title="Go 语言环境安装"></a>Go 语言环境安装</h2><p>Go 语言支持以下系统：</p><ul><li>Linux</li><li>FreeBSD</li><li>Mac OS X（也称为 Darwin）</li><li>Windows<br>安装包下载地址为：<a href="https://golang.org/dl/。" target="_blank" rel="external nofollow noopener noreferrer">https://golang.org/dl/。</a></li></ul><p>如果打不开可以使用这个地址：<a href="https://golang.google.cn/dl/。" target="_blank" rel="external nofollow noopener noreferrer">https://golang.google.cn/dl/。</a></p><a id="more"></a><h2 id="新建空项目"><a href="#新建空项目" class="headerlink" title="新建空项目"></a>新建空项目</h2><ul><li><p>在 github 上新建一个公开的项目，比如我创建一个 qbit-go-sdk 的项目</p></li><li><p>将项目克隆到本地来</p></li><li><p>进入项目根目录，使用<code>go mod</code>初始化项目</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">go mod init github.com/klover2/qbit-go-sdk</span><br></pre></td></tr></table></figure><ul><li>初始化后的 go.mod 的文件如下，如果你的 module 不是你 github 的项目地址你要修改过来</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module github.com/klover2/qbit-go-sdk</span><br><span class="line"></span><br><span class="line">go 1.16</span><br></pre></td></tr></table></figure><ul><li>随便写一些东西发布到 githup 上</li></ul><h2 id="将-github-上的工程转换为别人可以下载的依赖包"><a href="#将-github-上的工程转换为别人可以下载的依赖包" class="headerlink" title="将 github 上的工程转换为别人可以下载的依赖包"></a>将 github 上的工程转换为别人可以下载的依赖包</h2><ol><li>本地使用 git 命令创建一个 tag</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git tag -a tag名 -m <span class="string">'创建一个版本'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eg</span></span><br><span class="line"></span><br><span class="line">git tag -a v1.0.0 -m <span class="string">'创建一个项目'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>将 tag 提交到 github 上</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git push origin tag名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># eg</span></span><br><span class="line"></span><br><span class="line">git push origin v1.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性提交本地全部的tag</span></span><br><span class="line"></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h2 id="直接在-github-上查看是否已经提交成功-tag"><a href="#直接在-github-上查看是否已经提交成功-tag" class="headerlink" title="直接在 github 上查看是否已经提交成功 tag"></a>直接在 github 上查看是否已经提交成功 tag</h2><p><img src="https://img-blog.csdnimg.cn/ae6769f561a44c4c94abab5df257a55b.png" alt="在这里插入图片描述"></p><h2 id="创建对应的发布"><a href="#创建对应的发布" class="headerlink" title="创建对应的发布"></a>创建对应的发布</h2><p><img src="https://img-blog.csdnimg.cn/5dce1126bf7e4c6f982f6bf5626e1d04.png" alt="在这里插入图片描述"></p><h2 id="查看自己发布的包"><a href="#查看自己发布的包" class="headerlink" title="查看自己发布的包"></a>查看自己发布的包</h2><p><a href="https://pkg.go.dev/" target="_blank" rel="external nofollow noopener noreferrer">pkg.go</a> 同步有点慢，不用在乎，上传到 githup 上就可以用了</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>go get github.com/klover2/qbit-go-sdk</code><br><code>go get vendor</code> 把代码拉到本地</p><h2 id="更新包版本"><a href="#更新包版本" class="headerlink" title="更新包版本"></a>更新包版本</h2><p>直接修改<code>go.mod</code> 对应包的版本<br><code>go mod tidy</code> 更新包<br><code>go get vendor</code> 把代码拉到本地</p><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>打开你的 PowerShell 并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; <span class="variable">$env</span>:GO111MODULE = <span class="string">"on"</span></span><br><span class="line">C:\&gt; <span class="variable">$env</span>:GOPROXY = <span class="string">"https://goproxy.cn"</span></span><br></pre></td></tr></table></figure><p>或者</p><ol><li>打开“开始”并搜索“env”</li><li>选择“编辑系统环境变量”</li><li>点击“环境变量…”按钮</li><li>在“&lt;你的用户名&gt; 的用户变量”章节下（上半部分）</li><li>点击“新建…”按钮</li><li>选择“变量名”输入框并输入“GO111MODULE”</li><li>选择“变量值”输入框并输入“on”</li><li>点击“确定”按钮</li><li>点击“新建…”按钮</li><li>选择“变量名”输入框并输入“GOPROXY”</li><li>选择“变量值”输入框并输入“<a href="https://goproxy.cn”" target="_blank" rel="external nofollow noopener noreferrer">https://goproxy.cn”</a></li><li>点击“确定”按钮</li></ol><h3 id="Go-1-13-及以上（推荐）"><a href="#Go-1-13-及以上（推荐）" class="headerlink" title="Go 1.13 及以上（推荐）"></a>Go 1.13 及以上（推荐）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go env -w GO111MODULE=on</span><br><span class="line">$ go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><h3 id="macOS-或-Linux"><a href="#macOS-或-Linux" class="headerlink" title="macOS 或 Linux"></a>macOS 或 Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GO111MODULE=on</span><br><span class="line">$ <span class="built_in">export</span> GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"export GO111MODULE=on"</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"export GOPROXY=https://goproxy.cn"</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://goproxy.cn/" target="_blank" rel="external nofollow noopener noreferrer">配置代理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pipenv命令的使用</title>
      <link href="pipenv%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>pipenv%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip install pipenv</span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">pipenv --version</span><br><span class="line"><span class="comment">#创建</span></span><br><span class="line"><span class="comment">#pipenv --python 3.8(可以不用)</span></span><br><span class="line"><span class="comment">#激活虚拟环境</span></span><br><span class="line">pipenv shell</span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">安装开发扩展</span><br><span class="line">pipenv install --dev django</span><br><span class="line"><span class="comment">#安装生产环境</span></span><br><span class="line">pipenv install</span><br><span class="line"><span class="comment">#安装开发环境</span></span><br><span class="line">pipenv install --dev</span><br><span class="line"><span class="comment">#卸载包</span></span><br><span class="line">pipenv uninstall [package]</span><br><span class="line"><span class="comment">#查看创建虚拟机所在目录</span></span><br><span class="line">pipenv --venv全局切换版本pyenv global 3.6.4当前目录切换版本pyenv <span class="built_in">local</span> 3.6.4pipenv --three <span class="comment"># 初始化一个python3虚拟环境，如果想初始化pyhton2的虚拟环境，则使用pipenv --twopipenv --python 2.7.14删除环境(在pipfile所在目录执行)</span></span><br><span class="line">pipenv uninstall --all <span class="comment"># 卸载全部包</span></span><br><span class="line">pipenv --rm     <span class="comment"># 删除整个环境  不会删除pipfile</span></span><br></pre></td></tr></table></figure><h2 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装第三方库</span></span><br><span class="line">pipenv install [第三方库名]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看包的依赖结构</span></span><br><span class="line">pipenv graph</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看安装的包</span></span><br><span class="line">pip list</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载包</span></span><br><span class="line">pipenv uninstall [第三方库名]</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出虚拟环境</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除虚拟环境</span></span><br><span class="line">pipenv – – rm</span><br><span class="line"></span><br><span class="line"><span class="comment">#要更新所有的依赖项，使用命令 pipenv update</span></span><br><span class="line"><span class="comment">#使用 pipenv update &lt;pkg&gt; 命令升级指定的包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果项目已经存在requirements.txt</span></span><br><span class="line">pipenv install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="安装环境区分"><a href="#安装环境区分" class="headerlink" title="安装环境区分"></a>安装环境区分</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pipenv install</span><br><span class="line">–dev 安装Pipfile中 [default] 和 [devlop] 中的包</span><br><span class="line"></span><br><span class="line">–system 使用系统的 pip 命令而不是virtualenv的 pip 命令</span><br><span class="line"></span><br><span class="line">–ignore-pipfile 忽略 Pipfile 文件而直接安装 Pipfile.lock 中的包</span><br><span class="line"></span><br><span class="line">–ignore-lock 忽略 Pipfile.lock 文件而直接安装 Pipfile 中的包。此外，不会更新 Pipfile.lock 文件。</span><br><span class="line"></span><br><span class="line">pipenv uninstall</span><br><span class="line">–all 从虚拟环境中移除所有已安装的包，但 Pipfile.lock 文件不受影响</span><br><span class="line">–all-dev 从虚拟环境中卸载所有开发包，并从 Pipfile 文件中移除这些包</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装代码成python包</title>
      <link href="%E5%B0%81%E8%A3%85%E4%BB%A3%E7%A0%81%E6%88%90python%E5%8C%85/"/>
      <url>%E5%B0%81%E8%A3%85%E4%BB%A3%E7%A0%81%E6%88%90python%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h2><p>PyPI, Python Package Index,是 python 的正式第三方软件包的软件存储库。一些软件包管理器如 pip，就是默认从 PyPI 下载软件包</p><p>链接： <a href="https://pypi.org/" target="_blank" rel="external nofollow noopener noreferrer">https://pypi.org/</a></p><p>在 Pypi 中注册账号，并且需要激活邮箱</p><a id="more"></a><h2 id="更新-pip"><a href="#更新-pip" class="headerlink" title="更新 pip"></a>更新 pip</h2><p><code>python -m pip install --upgrade pip</code></p><h2 id="安装-pipenv"><a href="#安装-pipenv" class="headerlink" title="安装 pipenv"></a>安装 pipenv</h2><p><code>pip install pipenv</code></p><h2 id="使用-pyCharm-创建项目"><a href="#使用-pyCharm-创建项目" class="headerlink" title="使用 pyCharm 创建项目"></a>使用 pyCharm 创建项目</h2><p>选择 pipenv<br><img src="https://img-blog.csdnimg.cn/5aca5d0c3fba4d958f4b59d4bd5fec84.png" alt="在这里插入图片描述"><br>在当前项目目录执行 <code>pipenv install</code>,初始化后项目如下</p><p><img src="https://img-blog.csdnimg.cn/21bf61bd322644d4b5b246cbab0b632d.png" alt="在这里插入图片描述"></p><h2 id="创建包名-mypackage"><a href="#创建包名-mypackage" class="headerlink" title="创建包名 mypackage"></a>创建包名 mypackage</h2><p><code>注意</code>：包名尽量不要用驼峰和中划线做包名，不然容易出现找不到包名<br><img src="https://img-blog.csdnimg.cn/08aa097a6f1944858778b1defba75f0f.png" alt="在这里插入图片描述"></p><h2 id="创建-setup-py-用于编译包配置"><a href="#创建-setup-py-用于编译包配置" class="headerlink" title="创建 setup.py 用于编译包配置"></a>创建 setup.py 用于编译包配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"README.md"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    readme = f.read()</span><br><span class="line"></span><br><span class="line">requires = [</span><br><span class="line">    <span class="string">"requests&gt;=2.28.1"</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">"mypackage"</span>,</span><br><span class="line">    version=<span class="string">"1.0.0"</span>,</span><br><span class="line">    keywords=[<span class="string">"关键词1"</span>, <span class="string">"关键词2"</span>, <span class="string">"关键词3"</span>],</span><br><span class="line">    author=<span class="string">"开发者"</span>,</span><br><span class="line">    author_email=<span class="string">"开发者邮箱"</span>,</span><br><span class="line">    description=<span class="string">"描述"</span>,</span><br><span class="line">    long_description=readme,</span><br><span class="line">    long_description_content_type=<span class="string">"text/markdown"</span>,</span><br><span class="line">    url=<span class="string">"项目githup地址"</span>,</span><br><span class="line">    packages=setuptools.find_packages(exclude=(<span class="string">'tests'</span>, <span class="string">'.pypirc'</span>)),</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">"Programming Language :: Python :: 3"</span>,</span><br><span class="line">        <span class="string">"License :: OSI Approved :: Apache Software License"</span>,</span><br><span class="line">        <span class="string">"Operating System :: OS Independent"</span>,</span><br><span class="line">    ],</span><br><span class="line">    python_requires=<span class="string">'&gt;=3.7'</span>,</span><br><span class="line">    install_requires=requires,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>注意</code>：install_requires 是你当前包需要的外部引入，需要在这里声明，不然其他人用你当前包会出现缺少引入</p><h2 id="配置-pypi-密码"><a href="#配置-pypi-密码" class="headerlink" title="配置 pypi 密码"></a>配置 pypi 密码</h2><p>创建 <code>.pypirc</code> 防止你电脑的用户目录下：<code>C:\Users\klover</code>,因为 setup.py 上传指令会检查.pypirc 文件是否存在在路径 $HOME/.pypirc 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers =</span><br><span class="line">    pypi</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">repository: &lt;repository-url&gt;</span><br><span class="line">username: &lt;username&gt;</span><br><span class="line">password: &lt;password&gt;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="comment"># 执行当前命令需要移除 build dist mypackage.egg-info 三个文件夹连同里面的文件</span></span><br><span class="line"></span><br><span class="line">python setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure><p>上传成功就能在 pypi 上看见了</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://zhuanlan.zhihu.com/p/342682533" target="_blank" rel="external nofollow noopener noreferrer">Pypi 官方教程中文版：封装代码成 python 包</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jar上传到maven中央仓库</title>
      <link href="Jar%E4%B8%8A%E4%BC%A0%E5%88%B0maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
      <url>Jar%E4%B8%8A%E4%BC%A0%E5%88%B0maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>开发环境为：win11 + jdk8 + maven</p><h2 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h2><p><a href="https://issues.sonatype.org/secure/Signup!default.jspa" target="_blank" rel="external nofollow noopener noreferrer">Sign up for Jira - Sonatype JIRA</a><br>选择中文 比较好</p><p>如果未使用过 Sonatype 系统，需要先注册一个帐号。</p><ul><li>Email: 填写自己的邮箱帐号即可，在 Sonatype 上的相关操作，会通知到这个邮箱帐号来提醒你相关进度。</li><li>Full name: 填写联系人名称。</li><li>Username: 这个就是你在 Sonatype 的登录帐号了。</li><li>Password: 为登录密码，要求至少 8 位，并带有大小写字母和字符。</li></ul><a id="more"></a><h2 id="项目申请"><a href="#项目申请" class="headerlink" title="项目申请"></a>项目申请</h2><h3 id="创建工单"><a href="#创建工单" class="headerlink" title="创建工单"></a>创建工单</h3><p>可以理解为在 Sonatype 系统中申请一个自己的项目，以 Group Id 为单位，Group Id 支持域名地址和 Github 地址两种方式验证，大家可根据实际情况自行选择。申请后需要经过管理员对我们填写的 Group Id 所有权进行验证，审核通过后方可上传 jar 包。我们在页面顶部点击 Create 按钮来创建工单。</p><ul><li>Project: 项目类型。选择 Community Support - Open Source Project Repository Hosting (OSSRH)</li><li>Issue Type: 工单类型。选择 New Project</li><li>Summary: 填写 jar 包名称即可</li><li>Description: 选填项，写一些描述</li><li>Group Id: 填写项目的 Group Id，域名和 Github Group Id 两种方式下面分别介绍申请过程</li><li>Project URL: 填写项目主页，可以是托管地址，也可以是官网地址</li><li>SCM URL: 填写项目的 Git 地址<br><img src="https://img-blog.csdnimg.cn/7320f8f0f35e4d069fad0082c289a67a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5204dc640c6e442584af3cdc78eeebf6.png" alt="在这里插入图片描述"><br>按照图片中提示 在 githup 中创建名字为<code>OSSRH-85210</code>(每个人不一样)的空项目，同时把 project url 和 scm url 这两个地址改成你当前项目名称，然后就是等待审核。</li></ul><h3 id="审核通过"><a href="#审核通过" class="headerlink" title="审核通过"></a>审核通过</h3><p>当你收到如下图的回复 说明你就成功了<br><img src="https://img-blog.csdnimg.cn/8b04fa253c3d4fb99c0ef62683d6657d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/159e7360235d47cea7e641caa7bbea2c.png" alt="在这里插入图片描述"></p><h2 id="GPG-签名"><a href="#GPG-签名" class="headerlink" title="GPG 签名"></a>GPG 签名</h2><p>GPG 的主要作用是生成密钥对，发布到 Maven 仓库中的所有文件都要使用 GPG 签名，以保障完整性。使用 Windows 的可以下载 gpg4win 地址：<a href="https://www.gpg4win.org/download.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.gpg4win.org/download.html</a> ，安装后执行 gpg –gen-key 命令新建密钥对。</p><p>执行命令后，需要输入 姓名 和 邮箱 还有 Passphase（证书密码），Passphase 需要记住，在我们使用证书的时候会要求我们输入密码。</p><p><img src="https://img-blog.csdnimg.cn/07483a7bc7244173bf44e1f8eb019889.png" alt="在这里插入图片描述"><br>执行完之后我们会得到上图中的 pub 串，接着我们执行以下命令将 pub 上传到 key 验证库(不成功多试几次)<br><code>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys E89F2504BF0CE3337B26E45E485D1495DA08F9F6</code><br>查询是否成功<br><code>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys E89F2504BF0CE3337B26E45E485D1495DA08F9F6</code></p><p>获取 sign3 (后面 maven setting.xml 用得上)<br><code>gpg --list-signatures --keyid-format 0xshort</code><br><img src="https://img-blog.csdnimg.cn/d6ddfb5b492140d9bd2bc64c2baa6e12.png" alt="在这里插入图片描述"></p><h2 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h2><ul><li>在 Maven 全局配置文件 setting.xml 中配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>sonatype 账户名称<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>sonatype 密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置 gpg 的账户密码，复制以下配置，修改为自己的密码后，添加到 setting.xml 文件中的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>gpg<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.keyname</span>&gt;</span>上面你获取的sign3<span class="tag">&lt;/<span class="name">gpg.keyname</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.passphrase</span>&gt;</span>gpg 你设置的密码<span class="tag">&lt;/<span class="name">gpg.passphrase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对应上面的groupId 不能乱写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.klover2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>你自己的项目名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/klover2/**<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  apache 2.0 协议  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SCM信息 -&gt; git在github上托管 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:https://github.com/klover2/**.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>git:https://github.com/klover2/**<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发者信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>klover<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 插件版本 直接拷贝 start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nexus-staging-maven-plugin.version</span>&gt;</span>1.6.7<span class="tag">&lt;/<span class="name">nexus-staging-maven-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven-source-plugin.version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">maven-source-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven-javadoc-plugin.version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">maven-javadoc-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven-gpg-plugin.version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">maven-gpg-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven-release-plugin.version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">maven-release-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件版本 直接拷贝 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件包 直接拷贝 start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;nexus-staging-maven-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-source-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-javadoc-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-gpg-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件包 直接拷贝 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 默认配置 直接拷贝 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--生成源码插件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-source-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--生成API文档插件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-javadoc-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发布到中央SNAPSHOT仓库插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;nexus-staging-maven-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">nexusUrl</span>&gt;</span>https://s01.oss.sonatype.org/<span class="tag">&lt;/<span class="name">nexusUrl</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 开启true 自动同步--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">autoReleaseAfterClose</span>&gt;</span>false<span class="tag">&lt;/<span class="name">autoReleaseAfterClose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用Maven Release插件执行发布部署 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-release-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">autoVersionSubmodules</span>&gt;</span>true<span class="tag">&lt;/<span class="name">autoVersionSubmodules</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">useReleaseProfile</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useReleaseProfile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releaseProfiles</span>&gt;</span>release<span class="tag">&lt;/<span class="name">releaseProfiles</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--gpg插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-gpg-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--suppress UnresolvedMavenProperty --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">keyname</span>&gt;</span>$&#123;gpg.keyname&#125;<span class="tag">&lt;/<span class="name">keyname</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--suppress UnresolvedMavenProperty --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">passphraseServerId</span>&gt;</span>$&#123;gpg.keyname&#125;<span class="tag">&lt;/<span class="name">passphraseServerId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注意,此id必须与setting.xml中指定的一致--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认配置 直接拷贝 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p>完成以上配置，我们就可以往 Maven 中央仓库上传 jar 包了，我们使用 Maven 命令上传。</p><blockquote><p><code>mvn clean deploy -P release</code></p></blockquote><p>如果是子项目 &gt; <code>mvn clean deploy -projects demo -P release</code><br>如下图 就说明发布成功了。</p><p><img src="https://img-blog.csdnimg.cn/a75459d2b6754beeb2973fc5305713aa.png" alt="在这里插入图片描述"></p><p>届时你可以在<a href="https://s01.oss.sonatype.org/" target="_blank" rel="external nofollow noopener noreferrer">Nexus Repository Manager</a>:中找到.<br><img src="https://img-blog.csdnimg.cn/24027c5a1c584085bd6d187f9a8f6eab.png" alt="在这里插入图片描述"></p><p>4 小时内你可以在 <a href="https://search.maven.org/" target="_blank" rel="external nofollow noopener noreferrer">Maven Central Repository Search</a>中搜索到.</p><p>在<a href="https://mvnrepository.com/" target="_blank" rel="external nofollow noopener noreferrer">mvnrepository</a>中搜索找可能需要几天。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>如果你版本号是以 SNAPSHOT 结尾，不会发布 maven 中央仓库。</p></li><li><p><code>&lt;autoReleaseAfterClose&gt;false&lt;/autoReleaseAfterClose&gt;</code> 由于我关闭了自动同步，所以需要在 Staging Repositories 手动点 release 发布<br><img src="https://img-blog.csdnimg.cn/09b78d71349b4d4b86951141f3b045d4.png" alt="在这里插入图片描述"></p></li><li><p>是否需要发布单元测试文件</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下</span></span><br><span class="line"></span><br><span class="line">mvn clean deploy -P release -DskipTests</span><br><span class="line"></span><br><span class="line"><span class="comment"># -Dmaven.test.skip=true，不执行测试用例，也不编译测试用例类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要用引号</span></span><br><span class="line">mvn clean deploy -P release <span class="string">'-Dmaven.test.skip=true'</span></span><br></pre></td></tr></table></figure><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><ol><li>nexus staging maven 插件：maven 部署失败：执行时遇到 API 不兼容</li></ol><p>配置环境变量：&gt; <code>export MAVEN_OPTS=&quot;--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED&quot;</code></p><p><img src="https://img-blog.csdnimg.cn/7582168ed594457a85165ed15b50ce2e.png" alt="在这里插入图片描述"></p><h2 id="使用域名"><a href="#使用域名" class="headerlink" title="使用域名"></a>使用域名</h2><p><img src="https://img-blog.csdnimg.cn/d1d8ac935f674f8cbcf45bc48ccad96f.png" alt="在这里插入图片描述"><br>测试是否添加成功<br><code>host -t txt OSSRH-70704.zzq0324.cn</code>;</p><p><a href="https://www.zzq0324.cn/2021/07/16/how-to-deploy-jar-to-maven-central-part1/" target="_blank" rel="external nofollow noopener noreferrer">原文</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次使用redis的keys命令导致redis雪崩的生产事故</title>
      <link href="%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8redis%E7%9A%84keys%E5%91%BD%E4%BB%A4%E5%AF%BC%E8%87%B4redis%E9%9B%AA%E5%B4%A9%E7%9A%84%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85/"/>
      <url>%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8redis%E7%9A%84keys%E5%91%BD%E4%BB%A4%E5%AF%BC%E8%87%B4redis%E9%9B%AA%E5%B4%A9%E7%9A%84%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85/</url>
      
        <content type="html"><![CDATA[<h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>由于需要每时每刻监听三方报错超过十次发送机器人警告，所以每次报错我这边就存入一个（key+时间），同时过期时间为1小时，所以查询当前的一个小时内错误次数，使用 <code>keys key*</code>查询key的数量，就知道错误次数，本来一直没有问题，跑了大半年了，突然有一天redis的cpu100%，直接雪崩，导致客户无法登录，后面排查原因是有个三方一直报错，代码又重试，由于需要机器人提醒(这个时候我们redis key已经超过80w个key),导致一秒钟查上千次询<code>keys</code>命令，最后redis直接爆炸。</p><a id="more"></a><h2 id="官方对keys这个命令的说明"><a href="#官方对keys这个命令的说明" class="headerlink" title="官方对keys这个命令的说明"></a>官方对keys这个命令的说明</h2><p>keys的时间复杂度是O(N)，N为执行该命令下的数据库的key的数量，常数。<br>redis扫描key的速度很快，在入门笔记本大约是40毫秒100w个。<br>警告⚠️：keys用在生产环境只能以极低频率执行。 在大数据库执行时会出现灾难性的性能。如果需要查询某些key，考虑使用SCAN或者sets。</p><h2 id="keys命令为什么会这么慢呢？"><a href="#keys命令为什么会这么慢呢？" class="headerlink" title="keys命令为什么会这么慢呢？"></a>keys命令为什么会这么慢呢？</h2><p>(1) Redis是NoSQL型数据库，以hash数据结构存储的，所以才能实现高效的数据查询。而hash结构对于精确查找是非常快的，对于模糊查询，则无能为力。<br>(2) Redis的命令执行是单线程的，同一时间只能执行单个命令。单一长时间命令会堵塞后续。(可以通过debug sleep 0.1100ms 模拟执行长时间命令)<br>以上两点造成了KEYS进行key查询需要遍历当前db的所有数据，以及当该命令执行完成的时候后续命令都会被堵塞。<br>因此在redis中执行的命令，尽量避免长时间堵塞命令。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>后面实在没有办法退而求其次，把所有的<code>keys</code>命令移除了，只是简单记录次数了，一直自己自增，半个小时自动过期。还有一种方法就是保存数据库，每进来一条错误日志，就保存一次，按照时间查询这样也可以达到上面的效果，每天或者每月去清理之前的旧数据，防止数据太多。</p><p>看网上推荐使用<code>Scan</code>来替换<code>keys</code>，它是增量地迭代 ，它们每次执行都只会返回少量元素，不会阻塞服务器， 所以这些命令可以用于生产环境， 而不会出现像 KEYS 命令、 SMEMBERS 命令带来的问题。但是会出现.同一个元素可能会被返回多次，所以就没有使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql事务死锁和连接池数不够导致node项目假死</title>
      <link href="postgresql%E4%BA%8B%E5%8A%A1%E6%AD%BB%E9%94%81%E5%92%8C%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%95%B0%E4%B8%8D%E5%A4%9F%E5%AF%BC%E8%87%B4node%E9%A1%B9%E7%9B%AE%E5%81%87%E6%AD%BB/"/>
      <url>postgresql%E4%BA%8B%E5%8A%A1%E6%AD%BB%E9%94%81%E5%92%8C%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%95%B0%E4%B8%8D%E5%A4%9F%E5%AF%BC%E8%87%B4node%E9%A1%B9%E7%9B%AE%E5%81%87%E6%AD%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>客户量起来，创建订单越来越多，因为之前是用typeOrm的默认配置，看了源码，发现默认配置是10，所以导致客户请求不了。后来解决了连接池问题，又出现数据库死锁，导致数据库cpu直接100%，又导致客户订单创建不了，产生生产损失。</p><a id="more"></a><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="线索池问题"><a href="#线索池问题" class="headerlink" title="线索池问题"></a>线索池问题</h3><ol><li>排查<br>当时出现node程序假死，但是数据库，redis都是正常，后面排查连接数是否正常，发现连接数很少，当时很懵，不知道为啥，后面想到typeorm连接池配置，发现了问题。</li></ol><p>修改typeorm配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keepAlive: <span class="literal">true</span>,</span><br><span class="line">extra: &#123;</span><br><span class="line">  poolSize: <span class="number">800</span>,</span><br><span class="line">  mixins: <span class="number">0</span>,</span><br><span class="line">  connectTimeoutMS: <span class="number">60000</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>查询数据库允许的最大连接数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> max_connections;</span><br></pre></td></tr></table></figure></li><li><p>查看当前连接数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分组求和</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*), usename <span class="keyword">from</span> pg_stat_activity <span class="keyword">group</span> <span class="keyword">by</span> usename;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> pg_stat_activity</span><br></pre></td></tr></table></figure></li></ol><h3 id="数据库死锁问题"><a href="#数据库死锁问题" class="headerlink" title="数据库死锁问题"></a>数据库死锁问题</h3><ol><li><p>排查<br>也是因为客户量增加，交易频繁，导致大面积数据库死锁，数据库cpu 100%，影响客户使用，后面百度搜索出现死锁原因，发现原来表加锁顺序问题。</p></li><li><p>什么是数据库死锁<br>在操作系统领域当中，死锁指的是两个或者两个以上的进程在运行的过程中，因为争夺共同的访问资源而相互等待阻塞，最终造成阻碍进程继续执行的一种阻塞现象。那么在数据库领域当中死锁又是怎样的表现形式呢？</p></li></ol><p>如下图所示，假设事务A持有行1的共享锁，事务B持有行2的共享锁，那么此时事务A请求持有行2的排他锁，那么在事务B释放资源之前都处于阻塞等待的状态，同样的事务B请求持有行1的排他锁，在事务A 释放资源之前同样也是处于阻塞等待的状态。也就是说事务 B 完成之后事务 A 才能完成，而事务A的完成又依赖于事务B的完成，这就形成了循环依赖的问题，最终导致死锁情况的发生。</p><p>测试sql 如下（按照步骤执行到第三步就会出现死锁）：<br>sql1:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行第一步</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="string">"user"</span> <span class="keyword">where</span> <span class="string">"id"</span> = <span class="string">'03b44ddb-0813-40c2-bbba-5ca51fc2c57f'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="comment">-- 执行第三步</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="string">"user"</span> <span class="keyword">where</span> <span class="string">"id"</span> = <span class="string">'bfdf2d04-d330-4134-8057-7b77ceaaf8d0'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>sql2:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行第二步</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="string">"user"</span> <span class="keyword">where</span> <span class="string">"id"</span> = <span class="string">'bfdf2d04-d330-4134-8057-7b77ceaaf8d0'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="comment">-- 执行第四步</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="string">"user"</span> <span class="keyword">where</span> <span class="string">"id"</span> = <span class="string">'03b44ddb-0813-40c2-bbba-5ca51fc2c57f'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>死锁排查</li></ol><p>创建视图用于查询死锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_locks_monitor <span class="keyword">as</span>   </span><br><span class="line"><span class="keyword">with</span>    </span><br><span class="line">t_wait <span class="keyword">as</span>    </span><br><span class="line">(    </span><br><span class="line">  <span class="keyword">select</span> a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,   </span><br><span class="line">  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,    </span><br><span class="line">  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name   </span><br><span class="line">    <span class="keyword">from</span> pg_locks a,pg_stat_activity b <span class="keyword">where</span> a.pid=b.pid <span class="keyword">and</span> <span class="keyword">not</span> a.granted   </span><br><span class="line">),   </span><br><span class="line">t_run <span class="keyword">as</span>   </span><br><span class="line">(   </span><br><span class="line">  <span class="keyword">select</span> a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,   </span><br><span class="line">  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,   </span><br><span class="line">  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name   </span><br><span class="line">    <span class="keyword">from</span> pg_locks a,pg_stat_activity b <span class="keyword">where</span> a.pid=b.pid <span class="keyword">and</span> a.granted   </span><br><span class="line">),   </span><br><span class="line">t_overlap <span class="keyword">as</span>   </span><br><span class="line">(   </span><br><span class="line">  <span class="keyword">select</span> r.* <span class="keyword">from</span> t_wait w <span class="keyword">join</span> t_run r <span class="keyword">on</span>   </span><br><span class="line">  (   </span><br><span class="line">    r.locktype <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.locktype <span class="keyword">and</span>   </span><br><span class="line">    r.database <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.database <span class="keyword">and</span>   </span><br><span class="line">    r.relation <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.relation <span class="keyword">and</span>   </span><br><span class="line">    r.page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.page <span class="keyword">and</span>   </span><br><span class="line">    r.tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.tuple <span class="keyword">and</span>   </span><br><span class="line">    r.virtualxid <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.virtualxid <span class="keyword">and</span>   </span><br><span class="line">    r.transactionid <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.transactionid <span class="keyword">and</span>   </span><br><span class="line">    r.classid <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.classid <span class="keyword">and</span>   </span><br><span class="line">    r.objid <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.objid <span class="keyword">and</span>   </span><br><span class="line">    r.objsubid <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">distinct</span> <span class="keyword">from</span> w.objsubid <span class="keyword">and</span>   </span><br><span class="line">    r.pid &lt;&gt; w.pid   </span><br><span class="line">  )    </span><br><span class="line">),    </span><br><span class="line">t_unionall <span class="keyword">as</span>    </span><br><span class="line">(    </span><br><span class="line">  <span class="keyword">select</span> r.* <span class="keyword">from</span> t_overlap r    </span><br><span class="line">  <span class="keyword">union</span> <span class="keyword">all</span>    </span><br><span class="line">  <span class="keyword">select</span> w.* <span class="keyword">from</span> t_wait w    </span><br><span class="line">)    </span><br><span class="line"><span class="keyword">select</span> locktype,datname,relation::regclass,page,tuple,virtualxid,transactionid::<span class="built_in">text</span>,classid::regclass,objid,objsubid,   </span><br><span class="line">string_agg(   </span><br><span class="line"><span class="string">'Pid: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> pid <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> pid::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="keyword">chr</span>(<span class="number">10</span>)||   </span><br><span class="line"><span class="string">'Lock_Granted: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> granted <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> granted::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Mode: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">mode</span> <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> <span class="keyword">mode</span>::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , FastPath: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> fastpath <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> fastpath::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , VirtualTransaction: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> virtualtransaction <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> virtualtransaction::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Session_State: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> state <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> state::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="keyword">chr</span>(<span class="number">10</span>)||   </span><br><span class="line"><span class="string">'Username: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> usename <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> usename::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Database: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> datname <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> datname::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Client_Addr: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> client_addr <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> client_addr::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Client_Port: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> client_port <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> client_port::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Application_Name: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> application_name <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> application_name::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="keyword">chr</span>(<span class="number">10</span>)||    </span><br><span class="line"><span class="string">'Xact_Start: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> xact_start <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> xact_start::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Query_Start: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> query_start <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> query_start::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Xact_Elapse: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> (<span class="keyword">now</span>()-xact_start) <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> (<span class="keyword">now</span>()-xact_start)::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="string">' , Query_Elapse: '</span>||<span class="keyword">case</span> <span class="keyword">when</span> (<span class="keyword">now</span>()-query_start) <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> (<span class="keyword">now</span>()-query_start)::<span class="built_in">text</span> <span class="keyword">end</span>||<span class="keyword">chr</span>(<span class="number">10</span>)||    </span><br><span class="line"><span class="string">'SQL (Current SQL in Transaction): '</span>||<span class="keyword">chr</span>(<span class="number">10</span>)||  </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">query</span> <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'NULL'</span> <span class="keyword">else</span> <span class="keyword">query</span>::<span class="built_in">text</span> <span class="keyword">end</span>,    </span><br><span class="line"><span class="keyword">chr</span>(<span class="number">10</span>)||<span class="string">'--------'</span>||<span class="keyword">chr</span>(<span class="number">10</span>)    </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>    </span><br><span class="line">  (  <span class="keyword">case</span> <span class="keyword">mode</span>    </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'INVALID'</span> <span class="keyword">then</span> <span class="number">0</span>   </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'AccessShareLock'</span> <span class="keyword">then</span> <span class="number">1</span>   </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'RowShareLock'</span> <span class="keyword">then</span> <span class="number">2</span>   </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'RowExclusiveLock'</span> <span class="keyword">then</span> <span class="number">3</span>   </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'ShareUpdateExclusiveLock'</span> <span class="keyword">then</span> <span class="number">4</span>   </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'ShareLock'</span> <span class="keyword">then</span> <span class="number">5</span>   </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'ShareRowExclusiveLock'</span> <span class="keyword">then</span> <span class="number">6</span>   </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'ExclusiveLock'</span> <span class="keyword">then</span> <span class="number">7</span>   </span><br><span class="line">    <span class="keyword">when</span> <span class="string">'AccessExclusiveLock'</span> <span class="keyword">then</span> <span class="number">8</span>   </span><br><span class="line">    <span class="keyword">else</span> <span class="number">0</span>   </span><br><span class="line">  <span class="keyword">end</span>  ) <span class="keyword">desc</span>,   </span><br><span class="line">  (<span class="keyword">case</span> <span class="keyword">when</span> granted <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">end</span>)  </span><br><span class="line">) <span class="keyword">as</span> lock_conflict  </span><br><span class="line"><span class="keyword">from</span> t_unionall   </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>   </span><br><span class="line">locktype,datname,relation,page,tuple,virtualxid,transactionid::<span class="built_in">text</span>,classid,objid,objsubid ;</span><br></pre></td></tr></table></figure><p>执行视图,会出现死锁信息，如下图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v_locks_monitor</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37e2d4b32f6e4b63b05157df55a11aad.png" alt="在这里插入图片描述"></p><p>找到”被阻塞者”,找到pid,如下图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> pid <span class="keyword">from</span> pg_locks <span class="keyword">where</span> <span class="keyword">not</span> granted;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/33656d7f091e4625bcee064516bcc251.png" alt="在这里插入图片描述"></p><p>找到”阻塞者”,可以找到执行的sql,如下图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_stat_activity <span class="keyword">where</span> pid=<span class="number">5432</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f05e9f0a778040118c656086e9ce631e.png" alt="在这里插入图片描述"></p><p>杀死当前死锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_terminate_backend(<span class="number">5432</span>);</span><br></pre></td></tr></table></figure><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>修改正常加锁的顺序之后，就没有出现当前问题了。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://blog.csdn.net/diamond_tao/article/details/124567168" target="_blank" rel="external nofollow noopener noreferrer">PostgreSQL死锁了怎么办？</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pm2启动node项目，内存直接暴增,原因是高IO读写</title>
      <link href="%E4%BD%BF%E7%94%A8pm2%E5%90%AF%E5%8A%A8node%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E6%9A%B4%E5%A2%9E,%E5%8E%9F%E5%9B%A0%E6%98%AF%E9%AB%98IO%E8%AF%BB%E5%86%99/"/>
      <url>%E4%BD%BF%E7%94%A8pm2%E5%90%AF%E5%8A%A8node%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E6%9A%B4%E5%A2%9E,%E5%8E%9F%E5%9B%A0%E6%98%AF%E9%AB%98IO%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<ol><li>出现原因介绍<br>因为我们使用了神策埋点，正好神策过期了，没有及时关闭配置，导致日志上传不了，一直保存在本地，存了上百M的日志，在代码发布的时候需要重启，导致pm2的内容直接超过8G,把服务器直接卡死，等了半个小时了之后 内存慢慢下降，刚开始以为是代码太多，打包内存不够用，升级了服务器内存，还是出现了同样的问题，排查了几天都没有发现。后面使用<code>node-tick</code>才发现原因是神策在上传日志，他里面写的是foreach循环一起上传所有日志，由于有上传不了，又保存在本地。</li></ol><a id="more"></a><ol start="2"><li><p>问题排查<br>安装node-tick方式<code>sudo npm -g install tick</code><br>使用启用的配置文件运行您的应用程序<code>node --prof app.js</code><br>在 CPU 100% 使用一段时间后停止您的应用程序<br>您可以在您的应用目录中看到 v8.log，现在您可以使用 <code>node-tick-processor isolate-0x5138fd0-15431-v8.log</code> 读取它,直接看。但是不方便，推荐直接第3步，存入文件看</p></li><li><p>解析到文件中，查看堆栈信息</p><blockquote><p><code>node --prof-process isolate-0x102884000-14025-v8.log &gt; 11.txt</code></p></blockquote></li></ol><ol start="4"><li>实例 创建一个app.js文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        ++i</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ol><p>执行当前文件 <code>node --prof app.js</code> 跑到cpu特别高的时候 关闭，就会生成一个日志文件<code>isolate-0x102884000-14025-v8.log</code>(文件名字会不一样)；</p><p>解析到文件中 <code>node --prof-process isolate-0x102884000-14025-v8.log &gt; 11.txt</code>;</p><p>查看文件 找到对应的执行的地方</p><p><img src="https://img-blog.csdnimg.cn/5aa3fa4721b146c8a6bb4878b708b7ff.png" alt="在这里插入图片描述"></p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢梁老师让我学习到如果排查此问题！！！</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="http://t.zoukankan.com/flydean-p-14376230.html" target="_blank" rel="external nofollow noopener noreferrer">使用V8和node轻松profile分析nodejs应用程序</a></p><p><a href="https://itecnote.com/tecnote/r-how-to-debug-node-js-causing-100-cpu-usage/" target="_blank" rel="external nofollow noopener noreferrer">Node.js – how to debug node.js causing 100% cpu usage</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU偶现的100%查询</title>
      <link href="CPU%E5%81%B6%E7%8E%B0%E7%9A%84100-%E6%9F%A5%E8%AF%A2/"/>
      <url>CPU%E5%81%B6%E7%8E%B0%E7%9A%84100-%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>在服务器偶然会出现CPU100%时，会出现服务器对外不可用，健康检查也无法相应。</p><blockquote><p>因为是偶现，一般重启后就好了。但是这种时候一般先不要重启，先按如下命令：</p></blockquote><a id="more"></a><h2 id="1-找出node-js-的进程号-top"><a href="#1-找出node-js-的进程号-top" class="headerlink" title="1. 找出node.js 的进程号: top"></a>1. 找出node.js 的进程号: top</h2><p><img src="https://img-blog.csdnimg.cn/08b679d2b3b54662914727f5c9dfbbd0.png" alt="在这里插入图片描述"></p><h2 id="2-进入调试状态：node-inspect-p-pid"><a href="#2-进入调试状态：node-inspect-p-pid" class="headerlink" title="2. 进入调试状态：node inspect -p pid"></a>2. 进入调试状态：node inspect -p pid</h2><p>例如：<code>node inspect -p 22056</code>，你会看到这个提示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug&gt;</span><br></pre></td></tr></table></figure><h2 id="3-然后输入：pause"><a href="#3-然后输入：pause" class="headerlink" title="3. 然后输入：pause"></a>3. 然后输入：pause</h2><p><img src="https://img-blog.csdnimg.cn/e1d8728b0d5b4977b47172834363c266.png" alt="在这里插入图片描述"></p><p>就能找到，当前执行的代码块</p><h2 id="4-根据提示找出对应行的代码"><a href="#4-根据提示找出对应行的代码" class="headerlink" title="4. 根据提示找出对应行的代码"></a>4. 根据提示找出对应行的代码</h2><p><img src="https://img-blog.csdnimg.cn/bccb3c625d094dcd8dd7b6d3f5d6e710.png" alt="在这里插入图片描述"></p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢梁老师让我学习到如果排查此问题！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql日期相关函数</title>
      <link href="postgresql%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/"/>
      <url>postgresql%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Postgresql中string转换成timestamp类型"><a href="#Postgresql中string转换成timestamp类型" class="headerlink" title="Postgresql中string转换成timestamp类型"></a>Postgresql中string转换成timestamp类型</h2><p>Mybatis+Postgresql<br><code>TO_DATE(#{startTime}, &#39;YYYY-MM-DD&#39;)</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AND op_date &lt;![CDATA[&gt;= ]]&gt;  TO_TIMESTAMP(#&#123;beginTime&#125;, 'YYYY-MM-DD HH24:MI:SS')</span><br><span class="line">AND op_date &lt;![CDATA[&lt;= ]]&gt;  TO_TIMESTAMP(#&#123;endTime&#125;, 'YYYY-MM-DD HH24:MI:SS')</span><br></pre></td></tr></table></figure><p>而页面要接收和传递数据需要在javaBean中写如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>,timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line"><span class="keyword">private</span> Timestamp opDate;        <span class="comment">//操作日期</span></span><br></pre></td></tr></table></figure><h2 id="PostgreSQL日期加减"><a href="#PostgreSQL日期加减" class="headerlink" title="PostgreSQL日期加减"></a>PostgreSQL日期加减</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">now</span>()::<span class="built_in">timestamp</span> + <span class="string">'1 year'</span>;  <span class="comment">--当前时间加1年</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">now</span>()::<span class="built_in">timestamp</span> + <span class="string">'1 month'</span>;  <span class="comment">--当前时间加一个月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">now</span>()::<span class="built_in">timestamp</span> + <span class="string">'1 day'</span>;  <span class="comment">--当前时间加一天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">now</span>()::<span class="built_in">timestamp</span> + <span class="string">'1 hour'</span>;  <span class="comment">--当前时间加一个小时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">now</span>()::<span class="built_in">timestamp</span> + <span class="string">'1 min'</span>;  <span class="comment">--当前时间加一分钟</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">now</span>()::<span class="built_in">timestamp</span> + <span class="string">'1 sec'</span>;  <span class="comment">--加一秒钟</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>()::<span class="built_in">timestamp</span> + <span class="string">'1 year 1 month 1 day 1 hour 1 min 1 sec'</span>;  <span class="comment">--加1年1月1天1时1分1秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">now</span>()::<span class="built_in">timestamp</span> + (<span class="keyword">col</span> || <span class="string">' day'</span>)::<span class="built_in">interval</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="comment">--把col字段转换成天 然后相加</span></span><br></pre></td></tr></table></figure><h2 id="PostgreSQL常用当前时间"><a href="#PostgreSQL常用当前时间" class="headerlink" title="PostgreSQL常用当前时间"></a>PostgreSQL常用当前时间</h2><p>PostgreSQL 提供可许多返回当前日期和时间的函数。部分函数按照当前事务的开始时刻返回结果：</p><p>CURRENT_TIME(precision)<br>transaction_timestamp() 感觉这个描述更符合实际情况</p><p>另外部分函数返回实时时间值，在事务中也会随时间变化。<br>statement_timestamp()<br>clock_timestamp()<br>timeofday() 返回的是text字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">''</span>||<span class="keyword">now</span>()::<span class="built_in">timestamp</span> <span class="comment">-- 2022-02-25 14:29:00.189944</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">substring</span>(<span class="string">''</span>||<span class="keyword">now</span>()::<span class="built_in">timestamp</span> <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">19</span>)  <span class="comment">--  2022-02-25 14:25:44</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>() <span class="comment">-- 2022-02-25 14:48:35</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">localtime</span> <span class="comment">-- 14:47:08</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">localtimestamp</span> <span class="comment">-- 2022-02-25 14:47:08</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_date</span> <span class="comment">--  2022-02-25</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_time</span> <span class="comment">--  14:29:13</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_timestamp</span> <span class="comment">-- 2022-02-25 14:45:03</span></span><br><span class="line"><span class="keyword">select</span>  to_char(<span class="keyword">now</span>(), <span class="string">'YYYY-MM-DD HH24:mi:ss:ms'</span>) <span class="comment">--  2022-02-25 14:35:06:569</span></span><br><span class="line"><span class="keyword">select</span> timeofday() <span class="comment">-- 返回的是text字符串,Fri Feb 25 14:43:46.005910 2022 CST</span></span><br><span class="line">此外，还有<span class="keyword">CURRENT_TIME</span>(<span class="keyword">precision</span>)， statement_timestamp()， clock_timestamp()</span><br></pre></td></tr></table></figure><h2 id="PostgreSQL的时间类型"><a href="#PostgreSQL的时间类型" class="headerlink" title="PostgreSQL的时间类型"></a>PostgreSQL的时间类型</h2><h3 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h3><p>PostgreSQL格式化函数提供一套有效的工具用于把各种数据类型(日期/时间、integer、floating point和numeric)转换成格式化的字符串以及反过来从格式化的字符串转换成指定的数据类型。下面列出了这些函数，它们都遵循一个公共的调用习惯：第一个参数是待格式化的值，而第二个是定义输出或输出格式的模板。</p><table><thead><tr><th>函数</th><th>返回类型</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>to_char(timestamp, text)</td><td>text</td><td>把时间戳转换成字串</td><td>to_char(current_timestamp, ‘HH12:MI:SS’)</td></tr><tr><td>to_char(interval, text)</td><td>text</td><td>把时间间隔转为字串</td><td>to_char(interval ‘15h 2m 12s’, ‘HH24:MI:SS’)</td></tr><tr><td>to_char(int, text)</td><td>text</td><td>把整数转换成字串</td><td>to_char(125, ‘999’)</td></tr><tr><td>to_char(double precision, text)</td><td>text</td><td>把实数/双精度数转换成字串</td><td>to_char(125.8::real, ‘999D9’)</td></tr><tr><td>to_char(numeric, text)</td><td>text</td><td>把numeric转换成字串</td><td>to_char(-125.8, ‘999D99S’)</td></tr><tr><td>to_date(text, text)</td><td>date</td><td>把字串转换成日期</td><td>to_date(‘05 Dec 2000’, ‘DD Mon YYYY’)</td></tr><tr><td>to_timestamp(text, text)</td><td>timestamp</td><td>把字串转换成时间戳</td><td>to_timestamp(‘05 Dec 2000’, ‘DD Mon YYYY’)</td></tr><tr><td>to_timestamp(double)</td><td>timestamp</td><td>把UNIX纪元转换成时间戳</td><td>to_timestamp(200120400)</td></tr><tr><td>to_number(text, text)</td><td>numeric</td><td>把字串转换成numeric</td><td>to_number(‘12,454.8-‘, ‘99G999D9S’)</td></tr></tbody></table><h3 id="日期-时间格式化的模式"><a href="#日期-时间格式化的模式" class="headerlink" title="日期/时间格式化的模式"></a>日期/时间格式化的模式</h3><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>HH</td><td>一天的小时数(01-12)</td></tr><tr><td>HH12</td><td>一天的小时数(01-12)</td></tr><tr><td>HH24</td><td>一天的小时数(00-23)</td></tr><tr><td>MI</td><td>分钟(00-59)</td></tr><tr><td>SS</td><td>秒(00-59)</td></tr><tr><td>MS</td><td>毫秒(000-999)</td></tr><tr><td>US</td><td>微秒(000000-999999)</td></tr><tr><td>AM</td><td>正午标识(大写)</td></tr><tr><td>Y,YYY</td><td>带逗号的年(4和更多位)</td></tr><tr><td>YYYY</td><td>年(4和更多位)</td></tr><tr><td>YYY</td><td>年的后三位</td></tr><tr><td>YY</td><td>年的后两位</td></tr><tr><td>Y</td><td>年的最后一位</td></tr><tr><td>MONTH</td><td>全长大写月份名(空白填充为9字符)</td></tr><tr><td>Month</td><td>全长混合大小写月份名(空白填充为9字符)</td></tr><tr><td>month</td><td>全长小写月份名(空白填充为9字符)</td></tr><tr><td>MON</td><td>大写缩写月份名(3字符)</td></tr><tr><td>Mon</td><td>缩写混合大小写月份名(3字符)</td></tr><tr><td>mon</td><td>小写缩写月份名(3字符)</td></tr><tr><td>MM</td><td>月份号(01-12)</td></tr><tr><td>DAY</td><td>全长大写日期名(空白填充为9字符)</td></tr><tr><td>Day</td><td>全长混合大小写日期名(空白填充为9字符)</td></tr><tr><td>day</td><td>全长小写日期名(空白填充为9字符)</td></tr><tr><td>DY</td><td>缩写大写日期名(3字符)</td></tr><tr><td>Dy</td><td>缩写混合大小写日期名(3字符)</td></tr><tr><td>dy</td><td>缩写小写日期名(3字符)</td></tr><tr><td>DDD</td><td>一年里的日子(001-366)</td></tr><tr><td>DD</td><td>一个月里的日子(01-31)</td></tr><tr><td>D</td><td>一周里的日子(1-7；周日是1)</td></tr><tr><td>W</td><td>一个月里的周数(1-5)(第一周从该月第一天开始)</td></tr><tr><td>WW</td><td>一年里的周数(1-53)(第一周从该年的第一天开始)</td></tr></tbody></table><h3 id="数值格式化的模板模式"><a href="#数值格式化的模板模式" class="headerlink" title="数值格式化的模板模式"></a>数值格式化的模板模式</h3><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>9</td><td>带有指定数值位数的值</td></tr><tr><td>0</td><td>带前导零的值</td></tr><tr><td>.(句点)</td><td>小数点</td></tr><tr><td>,(逗号)</td><td>分组(千)分隔符</td></tr><tr><td>PR</td><td>尖括号内负值</td></tr><tr><td>S</td><td>带符号的数值</td></tr><tr><td>L</td><td>货币符号</td></tr><tr><td>D</td><td>小数点</td></tr><tr><td>G</td><td>分组分隔符</td></tr><tr><td>MI</td><td>在指明的位置的负号(如果数字 &lt; 0)</td></tr><tr><td>PL</td><td>在指明的位置的正号(如果数字 &gt; 0)</td></tr><tr><td>SG</td><td>在指明的位置的正/负号</td></tr></tbody></table><h2 id="时间-日期函数和操作符"><a href="#时间-日期函数和操作符" class="headerlink" title="时间/日期函数和操作符"></a>时间/日期函数和操作符</h2><h3 id="下面是PostgreSQL中支持的时间-日期操作符的列表："><a href="#下面是PostgreSQL中支持的时间-日期操作符的列表：" class="headerlink" title="下面是PostgreSQL中支持的时间/日期操作符的列表："></a>下面是PostgreSQL中支持的时间/日期操作符的列表：</h3><table><thead><tr><th>操作符</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>date ‘2001-09-28’ + integer ‘7’</td><td>date ‘2001-10-05’</td></tr><tr><td>+</td><td>date ‘2001-09-28’ + interval ‘1 hour’</td><td>timestamp ‘2001-09-28 01:00’</td></tr><tr><td>+</td><td>date ‘2001-09-28’ + time ‘03:00’</td><td>timestamp ‘2001-09-28 03:00’</td></tr><tr><td>+</td><td>interval ‘1 day’ + interval ‘1 hour’</td><td>interval ‘1 day 01:00’</td></tr><tr><td>+</td><td>timestamp ‘2001-09-28 01:00’ + interval ‘23 hours’</td><td>timestamp ‘2001-09-29 00:00’</td></tr><tr><td>+</td><td>time ‘01:00’ + interval ‘3 hours’</td><td>time ‘04:00’</td></tr><tr><td>-</td><td>- interval ‘23 hours’</td><td>interval ‘-23:00’</td></tr><tr><td>-</td><td>date ‘2001-10-01’ - date ‘2001-09-28’</td><td>integer ‘3’</td></tr><tr><td>-</td><td>date ‘2001-10-01’ - integer ‘7’</td><td>date ‘2001-09-24’</td></tr><tr><td>-</td><td>date ‘2001-09-28’ - interval ‘1 hour’</td><td>timestamp ‘2001-09-27 23:00’</td></tr><tr><td>-</td><td>time ‘05:00’ - time ‘03:00’</td><td>interval ‘02:00’</td></tr><tr><td>-</td><td>time ‘05:00’ - interval ‘2 hours’</td><td>time ‘03:00’</td></tr><tr><td>-</td><td>timestamp ‘2001-09-28 23:00’ - interval ‘23 hours’</td><td>timestamp ‘2001-09-28 00:00’</td></tr><tr><td>-</td><td>interval ‘1 day’ - interval ‘1 hour’</td><td>interval ‘23:00’</td></tr><tr><td>-</td><td>timestamp ‘2001-09-29 03:00’ - timestamp ‘2001-09-27 12:00’</td><td>interval ‘1 day 15:00’</td></tr><tr><td>*</td><td>interval ‘1 hour’ * double precision ‘3.5’</td><td>interval ‘03:30’</td></tr><tr><td>/</td><td>interval ‘1 hour’ / double precision ‘1.5’</td><td>interval ‘00:40’</td></tr></tbody></table><h3 id="日期-时间函数"><a href="#日期-时间函数" class="headerlink" title="日期/时间函数"></a>日期/时间函数</h3><table><thead><tr><th>函数</th><th>返回类型</th><th>描述</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>age(timestamp, timestamp)</td><td>interval</td><td>减去参数，生成一个使用年、月的”符号化”的结果</td><td>age(‘2001-04-10’, timestamp ‘1957-06-13’)</td><td>43 years 9 mons 27 days</td></tr><tr><td>age(timestamp)</td><td>interval</td><td>从current_date减去得到的数值</td><td>age(timestamp ‘1957-06-13’)</td><td>43 years 8 mons 3 days</td></tr><tr><td>current_date</td><td>date</td><td>今天的日期</td><td></td><td></td></tr><tr><td>current_time</td><td>time</td><td>现在的时间</td><td></td><td></td></tr><tr><td>current_timestamp</td><td>timestamp</td><td>日期和时间</td><td></td><td></td></tr><tr><td>date_part(text, timestamp)</td><td>double</td><td>获取子域(等效于extract)</td><td>date_part(‘hour’, timestamp ‘2001-02-16 20:38:40’)</td><td>20</td></tr><tr><td>date_part(text, interval)</td><td>double</td><td>获取子域(等效于extract)[可以获取数据表中某个日期字段的部分日期或时间]</td><td>date_part(‘month’, interval ‘2 years 3 months’)</td><td>3</td></tr><tr><td>date_trunc(text, timestamp)</td><td>timestamp</td><td>截断成指定的精度</td><td>date_trunc(‘hour’, timestamp ‘2001-02-16 20:38:40’)</td><td>2001-02-16 20:00:00+00</td></tr><tr><td>extract(field from timestamp)</td><td>double</td><td>获取子域</td><td>extract(hour from timestamp ‘2001-02-16 20:38:40’)</td><td>20</td></tr><tr><td>extract(field from interval)</td><td>double</td><td>获取子域</td><td>extract(month from interval ‘2 years 3 months’)</td><td>3</td></tr><tr><td>localtime</td><td>time</td><td>今日的时间</td><td></td><td></td></tr><tr><td>localtimestamp</td><td>timestamp</td><td>日期和时间</td><td></td><td></td></tr><tr><td>now()</td><td>timestamp</td><td>当前的日期和时间(等效于 current_timestamp)</td><td></td><td></td></tr><tr><td>timeofday()</td><td>text</td><td>当前日期和时间</td><td></td><td></td></tr></tbody></table><h3 id="日期-时间差（EXTRACT-date-part-epoch）"><a href="#日期-时间差（EXTRACT-date-part-epoch）" class="headerlink" title="日期/时间差（EXTRACT/date_part/epoch）"></a>日期/时间差（EXTRACT/date_part/epoch）</h3><table><thead><tr><th>域</th><th>描述</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>CENTURY</td><td>世纪</td><td>EXTRACT(CENTURY FROM TIMESTAMP ‘2000-12-16 12:21:13’);</td><td>20</td></tr><tr><td>DAY</td><td>(月分)里的日期域(1-31)</td><td>EXTRACT(DAY from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>16</td></tr><tr><td>DECADE</td><td>年份域除以10</td><td>EXTRACT(DECADE from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>200</td></tr><tr><td>DOW</td><td>每周的星期号(0-6；星期天是0) (仅用于timestamp)</td><td>EXTRACT(DOW FROM TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>5</td></tr><tr><td>DOY</td><td>一年的第几天(1 -365/366) (仅用于 timestamp)</td><td>EXTRACT(DOY from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>47</td></tr><tr><td>HOUR</td><td>小时域(0-23)</td><td>EXTRACT(HOUR from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>20</td></tr><tr><td>MICROSECONDS</td><td>秒域，包括小数部分，乘以 1,000,000。</td><td>EXTRACT(MICROSECONDS from TIME ‘17:12:28.5’);</td><td>28500000</td></tr><tr><td>MILLENNIUM</td><td>千年</td><td>EXTRACT(MILLENNIUM from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>3</td></tr><tr><td>MILLISECONDS</td><td>秒域，包括小数部分，乘以 1000。</td><td>EXTRACT(MILLISECONDS from TIME ‘17:12:28.5’);</td><td>28500</td></tr><tr><td>MINUTE</td><td>分钟域(0-59)</td><td>EXTRACT(MINUTE from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>38</td></tr><tr><td>MONTH</td><td>对于timestamp数值，它是一年里的月份数(1-12)；对于interval数值，它是月的数目，然后对12取模(0-11)</td><td>EXTRACT(MONTH from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>2</td></tr><tr><td>QUARTER</td><td>该天所在的该年的季度(1-4)(仅用于 timestamp)</td><td>EXTRACT(QUARTER from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>1</td></tr><tr><td>SECOND</td><td>秒域，包括小数部分(0-59[1])</td><td>EXTRACT(SECOND from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>40</td></tr><tr><td>WEEK</td><td>该天在所在的年份里是第几周。</td><td>EXTRACT(WEEK from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>7</td></tr><tr><td>YEAR</td><td>年份域</td><td>EXTRACT(YEAR from TIMESTAMP ‘2001-02-16 20:38:40’);</td><td>2001</td></tr></tbody></table><h4 id="相对时间差–取自域"><a href="#相对时间差–取自域" class="headerlink" title="相对时间差–取自域"></a>相对时间差–取自域</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXTRACT</span>(EPOCH <span class="keyword">FROM</span> (<span class="built_in">TIMESTAMP</span> <span class="string">'2022-02-18 16:50:23'</span>- <span class="built_in">TIMESTAMP</span> <span class="string">'2022-02-18 16:49:23'</span>));                 <span class="comment">--60</span></span><br><span class="line"><span class="keyword">SELECT</span> date_part(<span class="string">'MINUTE'</span>,<span class="keyword">cast</span>(<span class="string">'2022-02-18 16:50:23'</span> <span class="keyword">as</span> <span class="built_in">TIMESTAMP</span>)-<span class="keyword">cast</span>(<span class="string">'2022-02-18 16:49:23'</span> <span class="keyword">as</span> <span class="built_in">TIMESTAMP</span>));    <span class="comment">--1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期之差（绝对）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">round</span>(date_part(<span class="string">'epoch'</span>, <span class="built_in">TIMESTAMP</span>​​​​​​​​​​​​​​ <span class="string">'2020-05-05 11:11:20'</span> - <span class="built_in">TIMESTAMP</span> <span class="string">'2020-05-05 10:10:10'</span>));   <span class="comment">--获取秒差 3670=3600+60+10</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">round</span>(date_part(<span class="string">'epoch'</span>, <span class="built_in">TIMESTAMP</span> <span class="string">'2020-05-05 11:11:20'</span> - <span class="built_in">TIMESTAMP</span> <span class="string">'2020-05-05 10:10:10'</span>)/<span class="number">60</span>);   <span class="comment">--获取分钟差 61=60+1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">round</span>(date_part(<span class="string">'epoch'</span>, <span class="built_in">TIMESTAMP</span> <span class="string">'2020-05-05 12:11:20'</span> - <span class="built_in">TIMESTAMP</span> <span class="string">'2020-05-05 10:10:10'</span>)/<span class="number">60</span>/<span class="number">60</span>);    <span class="comment">--获取小时差 2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Date</span>(<span class="string">'2022-04-02'</span>) - <span class="built_in">Date</span>(<span class="string">'2022-02-01'</span>);    <span class="comment">--获取天数差 60=31+28+1</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> age(<span class="built_in">TIMESTAMP</span> <span class="string">'2022-04-05'</span>,<span class="built_in">TIMESTAMP</span> <span class="string">'2021-02-04'</span>)) * <span class="number">12</span>  + <span class="keyword">extract</span>(<span class="keyword">MONTH</span> <span class="keyword">from</span> age(<span class="built_in">TIMESTAMP</span> <span class="string">'2022-04-05'</span>,<span class="built_in">TIMESTAMP</span> <span class="string">'2021-02-04'</span>));    <span class="comment">--获取月份差 14=12+2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> age(<span class="built_in">TIMESTAMP</span> <span class="string">'2022-07-08'</span>,<span class="built_in">TIMESTAMP</span> <span class="string">'2014-07-07'</span>));   <span class="comment">--获取年份差  8</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> age(<span class="built_in">TIMESTAMP</span> <span class="string">'2022-07-07'</span>,<span class="built_in">TIMESTAMP</span> <span class="string">'2014-07-07'</span>));   <span class="comment">--获取年份差  8</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> age(<span class="built_in">TIMESTAMP</span> <span class="string">'2022-07-06'</span>,<span class="built_in">TIMESTAMP</span> <span class="string">'2014-07-07'</span>));   <span class="comment">--获取年份差  7</span></span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://blog.csdn.net/lixinkuan328/article/details/107969398" target="_blank" rel="external nofollow noopener noreferrer">原文链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql-raise函数</title>
      <link href="postgresql-raise%E5%87%BD%E6%95%B0/"/>
      <url>postgresql-raise%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>raise函数<br>在PostgreSQL中，该函数用于打印字符串，类似于Java中的System.out.println()，Oracle中的dbms_output.put_line()。</p><p>用法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raise notice 'My name is %, I am a %.', 'Lewis', 'coder';</span><br></pre></td></tr></table></figure><p>以上sql会在控制台输出My name is Lewis, I am a coder.。如果是在DBeaver里使用该函数，则会在output的tab里输出字符串。</p><p>raise后面的notice是级别，一共有debug/log/info/notice/warning/exception这些级别，可以任意指定一个级别。有些类似于Java里的日志框架，比如Log4j2之类的。</p><p>接着级别后面的是要输出的字符串参数，用一对单引号包括起来。这个字符串支持占位符的写法，也就是%这个字符。如果在字符串里使用了这个%，那么会自动使用字符串参数后面的参数来替换掉这里的%。有多少个占位符，就需要在第一个字符串参数后面加上多少个对应的参数。</p><p>这个占位符输出的用法，也和Log4j2类似。</p><p>由raise打印出来的信息可以输出到服务端日志，也可以输出到客户端，亦或者同时输出到二者。这个是由log_min_messages和client_min_messages两个参数控制的，这两个参数在数据库初始化时用到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POSTGRESQL存储过程（PROCEDURES）和函数（FUNCTIONS）</title>
      <link href="POSTGRESQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88PROCEDURES%EF%BC%89%E5%92%8C%E5%87%BD%E6%95%B0%EF%BC%88FUNCTIONS%EF%BC%89/"/>
      <url>POSTGRESQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88PROCEDURES%EF%BC%89%E5%92%8C%E5%87%BD%E6%95%B0%EF%BC%88FUNCTIONS%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在pg中存储过程和函数创建方式一样，写法都差不多<br>区别：<br>存储过程（Procedures）：无返回值（返回值为void）的函数（function）。<br>函数（functions）：有返回值（返回值非void）的函数（function）。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> <span class="keyword">if</span> <span class="keyword">exists</span> [函数名];</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> [函数名] ([参数]) <span class="keyword">returns</span> [返回值] <span class="keyword">as</span></span><br><span class="line"> $$</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">  [变量声明]</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  [<span class="keyword">sql</span>逻辑]</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line">language 'plpgsql';</span><br></pre></td></tr></table></figure><p>推荐使用Navicat来创建，如图：<br><img src="https://img-blog.csdnimg.cn/9ccc5b96a00f4630a807bd6b4f5e0e5e.png" alt="在这里插入图片描述"></p><h3 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> <span class="string">"public"</span>.<span class="string">"update_us_businessoperationperiod"</span>()</span><br><span class="line">  <span class="keyword">RETURNS</span> <span class="string">"pg_catalog"</span>.<span class="string">"void"</span> <span class="keyword">AS</span> $<span class="keyword">BODY</span>$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"><span class="comment">-- 定义变量</span></span><br><span class="line">business_detail <span class="built_in">record</span>;</span><br><span class="line">current_date_n timestamp;</span><br><span class="line">current_date_s VARCHAR;</span><br><span class="line">num int :=0;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">-- 循环需要处理的数据</span></span><br><span class="line">   <span class="keyword">FOR</span> business_detail <span class="keyword">IN</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">"cddKycBusinessDetail"</span> <span class="keyword">WHERE</span> <span class="string">"kycId"</span> = <span class="string">'7145720d-e57b-4b4e-8b97-a97662520f35'</span>) <span class="keyword">LOOP</span></span><br><span class="line"> <span class="comment">-- 获取注册时间转时间戳</span></span><br><span class="line"> current_date_n := TO_TIMESTAMP(business_detail.<span class="string">"businessRegistrationDate"</span>, <span class="string">'YYYY-MM-DD'</span>);</span><br><span class="line"> <span class="comment">-- 注册时间加一年</span></span><br><span class="line"> current_date_n := current_date_n + '1 year';</span><br><span class="line"> <span class="comment">-- 时间戳转字符串</span></span><br><span class="line"> current_date_s := to_char(current_date_n, 'YYYY-MM-DD');</span><br><span class="line"> </span><br><span class="line"> num := num + 1;</span><br><span class="line"> <span class="comment">-- 更改有效时间</span></span><br><span class="line"> <span class="keyword">UPDATE</span> <span class="string">"cddKycBusinessDetail"</span> <span class="keyword">SET</span> <span class="string">"businessOperationPeriod"</span> = current_date_s <span class="keyword">WHERE</span> <span class="string">"id"</span> = business_detail.<span class="string">"id"</span>;</span><br><span class="line"> <span class="comment">-- 打印</span></span><br><span class="line"> raise notice 'cddKycBusinessDetail id:%, %, %, %.',business_detail."id", business_detail."businessRegistrationDate", current_date_s, num;</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line">RETURN;</span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line">$<span class="keyword">BODY</span>$</span><br><span class="line">  <span class="keyword">LANGUAGE</span> plpgsql VOLATILE</span><br><span class="line">  <span class="keyword">COST</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="string">"public"</span>.<span class="string">"update_rate"</span>(account_ids <span class="built_in">text</span>[])</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">void</span> <span class="keyword">AS</span> $<span class="keyword">BODY</span>$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">account_id <span class="built_in">text</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- Routine body goes here...</span></span><br><span class="line">   FOREACH account_id <span class="keyword">IN</span> <span class="built_in">ARRAY</span> account_ids                             </span><br><span class="line">    <span class="keyword">LOOP</span>                                                    </span><br><span class="line">        <span class="keyword">raise</span> <span class="keyword">notice</span> <span class="string">'accountId:%'</span>, account_id;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;   </span><br><span class="line">RETURN;</span><br><span class="line"><span class="keyword">END</span>$<span class="keyword">BODY</span>$</span><br><span class="line"><span class="keyword">LANGUAGE</span> plpgsql</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行</span></span><br><span class="line"><span class="keyword">SELECT</span> update_rate(<span class="built_in">ARRAY</span>[<span class="string">'fc3827ec-58e9-4f42-a661-a3aa658c3e61'</span>])</span><br></pre></td></tr></table></figure><h3 id="存储过程使用"><a href="#存储过程使用" class="headerlink" title="存储过程使用"></a>存储过程使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> <span class="string">"public"</span>.<span class="string">"update_us_businessoperationperiod_2"</span>()</span><br><span class="line"> <span class="keyword">AS</span> $<span class="keyword">BODY</span>$</span><br><span class="line"> <span class="keyword">DECLARE</span></span><br><span class="line"><span class="comment">-- 定义变量</span></span><br><span class="line">business_detail <span class="built_in">record</span>;</span><br><span class="line">current_date_n timestamp;</span><br><span class="line">current_date_s VARCHAR;</span><br><span class="line">num int :=0;</span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 循环需要处理的数据</span></span><br><span class="line">   <span class="keyword">FOR</span> business_detail <span class="keyword">IN</span> (<span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="string">"cddKycBusinessDetail"</span> <span class="keyword">where</span> <span class="string">"kycId"</span> <span class="keyword">in</span> (<span class="keyword">SELECT</span> <span class="string">"id"</span> <span class="keyword">from</span> <span class="string">"cddKyc"</span> <span class="keyword">where</span> <span class="string">"isLatest"</span> = <span class="literal">true</span> <span class="keyword">and</span> <span class="keyword">status</span> != <span class="string">'Pending'</span>) <span class="keyword">and</span> <span class="string">"registrationRegion"</span> = <span class="string">'US'</span> <span class="keyword">and</span> <span class="string">"businessOperationPeriod"</span> = <span class="string">''</span>) <span class="keyword">LOOP</span></span><br><span class="line"> <span class="keyword">IF</span> business_detail.<span class="string">"businessRegistrationDate"</span> ~ <span class="string">'.000z'</span> <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 获取注册时间转时间戳 2022-05-30T16:00:00.000Z</span></span><br><span class="line">    current_date_n := TO_TIMESTAMP(business_detail.<span class="string">"businessRegistrationDate"</span>, <span class="string">'YYYY-MM-DDTHH24:MI:SS.000z'</span>);</span><br><span class="line"> ELSE</span><br><span class="line">    <span class="comment">-- 获取注册时间转时间戳 2022-05-30</span></span><br><span class="line">    current_date_n := TO_TIMESTAMP(business_detail."businessRegistrationDate", 'YYYY-MM-DD');</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"> <span class="comment">-- 注册时间加一年</span></span><br><span class="line"> current_date_n := current_date_n + '1 year';</span><br><span class="line"> <span class="comment">-- 时间戳转字符串</span></span><br><span class="line"> current_date_s := to_char(current_date_n, 'YYYY-MM-DD');</span><br><span class="line"> </span><br><span class="line"> num := num + 1;</span><br><span class="line"> <span class="comment">-- 更改有效时间</span></span><br><span class="line"> <span class="keyword">UPDATE</span> <span class="string">"cddKycBusinessDetail"</span> <span class="keyword">SET</span> <span class="string">"businessOperationPeriod"</span> = current_date_s <span class="keyword">WHERE</span> <span class="string">"id"</span> = business_detail.<span class="string">"id"</span>;</span><br><span class="line"> <span class="comment">-- 打印</span></span><br><span class="line"> raise notice 'cddKycBusinessDetail id:%, %, %, %.',business_detail."id", business_detail."businessRegistrationDate", current_date_s, num;</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>$<span class="keyword">BODY</span>$</span><br><span class="line">  <span class="keyword">LANGUAGE</span> plpgsql</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> <span class="string">"public"</span>.<span class="string">"update_rate"</span>()</span><br><span class="line"> <span class="keyword">AS</span> $<span class="keyword">BODY</span>$</span><br><span class="line"> <span class="keyword">DECLARE</span></span><br><span class="line">account_ids <span class="built_in">text</span>[];</span><br><span class="line">account_id text;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 直接从表中查数据进行循环</span></span><br><span class="line">account_ids := <span class="built_in">ARRAY</span>(<span class="keyword">SELECT</span> <span class="string">"id"</span> <span class="keyword">from</span> <span class="keyword">account</span>)::<span class="built_in">text</span>[];</span><br><span class="line"></span><br><span class="line">FOREACH account_id IN ARRAY account_ids                             </span><br><span class="line">    LOOP                                                    </span><br><span class="line">        raise notice 'accountId:%', account_id;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>$<span class="keyword">BODY</span>$</span><br><span class="line">  <span class="keyword">LANGUAGE</span> plpgsql</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> <span class="string">"public"</span>.<span class="string">"update_rate"</span>()</span><br><span class="line"> <span class="keyword">AS</span> $<span class="keyword">BODY</span>$</span><br><span class="line"> <span class="keyword">DECLARE</span></span><br><span class="line">account_ids <span class="built_in">text</span>[];</span><br><span class="line">account_id text;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- Routine body goes here...</span></span><br><span class="line">account_ids := <span class="built_in">ARRAY</span>[<span class="string">'fc3827ec-58e9-4f42-a661-a3aa658c3e61'</span>];</span><br><span class="line"></span><br><span class="line">FOREACH account_id IN ARRAY account_ids                             </span><br><span class="line">    LOOP                                                    </span><br><span class="line">        raise notice 'accountId:%', account_id;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>$<span class="keyword">BODY</span>$</span><br><span class="line">  <span class="keyword">LANGUAGE</span> plpgsql</span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="http://www.postgres.cn/docs/10/xplang.html" target="_blank" rel="external nofollow noopener noreferrer">postgresql 官方文档</a><br><a href="https://www.wjc66.cn/postgresql-raise函数/" target="_blank" rel="external nofollow noopener noreferrer">postgresql  raise函数</a><br><a href="https://www.wjc66.cn/postgresql日期相关函数/" target="_blank" rel="external nofollow noopener noreferrer">postgresql日期相关函数</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript装饰器</title>
      <link href="TypeScript%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>TypeScript%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript-装饰器（decorators）"><a href="#TypeScript-装饰器（decorators）" class="headerlink" title="TypeScript 装饰器（decorators）"></a>TypeScript 装饰器（decorators）</h2><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>随着 TypeScript 和 ES6 里引入了类，在一些场景下我们需要额外的特性来支持标注或修改类及其成员。 装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式</p><p>若要启用实验性的装饰器特性，你必须在命令行或 tsconfig.json 里启用 experimentalDecorators 编译器选项</p><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。它可以在不修改代码自身的前提下，给已有代码增加额外的行为</p><a id="more"></a><h4 id="如何定义装饰器"><a href="#如何定义装饰器" class="headerlink" title="如何定义装饰器"></a>如何定义装饰器</h4><p>装饰器本身其实就是一个函数，理论上忽略参数的话，任何函数都可以当做装饰器使用。例：<br><img src="https://img-blog.csdnimg.cn/b395d828580548309bb20db21cadb236.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/01e5db190c6045b58ef392621507d510.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6f0f4a6744684de18576ad682185b018.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这个注解也称 <code>JavaScript中函数柯里化特性</code></p><p><img src="https://img-blog.csdnimg.cn/a84781a59e6d4c7686eebb4a0d300c8f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="装饰器执行时机"><a href="#装饰器执行时机" class="headerlink" title="装饰器执行时机"></a>装饰器执行时机</h4><p>修饰器对类的行为的改变，是代码编译时发生的（不是 TypeScript 编译，而是 js 在执行机中编译阶段），而不是在运行时。这意味着，修饰器能在编译阶段运行代码。也就是说，修饰器本质就是编译时执行的函数。<br>在 Node.js 环境中模块一加载时就会执行</p><h3 id="五种装饰器"><a href="#五种装饰器" class="headerlink" title="五种装饰器"></a>五种装饰器</h3><p>类装饰器、属性装饰器、方法装饰器、访问器装饰器、参数装饰器；</p><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><p>应用于类构造函数，其参数是类的构造函数。<br>注意 class 并不是像 Java 那种强类型语言中的类，而是 JavaScript 构造函数的语法糖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类装饰器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Class2Decorator = (options?: any): <span class="function"><span class="params">ClassDecorator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: object</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是类装饰器，我跑起来了"</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(<span class="string">"SCOPE_OPTIONS_METADATA"</span>, options, target);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1de912e5b3d8492b974e4bcf3249bfe2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><p>属性装饰器表达式会在运行时当作函数被调用，传入下列 2 个参数：</p><p>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>2、成员的名字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性装饰器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PropertyDecorator = <span class="function">(<span class="params">value: string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: object, key: string | symbol</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是属性装饰器，我跑起来了"</span>, key);</span><br><span class="line">    target[key] = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ac99883d853a401badf8d24d44181880.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h4><p>它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。<br>方法装饰会在运行时传入下列 3 个参数：</p><p>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>2、成员的名字。<br>3、成员的属性描述符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 方法装饰器</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">export</span> const MethodDecorator = (options?: any): MethodDecorator =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> (target: any, key?: any, descriptor?: PropertyDescriptor) =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'我是方法装饰器，我跑起来了'</span>, key);</span><br><span class="line">    Reflect.defineMetadata(`MethodDecorator`, options, target?.constructor);</span><br><span class="line"></span><br><span class="line">    const oldFunc = descriptor.value;</span><br><span class="line">    descriptor.value = async (...args: any) =&gt; &#123;</span><br><span class="line">      <span class="built_in">let</span> result: any;</span><br><span class="line">      try &#123;</span><br><span class="line">        console.log(<span class="string">'拿到方法的参数==============&gt;'</span>, args);</span><br><span class="line">        result = await oldFunc.apply(this, args);</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37e21ec40bcb4358918b26b704737476.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h4><p>在 js 中类中（Object）中的属性有 4 个描述起行为的特性：<br>Configurable:表示能否通过 delete 删除属性从而重新定义属性；<br>Enumerable：表示能否通过 for-in 循环返回属性<br>writable：表示能否修改属性的值<br>Value：包含这个属性的数据值（个人认为其作用就是赋值）<br>以上四个属性在不显示调用 Object.defineProperty()的时候，前三个默认值都为 true，而 value 为你自己设定的值，如果不设定的话则为 undefined。<br>而其中最特殊的则是 configurable，根据《javascript 高级程序设计（第三版）》所说：一旦把该属性定义为 false 之后，那么除了 writable 之外，其他所有的属性都无法再修改。</p><blockquote><p>注意 TypeScript 不允许同时装饰一个成员的 get 和 set 访问器。取而代之的是，一个成员的所有装饰的必须应用在文档顺序的第一个访问器上。这是因为，在装饰器应用于一个属性描述符时，它联合了 get 和 set 访问器，而不是分开声明的。</p></blockquote><blockquote><p>对比结果：方法装饰器的 descriptor 有 value 和 witable 属性，但没有 get 和 set 属性；访问器装饰器有 get 和 set 属性，但没有 value 和 witable 属性。</p></blockquote><ol><li>访问器注解<br><img src="https://img-blog.csdnimg.cn/487c127d7afa40d085ca6575dbcafd7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>普通方法注解<br><img src="https://img-blog.csdnimg.cn/35b8b857e03a4ee1b8e11a0acb3f78c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ol><h4 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h4><p>参数装饰器表达式会在运行时当作函数被调用，传入下列 3 个参数：</p><p>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>2、参数的名字。<br>3、参数在函数参数列表中的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数装饰器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ParamsDecorator = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: any, key: string | symbol, index: number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是参数装饰器，我跑起来了"</span>, key, index);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/290db925645a445aaec74e8fe76aefa2.png" alt="在这里插入图片描述"></p><h2 id="装饰器加载顺序"><a href="#装饰器加载顺序" class="headerlink" title="装饰器加载顺序"></a>装饰器加载顺序</h2><p><img src="https://img-blog.csdnimg.cn/38c5cdabf4254bdabe445363d3940e3f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>从上述例子得出如下结论：</p><p>1、有多个参数装饰器时：从最后一个参数依次向前执行</p><p>2、方法和方法参数中参数装饰器先执行。</p><p>3、类装饰器总是最后执行。</p><p>4、方法和属性装饰器，谁在前面谁先执行。因为参数属于方法一部分，所以参数会一直紧紧挨着方法执行。</p><p>5、方法参数装饰器&gt;方法装饰器&gt;类装饰器，自右向左，自内而外，自上而下。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://es6.ruanyifeng.com/#docs/decorator" target="_blank" rel="external nofollow noopener noreferrer">装饰器</a><br><a href="https://www.cnblogs.com/winfred/p/8216650.html" target="_blank" rel="external nofollow noopener noreferrer">陈峰装饰器</a></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><a href="https://github.com/klover2/typeScript-decorator" target="_blank" rel="external nofollow noopener noreferrer">gitHub</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过注解获取对应的类型</title>
      <link href="%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B/"/>
      <url>%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> klover</span></span><br><span class="line"><span class="comment"> * 处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Processor &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">            annotation = Component<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">    <span class="meta">@interface</span> Process &#123;</span><br><span class="line">        <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>通过 SpringContextUtil 获取</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qbit.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(@NotNull ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前环境</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> env</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getActiveProfile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getEnvironment().getActiveProfiles()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isProd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"prod"</span>.equals(getActiveProfile());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取applicationContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ApplicationContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过Annotation获取 Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 注解类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map&lt;String, Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getBeansWithAnnotation</span><span class="params">(Class&lt;? extends Annotation&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBeansWithAnnotation(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取注解的类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 注解类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] getBeanNamesForAnnotation(Class&lt;? extends Annotation&gt; clazz)&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBeanNamesForAnnotation(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name获取 Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过class获取Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; beans = SpringContextUtil.getBeansWithAnnotation(Processor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (String key : beans.keySet()) &#123;</span><br><span class="line">            Object oldBean = beans.get(key);</span><br><span class="line">            Object bean = oldBean;</span><br><span class="line">            <span class="comment">// 开启aop后getAnnotation拿不到原生类 所以需要这个</span></span><br><span class="line">            <span class="keyword">while</span> (AopUtils.isAopProxy(bean)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bean = ((Advised) bean).getTargetSource().getTarget();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"get target bean failed"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">assert</span> bean != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; clazz = bean.getClass();</span><br><span class="line">            System.out.println(clazz.getName());</span><br><span class="line"></span><br><span class="line">            Processor annotation = clazz.getAnnotation(Processor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">            Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.isAnnotationPresent(Processor.Process<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    System.out.println(method);</span><br><span class="line">                    Method method1 = oldBean.getClass().getMethod(method.getName());</span><br><span class="line">                    method1.invoke(oldBean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过 Reflections 获取</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.reflections/reflections --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.reflections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;reflections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Reflections f = <span class="keyword">new</span> Reflections(packageName);</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; set = f.getTypesAnnotatedWith(Processor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; c : set) &#123;</span><br><span class="line">            Object bean = c.getDeclaredConstructor().newInstance();</span><br><span class="line">            Processor annotation = c.getAnnotation(Processor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Method[] methods = bean.getClass().getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.isAnnotationPresent(Processor.Process<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    System.out.println(method);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            beanContainer.put(annotation.value(), bean);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>amazon配置邮件推送服务</title>
      <link href="amazon%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1/"/>
      <url>amazon%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="亚马逊邮箱推送配置"><a href="#亚马逊邮箱推送配置" class="headerlink" title="亚马逊邮箱推送配置"></a>亚马逊邮箱推送配置</h2><ol><li><p>进入<code>Amazon Simple Email Service</code>服务<br><img src="https://img-blog.csdnimg.cn/8e02bde958154d65916d263e32f38e09.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>在 Account dashboard-&gt;Simple Mail Transfer Protocol (SMTP) settings-&gt;create SMTP credentials 创建简单邮件传输协议 (SMTP) - （如果不想设置就用最高账户）<br><img src="https://img-blog.csdnimg.cn/1bc1b69874884f94845ecd07e81b4971.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>记好对应的 smtp user 和 smtp password<br>忘了也没事 可以在<a href="https://console.aws.amazon.com/iamv2/home?#/home" target="_blank" rel="external nofollow noopener noreferrer">IAM 控制面板</a><br><img src="https://img-blog.csdnimg.cn/7591d5ef6a1244fcaa8e686fea95efdc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>修改对应权限 把 ses 的权限都选中<br><img src="https://img-blog.csdnimg.cn/4777b3b316ac4f2da511f1dbe8046c6b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>配置域名<br><img src="https://img-blog.csdnimg.cn/59e2e067a59142fa9f2d718e15287bb0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3fac5f066fb642f38e958d93992b76d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7f747537abd447028d4e5d1ed8a5f995.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>配置管理集 （例如取名-noreply）<br><img src="https://img-blog.csdnimg.cn/bcc61d0f76254d3ea315daed06c79c1d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="6."></p></li><li><p>获取 Amazon SES SMTP 凭证<br>文档<code>https://docs.aws.amazon.com/zh_cn/ses/latest/dg/smtp-credentials.html</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> crypto <span class="keyword">from</span> <span class="string">"crypto"</span>;</span><br><span class="line"><span class="comment">// The values of the following variables should always stay the same.</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="string">"11111111"</span>;</span><br><span class="line"><span class="keyword">const</span> service = <span class="string">"ses"</span>;</span><br><span class="line"><span class="keyword">const</span> terminal = <span class="string">"aws4_request"</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">"SendRawEmail"</span>;</span><br><span class="line"><span class="keyword">const</span> version = <span class="string">"04"</span>;</span><br><span class="line"><span class="keyword">const</span> region = <span class="string">"us-west-1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modify this variable to include your AWS secret access key</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kDate = HmacSha256(date, Buffer.from(<span class="string">"AWS4"</span> + key, <span class="string">"utf8"</span>));</span><br><span class="line"><span class="keyword">const</span> kRegion = HmacSha256(region, kDate);</span><br><span class="line"><span class="keyword">const</span> kService = HmacSha256(service, kRegion);</span><br><span class="line"><span class="keyword">const</span> kTerminal = HmacSha256(terminal, kService);</span><br><span class="line"><span class="keyword">const</span> kMessage = HmacSha256(message, kTerminal);</span><br><span class="line"><span class="keyword">const</span> signatureAndVersion = Buffer.concat([</span><br><span class="line">  Buffer.from(version, <span class="string">"hex"</span>),</span><br><span class="line">  kMessage,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取smtpPassword 以后就可以永久使用了 除非更新了 AWS secret access key</span></span><br><span class="line"><span class="keyword">const</span> smtpPassword = signatureAndVersion.toString(<span class="string">"base64"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HmacSha256</span>(<span class="params">data: string, key: Buffer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHmac(<span class="string">"sha256"</span>, key).update(data).digest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发送邮件-使用 smtp 发送</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> nodemailer <span class="keyword">from</span> <span class="string">"nodemailer"</span>;</span><br><span class="line"><span class="keyword">const</span> mailer = nodemailer.createTransport(&#123;</span><br><span class="line">  host: <span class="string">"email-smtp.us-west-1.amazonaws.com"</span>,</span><br><span class="line">  port: <span class="string">"465"</span>,</span><br><span class="line">  ignoreTLS: <span class="literal">true</span>,</span><br><span class="line">  secure: <span class="literal">true</span>,</span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: <span class="string">"AWS 访问密钥 ID"</span>,</span><br><span class="line">    pass: smtpPassword,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>发送邮件-使用 npm 包 发送</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mailerService = <span class="keyword">new</span> SES(&#123;</span><br><span class="line">  region: <span class="string">"us-west-1"</span>,</span><br><span class="line">  credentialDefaultProvider: <span class="function">(<span class="params">input: any</span>) =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">      accessKeyId: <span class="string">"AWS 访问密钥 ID"</span>,</span><br><span class="line">      secretAccessKey: <span class="string">"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</span>, <span class="comment">// secret access key</span></span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/** 收件人邮箱 */</span></span><br><span class="line"><span class="keyword">const</span> destination = &#123;</span><br><span class="line">  <span class="comment">/** 收件 */</span></span><br><span class="line">  ToAddresses: [<span class="string">"test@qq.com"</span>],</span><br><span class="line">  <span class="comment">/** 抄送 */</span></span><br><span class="line">  <span class="comment">// CcAddresses: [],</span></span><br><span class="line">  <span class="comment">/** 密件抄送 */</span></span><br><span class="line">  <span class="comment">// BccAddresses:[]</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** 标题 */</span></span><br><span class="line"><span class="keyword">const</span> subject = &#123;</span><br><span class="line">  Data: <span class="string">"test"</span>,</span><br><span class="line">  Charset: <span class="keyword">this</span>.mailInfo.charset,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** 内容 */</span></span><br><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">  Html: &#123;</span><br><span class="line">    Data: <span class="string">"&lt;P&gt;test&lt;/P&gt;"</span>,</span><br><span class="line">    Charset: <span class="string">"UTF-8"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.mailerService.sendEmail(&#123;</span><br><span class="line">  Message: &#123; <span class="attr">Subject</span>: subject, <span class="attr">Body</span>: body &#125;,</span><br><span class="line">  Source: <span class="keyword">from</span>,</span><br><span class="line">  Destination: destination,</span><br><span class="line">  ConfigurationSetName: <span class="string">"noreply"</span>, <span class="comment">// 上面配置的管理集</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="7"><li>移出 Amazon SES 沙盒<br>文档<code>https://docs.aws.amazon.com/zh_cn/ses/latest/dg/request-production-access.html</code></li></ol><p><img src="https://img-blog.csdnimg.cn/c390e5d98281496ca0145023d1752295.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e654d17f7efc409380d7a1e7d073e018.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><code>注意</code>: 里面内容不用乱写，最好详细介绍你为啥要使用这个，不然容易驳回</p><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><ol><li>没有移除邮箱不能随便发送到其他邮箱，可以自己添加对应的邮箱到 amazon ses 中，他会发一封验证邮件 验证通过就可以测试邮件发送了<br><img src="https://img-blog.csdnimg.cn/c9461fa734bf48d9bf94fd8b8e68ecb8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>关于发送邮件日志的查询<br>还在处理中 文档 <a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/ses-email-sending-history/" target="_blank" rel="external nofollow noopener noreferrer"> Amazon Simple Email Service（Amazon SES）中查看电子邮件发送历史记录。该如何操作?</a></li></ol><h2 id="邮件接收回调"><a href="#邮件接收回调" class="headerlink" title="邮件接收回调"></a>邮件接收回调</h2><p>由于流记录那种方式没有配置成功，所以还是配置回调来记录接收情况。<br>文档： <a href="https://docs.aws.amazon.com/zh_cn/ses/latest/dg/configure-sns-notifications.html" target="_blank" rel="external nofollow noopener noreferrer">使用 Amazon SES 控制台来配置通知</a></p><ol><li>创建主题 <code>https://us-west-1.console.aws.amazon.com/sns/v3/home?region=us-west-1#/topics</code><br><img src="https://img-blog.csdnimg.cn/77654bdba94541378f4f9ce9e6a35e29.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>为主题增加订阅<br><img src="https://img-blog.csdnimg.cn/d736fb6c2cc9433d9c8a4b6e79745054.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>选择 https 协议，如果选择邮箱太烦了，这样就会推送到你的服务器上<br><img src="https://img-blog.csdnimg.cn/367594b02ffe4abfa5dfdb6fd6f95fbc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>服务器接收 - 它是 text/plain 方式请求过来的 拿出里面的<code>SubscribeURL</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result: string = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">""</span>;</span><br><span class="line">  req.setEncoding(<span class="string">"utf8"</span>);</span><br><span class="line">  req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    data += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">"error"</span>, (err) =&gt; reject(err));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者直接 req.body</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用<code>SubscribeURL</code> 来确认订阅 正常就可以了<br><img src="https://img-blog.csdnimg.cn/f6b6bd56f4c2481fa98768cc20fae886.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>接入到对应的发送邮件域名中</li></ol><p><img src="https://img-blog.csdnimg.cn/423fce423dfb44d8ab8d4fd40e3c4c99.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>主题选择你自己设置的名称就可以了</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://docs.aws.amazon.com/zh_cn/opensearch-service/latest/developerguide/integrations.html" target="_blank" rel="external nofollow noopener noreferrer">Amazon Kinesis Data Firehose 加载流数据</a><br><a href="https://docs.aws.amazon.com/zh_cn/ses/latest/dg/event-publishing-add-event-destination-firehose.html#event-publishing-add-event-destination-firehose-role" target="_blank" rel="external nofollow noopener noreferrer">为 Amazon SES 事件发布设置 Kinesis Data Firehose 事件目的地</a><br><a href="https://us-west-1.console.aws.amazon.com/firehose/home?region=us-west-1#/streams" target="_blank" rel="external nofollow noopener noreferrer">流控制台</a><br><a href="https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html" target="_blank" rel="external nofollow noopener noreferrer">监控您的 Amazon SES 发送活动</a><br><a href="https://docs.aws.amazon.com/ses/latest/dg/configure-sns-notifications.html" target="_blank" rel="external nofollow noopener noreferrer">为 Amazon SES 配置 Amazon SNS 通知</a><br><a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/ses-email-sending-history/" target="_blank" rel="external nofollow noopener noreferrer"> Amazon Simple Email Service（Amazon SES）中查看电子邮件发送历史记录。该如何操作?</a><br><a href="https://docs.aws.amazon.com/zh_cn/ses/latest/dg/request-production-access.html" target="_blank" rel="external nofollow noopener noreferrer">关于移除沙盒</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> amazon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞书-企业自建应用</title>
      <link href="%E9%A3%9E%E4%B9%A6-%E4%BC%81%E4%B8%9A%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8/"/>
      <url>%E9%A3%9E%E4%B9%A6-%E4%BC%81%E4%B8%9A%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="企业自建应用-嵌入三方网页"><a href="#企业自建应用-嵌入三方网页" class="headerlink" title="企业自建应用 嵌入三方网页"></a>企业自建应用 嵌入三方网页</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>进入<code>https://open.feishu.cn/app?lang=zh-CN</code></p></li><li><p>选择创建自建应用-内容随便</p></li><li><p>获取对应的应用凭证<br><img src="https://img-blog.csdnimg.cn/12c92114f8584f10b3a2c2aca6f41ba3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>嵌入网页配置<br><img src="https://img-blog.csdnimg.cn/7d733f9fd91a4266ba8ec41391962940.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>手机端和电脑端可以一样</p></li><li><p>在权限关联中授权获取手机号和邮箱<br><img src="https://img-blog.csdnimg.cn/af64c572686147a5a271d6b4298156af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol><li>获取 AppAccessToken<br>文档： <code>https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/auth-v3/auth/app_access_token_internal</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const res = await request</span><br><span class="line">      .post(<span class="string">'https://open.feishu.cn/open-apis/auth/v3/app_access_token/internal'</span>)</span><br><span class="line">      .<span class="built_in">set</span>(&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .send(&#123;</span><br><span class="line">        app_id: data.client_id,</span><br><span class="line">        app_secret: data.client_secret,</span><br><span class="line">      &#125;);</span><br><span class="line">    const body = res.body;</span><br><span class="line">    <span class="keyword">if</span> (!(body.msg === <span class="string">'ok'</span> &amp;&amp; body.code === 0)) throw new CustomException(-1, <span class="string">'获取app_access_token失败'</span>);</span><br><span class="line">    const &#123; app_access_token, expire &#125; = body;</span><br></pre></td></tr></table></figure><ol start="2"><li>获取用户信息<br>文档<code>https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const res = await request</span><br><span class="line">      .post(<span class="string">'https://open.feishu.cn/open-apis/authen/v1/access_token'</span>)</span><br><span class="line">      .<span class="built_in">set</span>(&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">        Authorization: `Bearer <span class="variable">$&#123;data.access_token&#125;</span>`,</span><br><span class="line">      &#125;)</span><br><span class="line">      .send(&#123;</span><br><span class="line">        grant_type: <span class="string">'authorization_code'</span>,</span><br><span class="line">        code: code,</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 飞书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何对typescript进行单元测试</title>
      <link href="%E5%A6%82%E4%BD%95%E5%AF%B9typescript%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>%E5%A6%82%E4%BD%95%E5%AF%B9typescript%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>yarn add -D ts-jest jest @types/jest</code></p><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p><code>npm i jest -g</code></p><h2 id="初始化-jest"><a href="#初始化-jest" class="headerlink" title="初始化 jest"></a>初始化 jest</h2><p><code>jest --init</code></p><h2 id="移除生成的-jest-config-js-文件"><a href="#移除生成的-jest-config-js-文件" class="headerlink" title="移除生成的 jest.config.js 文件"></a>移除生成的 jest.config.js 文件</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 package.json 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jest"</span>: &#123;</span><br><span class="line">    <span class="string">"moduleFileExtensions"</span>: [</span><br><span class="line">      <span class="string">"js"</span>,</span><br><span class="line">      <span class="string">"json"</span>,</span><br><span class="line">      <span class="string">"ts"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"rootDir"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="string">"testRegex"</span>: <span class="string">".spec.ts$"</span>,</span><br><span class="line">    <span class="string">"transform"</span>: &#123;</span><br><span class="line">      <span class="string">"^.+\\.(t|j)s$"</span>: <span class="string">"ts-jest"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"coverageDirectory"</span>: <span class="string">"./coverage"</span>,</span><br><span class="line">    <span class="string">"testEnvironment"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="string">"roots"</span>: [</span><br><span class="line">      <span class="string">"&lt;rootDir&gt;/test/"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"test"</span>, () =&gt; &#123;</span><br><span class="line">  beforeAll(<span class="keyword">async</span> () =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"test"</span>, () =&gt; &#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL中JSONB的使用</title>
      <link href="PostgreSQL%E4%B8%ADJSONB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>PostgreSQL%E4%B8%ADJSONB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="json-类型"><a href="#json-类型" class="headerlink" title="json 类型"></a>json 类型</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>根据 RFC 7159[1]中的说明，JSON 数据类型是用来存储 JSON（JavaScript Object Notation） 数据的。这种数据也可以被存储为 text，但是 JSON 数据类型的 优势在于能强制要求每个被存储的值符合 JSON 规则。也有很多 JSON 相关的函 数和操作符可以用于存储在这些数据类型中的数据</p><p>PostgreSQL 支持两种 JSON 数据类型：json 和 jsonb。它们几乎接受完全相同的值集合作为输入。两者最大的区别是效率。json 数据类型存储输入文本的精准拷贝，处理函数必须在每 次执行时必须重新解析该数据。而 jsonb 数据被存储在一种分解好的二进制格式中，因为需要做附加的转换，它在输入时要稍慢一些。但是 jsonb 在处理时要快很多，因为不需要重新解析。</p><blockquote><p>重点：jsonb 支持索引</p></blockquote><a id="more"></a><p>由于 json 类型存储的是输入文本的准确拷贝，存储时会空格和 JSON 对象内部的键的顺序。如果一个值中的 JSON 对象包含同一个键超过一次，所有的键/值对都会被保留（** 处理函数会把最后的值当作有效值**）。</p><p>jsonb 不保留空格、不保留对象键的顺序并且不保留重复的对象键。如果在输入中指定了重复的键，只有最后一个值会被保留。</p><blockquote><p>推荐把 JSON 数据存储为 jsonb</p></blockquote><p>在把文本 JSON 输入转换成 jsonb 时，JSON 的基本类型（RFC 7159[1] ）会被映射到原生的 PostgreSQL 类型。因此，jsonb 数据有一些次要额外约束。比如：jsonb 将拒绝除 PostgreSQL numeric 数据类型范围之外的数字，而 json 则不会。</p><h2 id="json-输入输出语法"><a href="#json-输入输出语法" class="headerlink" title="json 输入输出语法"></a>json 输入输出语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-- 简单标量/基本值</span><br><span class="line">-- 基本值可以是数字、带引号的字符串、<span class="literal">true</span>、<span class="literal">false</span>或者null</span><br><span class="line">SELECT <span class="string">'5'</span>::json;</span><br><span class="line"></span><br><span class="line">-- 有零个或者更多元素的数组（元素不需要为同一类型）</span><br><span class="line">SELECT <span class="string">'[1, 2, "foo", null]'</span>::json;</span><br><span class="line"></span><br><span class="line">-- 包含键值对的对象</span><br><span class="line">-- 注意对象键必须总是带引号的字符串</span><br><span class="line">SELECT <span class="string">'&#123;"bar": "baz", "balance": 7.77, "active": false&#125;'</span>::json;</span><br><span class="line"></span><br><span class="line">-- 数组和对象可以被任意嵌套</span><br><span class="line">SELECT <span class="string">'&#123;"foo": [true, "bar"], "tags": &#123;"a": 1, "b": null&#125;&#125;'</span>::json;</span><br><span class="line"></span><br><span class="line">-- <span class="string">"-&gt;"</span> 通过键获得 JSON 对象域 结果为json对象</span><br><span class="line">select <span class="string">'&#123;"nickname": "goodspeed", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;<span class="string">'nickname'</span> as nickname;</span><br><span class="line"> nickname</span><br><span class="line">-------------</span><br><span class="line"> <span class="string">"goodspeed"</span></span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">-- <span class="string">"-&gt;&gt;"</span> 通过键获得 JSON 对象域 结果为text</span><br><span class="line">select <span class="string">'&#123;"nickname": "goodspeed", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;&gt;<span class="string">'nickname'</span> as nickname;</span><br><span class="line"> nickname</span><br><span class="line">-----------</span><br><span class="line"> goodspeed</span><br><span class="line"></span><br><span class="line">-- <span class="string">"-&gt;"</span> 通过键获得 JSON 对象域 结果为json对象</span><br><span class="line">select <span class="string">'&#123;"nickname": "goodspeed", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;<span class="string">'nickname'</span> as nickname;</span><br><span class="line"> nickname</span><br><span class="line">-------------</span><br><span class="line"> <span class="string">"goodspeed"</span></span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">-- <span class="string">"-&gt;&gt;"</span> 通过键获得 JSON 对象域 结果为text</span><br><span class="line">select <span class="string">'&#123;"nickname": "goodspeed", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;&gt;<span class="string">'nickname'</span> as nickname;</span><br><span class="line"> nickname</span><br><span class="line">-----------</span><br><span class="line"> goodspeed</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h2 id="包含和存在"><a href="#包含和存在" class="headerlink" title="包含和存在"></a>包含和存在</h2><h3 id="gt-和-gt-gt-操作符"><a href="#gt-和-gt-gt-操作符" class="headerlink" title="-&gt; 和 -&gt;&gt; 操作符"></a>-&gt; 和 -&gt;&gt; 操作符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- nickname 为 gs 的用户 这里使用 -&gt;&gt; 查出的数据为text，所以匹配项也应该是text</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;&gt;<span class="string">'nickname'</span> = <span class="string">'gs'</span>;</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;&gt;<span class="string">'nickname'</span> = <span class="string">'gs'</span>;</span><br><span class="line"></span><br><span class="line">-- 使用 -&gt; 查询，会抛出错误，这里无论匹配项是text类型的 <span class="string">'gs'</span>  还是 json 类型的 <span class="string">'"gs"'</span>::json都会抛出异常，json 类型不支持 等号（=）操作符</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;<span class="string">'nickname'</span> = <span class="string">'"gs"'</span>;</span><br><span class="line">ERROR:  operator does not exist: json = unknown</span><br><span class="line"></span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json-&gt;<span class="string">'nickname'</span> = <span class="string">'"gs"'</span>::json;</span><br><span class="line">ERROR:  operator does not exist: json = json</span><br><span class="line"></span><br><span class="line">-- jsonb 格式是可以查询成功的，这里使用 -&gt; 查出的数据为json 对象，所以匹配项也应该是json 对象</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;<span class="string">'nickname'</span> = <span class="string">'"gs"'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用 -&gt;&gt; 查出的数据为 text 使用 -&gt; 查出的数据为 json 对象</p></blockquote><h3 id="gt-和-gt-gt-操作符-1"><a href="#gt-和-gt-gt-操作符-1" class="headerlink" title="#&gt; 和 #&gt;&gt; 操作符"></a>#&gt; 和 #&gt;&gt; 操作符</h3><blockquote><p>使用 #&gt;&gt; 查出的数据为 text 使用 #&gt; 查出的数据为 json 对象</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json<span class="comment">#&gt;'&#123;tags,0&#125;' as tag;</span></span><br><span class="line">   tag</span><br><span class="line">----------</span><br><span class="line"> <span class="string">"python"</span></span><br><span class="line"></span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json<span class="comment">#&gt;&gt;'&#123;tags,0&#125;' as tag;</span></span><br><span class="line">  tag</span><br><span class="line">--------</span><br><span class="line"> python</span><br><span class="line"></span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb<span class="comment">#&gt;'&#123;tags,0&#125;' = '"python"';</span></span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb<span class="comment">#&gt;&gt;'&#123;tags,0&#125;' = 'python';</span></span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line"></span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json<span class="comment">#&gt;&gt;'&#123;tags,0&#125;' = 'python';</span></span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line">-- 会抛出错误，这里无论匹配项是text类型的 <span class="string">'python'</span>  还是 json 类型的 <span class="string">'"python"'</span>::json都会抛出异常，json 类型不支持 等号（=）操作符</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::json<span class="comment">#&gt;'&#123;tags,0&#125;' = '"python"';</span></span><br><span class="line">ERROR:  operator does not exist: json = unknown</span><br></pre></td></tr></table></figure><h2 id="jsonb-数据查询（不适用于-json）"><a href="#jsonb-数据查询（不适用于-json）" class="headerlink" title="jsonb 数据查询（不适用于 json）"></a>jsonb 数据查询（不适用于 json）</h2><h3 id="gt-操作符"><a href="#gt-操作符" class="headerlink" title="@&gt;操作符"></a>@&gt;操作符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- nickname 为 nickname 的用户</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb @&gt; <span class="string">'&#123;"nickname": "gs"&#125;'</span>::jsonb;</span><br><span class="line"></span><br><span class="line">-- 等同于以下查询</span><br><span class="line">-- 这里使用 -&gt; 查出的数据为json 对象，所以匹配项也应该是json 对象</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;<span class="string">'nickname'</span> = <span class="string">'"gs"'</span>;</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;&gt;<span class="string">'nickname'</span> = <span class="string">'gs'</span>;</span><br><span class="line"></span><br><span class="line">-- 查询有 python 和 golang 标签的数据</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb @&gt; <span class="string">'&#123;"tags": ["python", "golang"]&#125;'</span>;</span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br></pre></td></tr></table></figure><h3 id="操作符、-操作符和-amp-操作符"><a href="#操作符、-操作符和-amp-操作符" class="headerlink" title="?操作符、?|操作符和?&amp;操作符"></a>?操作符、?|操作符和?&amp;操作符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 查询有 avatar 属性的用户</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb ? <span class="string">'avatar'</span>;</span><br><span class="line">-- 查询有 avatar 属性 并且avatar 数据不为空的数据</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "avatar": null, "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;&gt;<span class="string">'avatar'</span> is not <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">-- 查询 有 avatar 或 tags 的数据</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb ?| array[<span class="string">'avatar'</span>, <span class="string">'tags'</span>];</span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line"></span><br><span class="line">-- 查询 既有 avatar 又有 tags 的用户</span><br><span class="line">select <span class="string">'&#123;"nickname": "gs", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb ?&amp; array[<span class="string">'avatar'</span>, <span class="string">'tags'</span>];</span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> f</span><br><span class="line"></span><br><span class="line"> -- 查询 tags 中包含 python 标签的数据</span><br><span class="line"> select <span class="string">'&#123;"nickname": "gs", "avatar": "avatar_url", "tags": ["python", "golang", "db"]&#125;'</span>::jsonb-&gt;<span class="string">'tags'</span> ? <span class="string">'python'</span>;</span><br><span class="line"> ?column?</span><br><span class="line">----------</span><br><span class="line"> t</span><br></pre></td></tr></table></figure><h2 id="json-和-jsonb-的操作符列表"><a href="#json-和-jsonb-的操作符列表" class="headerlink" title="json 和 jsonb 的操作符列表"></a>json 和 jsonb 的操作符列表</h2><h3 id="json-和-jsonb-操作符"><a href="#json-和-jsonb-操作符" class="headerlink" title="json 和 jsonb 操作符"></a>json 和 jsonb 操作符</h3><p><img src="https://img-blog.csdnimg.cn/9ccc01b6ffff49899299fe404358df1d.png" alt="在这里插入图片描述"></p><h3 id="额外的-jsonb-操作符"><a href="#额外的-jsonb-操作符" class="headerlink" title="额外的 jsonb 操作符"></a>额外的 jsonb 操作符</h3><p><img src="https://img-blog.csdnimg.cn/327e12ce9d3c4cbfa06fe4ed4f5cfd22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="新增或者修改"><a href="#新增或者修改" class="headerlink" title="新增或者修改"></a>新增或者修改</h2><p><code>原始数据结构 {&quot;accountClear&quot;: {&quot;clearType&quot;: &quot;Clear&quot;, &quot;csmReason&quot;: &quot;钱不对&quot;, &quot;addToBlackList&quot;: {&quot;blackCorporate&quot;: true, &quot;blackEnterprise&quot;: true}, &quot;applyReviewReason&quot;: &quot;钱不对&quot;}}</code></p><ol><li><p>修改 clearType 的参数<br><code>update apply set &quot;data&quot; = jsonb_set(&quot;data&quot;::jsonb, &#39;{accountClear, clearType}&#39;, &#39;&quot;Clear&quot;&#39;, true) where &quot;type&quot; = &#39;AccountClear&#39;;</code></p></li><li><p>移除 accountClear<br><code>update apply set &quot;data&quot;= &quot;data&quot;- &#39;accountClear&#39; where id=&#39;4cb0568d-d571-4256-8aea-7eee9a6dca1c&#39;;</code></p></li><li><p>移除 data 中 accountClear 下的 clearType<br><code>update apply set &quot;data&quot;= &quot;data&quot; #- &#39;{accountClear,clearType}&#39; where id=&#39;4cb0568d-d571-4256-8aea-7eee9a6dca1c&#39;;</code></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jsonb_set(target         jsonb,  // 需要修改的数据</span><br><span class="line">          path           text[], // 数据路径</span><br><span class="line">          new_value      jsonb,  // 新数据</span><br><span class="line">          create_missing boolean default <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><code>如果 create_missing 是 true （缺省是 true），并且 path 指定的路径在 target 中不存在，那么 target 将包含 path 指定部分， new_value 替换部分， 或者 new_value 添加部分。</code></p><h2 id="GIN-索引介绍"><a href="#GIN-索引介绍" class="headerlink" title="GIN 索引介绍"></a>GIN 索引介绍</h2><p>JSONB 最常用的是 GIN 索引，GIN 索引可以被用来有效地搜索在大量 jsonb 文档（数据）中出现 的键或者键值对。</p><blockquote><p>GIN(Generalized Inverted Index, 通用倒排索引) 是一个存储对(key, posting list)集合的索引结构，其中 key 是一个键值，而 posting list 是一组出现过 key 的位置。如(‘hello’, ‘14:2 23:4’)中，表示 hello 在 14:2 和 23:4 这两个位置出现过，在 PG 中这些位置实际上就是元组的 tid(行号，包括数据块 ID（32bit）,以及 item point(16 bit) )。</p></blockquote><blockquote><p>在表中的每一个属性，在建立索引时，都可能会被解析为多个键值，所以同一个元组的 tid 可能会出现在多个 key 的 posting list 中。</p></blockquote><blockquote><p>通过这种索引结构可以快速的查找到包含指定关键字的元组，因此 GIN 索引特别适用于多值类型的元素搜索，比如支持全文搜索，数组中元素的搜索，而 PG 的 GIN 索引模块最初也是为了支持全文搜索而开发的。</p></blockquote><p>jsonb 的默认 GIN 操作符类支持使用顶层键存在运算符?、?&amp;以及?| 操作符和路径/值存在运算符@&gt;的查询。</p><p><code>-- 创建默认索引</code><br><code>CREATE INDEX idxgin ON api USING GIN (jdoc);</code></p><p>非默认的 GIN 操作符类 jsonb_path_ops 只支持索引@&gt;操作符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 创建指定路径的索引</span><br><span class="line">CREATE INDEX idxgin ON api USING GIN (jdoc, (<span class="string">'a'</span>-&gt;<span class="string">'b'</span>));</span><br></pre></td></tr></table></figure><p>eg:</p><p><code>EXPLAIN SELECT * from apply where &quot;data&quot;-&gt;&#39;accountClear&#39;-&gt;&#39;clearType&#39; ? &#39;LogOff&#39;</code></p><p>上述 sql 会使用索引：<br><img src="https://img-blog.csdnimg.cn/5de8c6b5ade14fc296250282dc1010ae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><code>EXPLAIN SELECT * from apply where &quot;data&quot;-&gt;&#39;accountClear&#39;-&gt;&#39;clearType&#39; = &#39;&quot;LogOff&quot;&#39;</code></p><p><img src="https://img-blog.csdnimg.cn/441e7bffd7d6471d994b01e2fd03d298.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压测工具使用</title>
      <link href="%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-Bench"><a href="#Apache-Bench" class="headerlink" title="Apache Bench"></a>Apache Bench</h2><p>Apache Bench 简介<br>ApacheBench 是 Apache 服务器自带的一个 web 压力测试工具，简称 ab。ab 又是一个命令行工具，对发起负载的本机要求很低，根据 ab 命令可以创建很多的并发访问线程，模拟多个访问者同时对某一 URL 地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说 ab 工具小巧简单，上手学习较快，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。</p><a id="more"></a><ol><li><p><a href="https://www.apachelounge.com/download/#google_vignette" target="_blank" rel="external nofollow noopener noreferrer">下载</a></p><p><img src="https://img-blog.csdnimg.cn/cb7d20bc7f9040c38d4a0fadd05dbdbf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>解压到本地就可以直接使用,使用如下<br><code>.\bin\abs.exe -c 1 -n 1 -p .\body.txt -T application/json http://127.0.0.1:3000/testing/nium/api/v1/authorization</code></p></li></ol><p><img src="https://img-blog.csdnimg.cn/9ca0540115c0436cad7042e636115b3d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>body.txt 就是请求的 body 参数<br><img src="https://img-blog.csdnimg.cn/d3a1a92dc12644238c80507c808b6b15.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ol start="3"><li>参数介绍：</li></ol><p>参数说明：<br>格式：ab [options] [http://]hostname[:port]/path</p><p>-n requests Number of requests to perform //本次测试发起的总请求数<br>-c concurrency Number of multiple requests to make //一次产生的请求数（或并发数）<br>-t timelimit Seconds to max. wait for responses //测试所进行的最大秒数，默认没有时间限制。<br>-r Don’t exit on socket receive errors. // 抛出异常继续执行测试任务<br>-p postfile File containing data to POST //包含了需要 POST 的数据的文件，文件格式如“p1=1&amp;p2=2”.使用方法是 -p 111.txt</p><p>-T content-type Content-type header for POSTing<br>//POST 数据所使用的 Content-type 头信息，如 -T “application/x-www-form-urlencoded” 。 （配合-p）</p><p>-v verbosity How much troubleshooting info to print<br>//设置显示信息的详细程度 – 4 或更大值会显示头信息， 3 或更大值可以显示响应代码(404, 200 等), 2 或更大值可以显示警告和其他信息。</p><p>-V 显示版本号并退出。<br>-C attribute Add cookie, eg. -C “c1=1234,c2=2,c3=3” (repeatable)<br>//-C cookie-name=value 对请求附加一个 Cookie:行。 其典型形式是 name=value 的一个参数对。此参数可以重复，用逗号分割。<br>提示：可以借助 session 实现原理传递 JSESSIONID 参数， 实现保持会话的功能，如-C ” c1=1234,c2=2,c3=3, JSESSIONID=FF056CD16DA9D71CB131C1D56F0319F8″ 。</p><p>-w Print out results in HTML tables //以 HTML 表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。<br>-i Use HEAD instead of GET</p><ol start="4"><li><p>返回介绍<br>Document Path:测试页面<br>Document Length: 页面大小<br>Concurrency Level: 测试的并发数<br>Time taken for tests:整个测试持续的时间<br>Complete requests:完成的请求数量<br>Failed requests: 失败的请求数量<br>Write errors: 0<br>Total transferred: 整个过程中的网络传输量<br>HTML transferred: 整个过程中的 HTML 内容传输量<br>Requests per second: 最重要的指标之一，相当于 LR 中的每秒事务数，后面括号中的 mean 表示这是一个平均值<br>Time per request: 最重要的指标之二，相当于 LR 中的平均事务响应时间，后面括号中的 mean 表示这是一个平均值<br>Time per request: 每个连接请求实际运行时间的平均值<br>Transfer rate: 平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</p></li><li><p><a href="https://blog.csdn.net/weixin_39089928/article/details/87371792" target="_blank" rel="external nofollow noopener noreferrer">参考文档</a></p></li></ol><h2 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h2><ol><li><p>jmeter 简介<br>Apache JMeter 是 Apache 组织开发的基于 Java 的压力测试工具。用于对软件做压力测试，它最初被设计用于 Web 应用测试，但后来扩展到其他测试领域。 可以用于测试静态和动态资源，例如静态文件、CGI 脚本、Java 对象、数据库、FTP 服务器 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。</p></li><li><p>jmeter 安装<br>由于 Jmeter 是基于 java 开发，首先需要下载安装 JDK （目前 JMeter 只支持到 Java 8，尚不支持 Java 9）。<br>官网下载地址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="external nofollow noopener noreferrer">http://jmeter.apache.org/download_jmeter.cgi</a><br>下载完成后解压 zip 包<br>启动 JMeter，双击 JMeter 解压路径（apache-jmeter-3.3\bin）bin 下面的 jmeter.bat 即可<br>Jmeter 是支持中文的，启动 Jmeter 后， 点击 Options -&gt; Choose Language 来选择语言</p></li><li><p>jmeter 使用<br>(1) 添加线程组<br>线程数：虚拟用户数，用于并发测试。<br>Ramp-Up Period(in seconds)准备时长：设置的虚拟用户数需要多长时间全部启动。如果线程数为 10，准备时长为 2，那么需要 2 秒钟启动 10 个线程，也就是每秒钟启动 5 个线程。<br>循环次数：每个线程发送请求的次数。如果线程数为 10，循环次数为 100，那么每个线程发送 100 次请求。总请求数为 10*100=1000 。如果勾选了“永远”，那么所有线程会一直发送请求，一到选择停止运行脚本。<br>(2) 在线程组下添加测试的请求类型，例如 http 请求、TCP 请求等，注意一些请求可能需要添加额外的插件才能实现（例如 UDP）。下面以常用的 http 请求为例。<br>协议：向目标服务器发送 HTTP 请求协议，可以是 HTTP 或 HTTPS，默认为 HTTP 。<br>服务器名称或 IP ：HTTP 请求发送的目标服务器名称或 IP 。<br>端口号：目标服务器的端口号，默认值为 80 。<br>方法：发送 HTTP 请求的方法，可用方法包括 GET、POST、HEAD、PUT、OPTIONS、TRACE、DELETE 等。<br>路径：目标 URL 路径（URL 中去掉服务器地址、端口及参数后剩余部分）<br>Content encoding ：编码方式，默认为 ISO-8859-1 编码，可以配置为 utf-8<br><img src="https://img-blog.csdnimg.cn/437d0dcc10164e89a29a4d987b5c845f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d99e7674f1ff418e8c2043957d7fa41a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>（3）添加监听器-查看结果树</p></li><li><p>聚合报告详解：<br>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值。<br>#Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟 10 个用户，每个用户迭代 10 次，那么这里显示 100。<br>Average：平均响应时间——默认情况下是单个 Request 的平均响应时间（ms），当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间。<br>Median：中位数，也就是 50％ 用户的响应时间<br>90% Line：90％ 用户的响应时间<br>Min：最小响应时间<br>Max：最大响应时间<br>Error%：错误率——错误请求数/请求总数<br>throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second）<br>KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput/Sec</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 压测工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git撤销commit中单个文件的修改</title>
      <link href="git%E6%92%A4%E9%94%80commit%E4%B8%AD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9/"/>
      <url>git%E6%92%A4%E9%94%80commit%E4%B8%AD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于不小心提交了了 yarn.lock 文件，后面还 commit 了几次提交。现在只要回退 yarn.lock 的提交。</p><ol><li><p>先查询 yarn.lock 的提交记录<br><code>git log yarn.lock</code></p></li><li><p>找到这个文件的上次 commit id, 并对其进行 reset 操作<br><code>git reset &lt;commit-id&gt; yarn.lock</code></p></li><li><p>再撤销对此文件的修改<br><code>git checkout yarn.lock</code></p></li><li><p>重新 commit 提交就好<br><code>git commit -m &#39;&#39;</code><br><code>git push</code></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置jdk与maven</title>
      <link href="%E9%85%8D%E7%BD%AEjdk%E4%B8%8Emaven/"/>
      <url>%E9%85%8D%E7%BD%AEjdk%E4%B8%8Emaven/</url>
      
        <content type="html"><![CDATA[<h2 id="安装与配置-jdk"><a href="#安装与配置-jdk" class="headerlink" title="安装与配置 jdk"></a>安装与配置 jdk</h2><ol><li><p>下载链接（<a href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows）" target="_blank" rel="external nofollow noopener noreferrer">https://www.oracle.com/java/technologies/downloads/#jdk17-windows）</a><br>默认安装就好</p></li><li><p>配置环境变量<br>在系统变量里面增加<br><code>JAVA_HOME C:\Program Files\Java\jdk-17.0.1</code><br><code>Path %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code><br><code>CLASSPATH .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></p></li></ol><a id="more"></a><ol start="3"><li>检验是否配置成功(如下就成功了)<br><img src="https://img-blog.csdnimg.cn/b767a02e41564a34acea65a65e491c40.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ol><h2 id="安装与配置-maven"><a href="#安装与配置-maven" class="headerlink" title="安装与配置 maven"></a>安装与配置 maven</h2><ol><li><p>下载链接（<a href="https://maven.apache.org/download.cgi）" target="_blank" rel="external nofollow noopener noreferrer">https://maven.apache.org/download.cgi）</a><br><img src="https://img-blog.csdnimg.cn/100e624ae8ba497ca780550ce7aa8e72.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>解压 并且创建 maven-local-repository 目录用于存储 jar 包</p></li><li><p>配置环境变量<br>在系统变量里面增加<br><code>Maven_Home D:\maven\apache-maven-3.8.4</code><br>Path 变量值增加 <code>%Maven_Home%\bin</code></p></li><li><p>检测是否配置成功 <code>mvn -v</code><br><img src="https://img-blog.csdnimg.cn/66f6977fc2544e919db721b2b6b9249f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>Maven 的配置<br>打开 settings.xml<br>本地仓库位置<br><code>&lt;localRepository&gt;D:\maven\maven-local-repository&lt;/localRepository&gt;</code></p></li></ol><!-- 配置中央仓库的镜像（改用：阿里云中央仓库镜像）--><pre><code>&lt;mirror&gt;  &lt;id&gt;alimaven&lt;/id&gt;  &lt;name&gt;aliyun-maven&lt;/name&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><ol start="6"><li>IntelliJ IDEA 中使用 Maven<br><img src="https://img-blog.csdnimg.cn/849c3d4f1624456b9c24147d979c05a4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAdy1rbG92ZXI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buffer与stream互相转换</title>
      <link href="buffer%E4%B8%8Estream%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
      <url>buffer%E4%B8%8Estream%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<ol><li>流到缓冲区</li></ol><p>第一个操作是将读取流转换为缓冲区。Streams 最有效的操作是将它们通过管道传输到另一个流。这在您不想增加内存使用量的文件系统访问中很常见。</p><p>但是，在处理 HTTP 请求时，您可能希望直接将响应流转换为 JSON 对象或解析 url 编码值。</p><p>为此，您将读取缓冲区 data 事件提供的数据。Streams 将提供一个字符串或一个缓冲区作为数据事件的值。这取决于 Buffer 是否有编码集。默认情况下，它会在 data 事件期间输出 Buffers 。</p><p>这意味着您可以执行以下操作以从流中读取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">streamToBuffer</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> buffers = [];</span><br><span class="line">    stream.on(<span class="string">"error"</span>, reject);</span><br><span class="line">    stream.on(<span class="string">"data"</span>, (data) =&gt; buffers.push(data));</span><br><span class="line">    stream.on(<span class="string">"end"</span>, () =&gt; resolve(Buffer.concat(buffers)));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数获取流（可能来自 HTTP 或 FS 访问）。然后它将每个 Buffer 推送到一个 Buffer 数组中。当流被完全读取时，它会将所有这些 Buffers 与 Buffer.concat 结合起来。</p><p>这显然会对大流造成一些问题，但对于需要在应用程序的后续部分中转换并在内存中携带的小流来说，它非常有用。</p><ol start="2"><li>缓冲区到流<br>下一部分是将 Buffer 转换为流。当您想将数据通过管道传输到现有流中时，这很有用。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Duplex = <span class="built_in">require</span>(<span class="string">"stream"</span>).Duplex;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bufferToStream</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stream = <span class="keyword">new</span> Duplex();</span><br><span class="line">  stream.push(buffer);</span><br><span class="line">  stream.push(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此操作创建一个双工字符串并简单地将缓冲区写入其中。该流现在可以像通常的任何写入流一样使用。</p><p>文档：<br><a href="https://www.derpturkey.com/buffer-to-stream-in-node/" target="_blank" rel="external nofollow noopener noreferrer">缓冲到节点中的流</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git出现过的问题</title>
      <link href="%E4%BD%BF%E7%94%A8git%E5%87%BA%E7%8E%B0%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>%E4%BD%BF%E7%94%A8git%E5%87%BA%E7%8E%B0%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li>拉取代码出现下面问题<br><code>load pubkey &quot;/c/Users/klover/.ssh/id_rsa&quot;: invalid format</code><br>是因为公钥之前我换过名字，导致出现问题<br>执行修复公钥命令，解决问题<br><code>ssh-keygen -f ~/.ssh/id_rsa -y &gt; ~/.ssh/id_rsa.pub</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装elementui的table组件</title>
      <link href="%E5%B0%81%E8%A3%85elementui%E7%9A%84table%E7%BB%84%E4%BB%B6/"/>
      <url>%E5%B0%81%E8%A3%85elementui%E7%9A%84table%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="table-vue"><a href="#table-vue" class="headerlink" title="table.vue"></a>table.vue</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table</span><br><span class="line">    v-bind=<span class="string">"$props"</span></span><br><span class="line">    border</span><br><span class="line">    :header-cell-style=<span class="string">"&#123; 'text-align': 'center' &#125;"</span></span><br><span class="line">    style=<span class="string">"width: 100%"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      label=<span class="string">"序号"</span></span><br><span class="line">      width=<span class="string">"50"</span></span><br><span class="line">      align=<span class="string">"center"</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot-scope=<span class="string">"scope"</span>&gt;</span><br><span class="line">        &#123;&#123; scope.$index + <span class="number">1</span> &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line">    &lt;template v-<span class="keyword">for</span>=<span class="string">"(col, key) in tableColumns"</span>&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        :key=<span class="string">"key"</span></span><br><span class="line">        v-bind=<span class="string">"col"</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>el-table&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import &#123; Vue, Component, Prop &#125; from 'vue-property-decorator'</span></span><br><span class="line"><span class="regexp">import &#123; Table &#125; from 'element-ui'</span></span><br><span class="line"><span class="regexp">export type Column = &#123;</span></span><br><span class="line"><span class="regexp">  label: string</span></span><br><span class="line"><span class="regexp">  prop?: string</span></span><br><span class="line"><span class="regexp">  width?: string</span></span><br><span class="line"><span class="regexp">  minWidth?: string</span></span><br><span class="line"><span class="regexp">  fixed?: string | boolean</span></span><br><span class="line"><span class="regexp">  align?: 'left' | 'center' | 'right'</span></span><br><span class="line"><span class="regexp">  formatter?: &#123; (row: any, col: any, value: any): unknown &#125;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ renderHeader的使用 https:/</span><span class="regexp">/www.cnblogs.com/yi</span>xiancheng/p/<span class="number">11525970.</span>html</span><br><span class="line">  renderHeader?: &#123; (h: <span class="built_in">any</span>, &#123; column, $index &#125;: <span class="built_in">any</span>): unknown &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    ...(Table <span class="keyword">as</span> <span class="built_in">any</span>).props,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Prop</span>(&#123; <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> ([]) &#125;) tableColumns!: Column</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">&lt;Table</span><br><span class="line">        v-loading=<span class="string">"loadings.fetch"</span></span><br><span class="line">        :data=<span class="string">"tableData"</span></span><br><span class="line">        :table-columns=<span class="string">"tableColumns"</span></span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  components: &#123; Pagination, Search, CreateCoupon, CreateAccountCoupon, Table &#125;,</span><br><span class="line">  name: <span class="string">'coupon'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  loadings = &#123; fetch: <span class="literal">false</span> &#125;</span><br><span class="line">  tableData: <span class="built_in">any</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// table 列</span></span><br><span class="line">  <span class="keyword">get</span> tableColumns(): Column[] &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'创建人'</span>,</span><br><span class="line">        prop: <span class="string">'userInfo.nickname'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'主体名称'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.$createElement(CopyAccountTableColumnNew, &#123;</span><br><span class="line">            props: &#123;</span><br><span class="line">              align: <span class="string">'center'</span>,</span><br><span class="line">              <span class="string">'name-key'</span>: row?.accountInfo?.verifiedName,</span><br><span class="line">              <span class="string">'id-key'</span>: row?.accountInfo?.id,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'来源'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.couponSourceEnumMap.get(row.source)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'类型'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.couponTypeEnumMap.get(row?.couponTemplate?.type)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'使用场景'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> row.couponTemplate.usage.map(<span class="function">(<span class="params">item: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">this</span>.couponUsageEnumMap.get(item)).join(<span class="string">'|'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'折扣'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.convert(row)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'状态'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.couponStatusMap.get(row.status)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'创建时间'</span>,</span><br><span class="line">        prop: <span class="string">'createTime'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">this</span>.timeFormatter(row, col, value),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'过期时间'</span>,</span><br><span class="line">        prop: <span class="string">'expiredAt'</span>,</span><br><span class="line">        align: <span class="string">'center'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">this</span>.timeFormatter(row, col, value),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'操作'</span>,</span><br><span class="line">        formatter: <span class="function">(<span class="params">row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">this</span>.tableBtn(row, col, value),</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  timeFormatter(row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> moment(value).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 操作按钮</span></span><br><span class="line"><span class="comment">   * 文档 https://vuejs.org/v2/guide/render-function.html#createElement-Arguments</span></span><br><span class="line"><span class="comment">   * @param row</span></span><br><span class="line"><span class="comment">   * @param col</span></span><br><span class="line"><span class="comment">   * @param value</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  tableBtn(row: <span class="built_in">any</span>, col: <span class="built_in">any</span>, value: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> h = <span class="keyword">this</span>.$createElement</span><br><span class="line">    <span class="keyword">return</span> h(</span><br><span class="line">      <span class="string">'el-button'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        style: &#123;</span><br><span class="line">          fontSize: <span class="string">'18px;'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        props: &#123;</span><br><span class="line">          size: <span class="string">'mini'</span>,</span><br><span class="line">          plain: <span class="literal">true</span>,</span><br><span class="line">          <span class="keyword">type</span>: <span class="string">'text'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        on: &#123;</span><br><span class="line">          click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">              name: <span class="string">'couponRecords'</span>,</span><br><span class="line">              params: &#123;</span><br><span class="line">                accountCouponId: row?.id,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      [<span class="string">'使用详情'</span>],</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript泛型的使用</title>
      <link href="typescript%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>typescript%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="keyof-指的是把我们一个对象里面的-键值对里的键【key】-给罗列取出来，并把它们联合起来形成一种联合类型"><a href="#keyof-指的是把我们一个对象里面的-键值对里的键【key】-给罗列取出来，并把它们联合起来形成一种联合类型" class="headerlink" title="keyof 指的是把我们一个对象里面的 键值对里的键【key】 给罗列取出来，并把它们联合起来形成一种联合类型"></a>keyof 指的是把我们一个对象里面的 键值对里的键【key】 给罗列取出来，并把它们联合起来形成一种联合类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type QunYou = Person &amp; QunYouAttribute;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  QunYou = &#123;</span></span><br><span class="line"><span class="comment">    name: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">    isLsp: boolean;</span></span><br><span class="line"><span class="comment">    sex: '男' | '女' | 0 | 1;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">type QunYouKeys = keyof QunYou; <span class="comment">// "name" | "age" | "isLsp" | "sex"</span></span><br></pre></td></tr></table></figure><p><code>in</code> 又是什么</p><p>Partial<t> 里面的 P 充当了另一个泛型。</t></p><p>in 在这里充当一个遍历的作用</p><p>把 <code>keyof T</code> 进行一个个遍历并且每个都单独拿出来生成新的 “键值对”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部就会变成这样</span></span><br><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type newQunyou = Partial&lt;QunYou&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type Partial&lt;QunYou&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> <span class="string">'name'</span> | <span class="string">'age'</span> | <span class="string">'isLsp'</span> | <span class="string">'sex'</span>]?: QunYou[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type Partial = &#123;</span><br><span class="line">  name?: QunYou[<span class="string">"name"</span>];</span><br><span class="line">  age?: QunYou[<span class="string">"age"</span>];</span><br><span class="line">  isLsp?: QunYou[<span class="string">"isLsp"</span>];</span><br><span class="line">  sex?:QunYou[<span class="string">"sex"</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type Partial = &#123;</span><br><span class="line">  name?: string;</span><br><span class="line">  age?: number;</span><br><span class="line">  isLsp?: boolean;</span><br><span class="line">  sex?: <span class="string">'男'</span> | <span class="string">'女'</span> | <span class="number">0</span> | <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以这个 <code>Partial</code> 就达到我们的效果 【通过泛型让目标类型中的所有属性变为可选】</p><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过上面 <code>Partial</code> 讲解这个 <code>Pick</code> 相信大伙应该好理解很多了。</p><p>Pick 接收两个参数做泛型。</p><p>这里第二个泛型 K 后面跟着约束条件 K extends keyof T，</p><p>泛型 的 <code>extends</code>， 与后续 运算的 extends 需要稍微留心做个区分。 这次看 extends 在这里充当 类似于判断的 “约束” 角色</p><p>意思就是说 这个 K 必须 符合 keyof T 这个集合里面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">type QunYou = Person &amp; QunYouAttribute;</span><br><span class="line"></span><br><span class="line">type QunYouOnlyLsp = Pick&lt;QunYou, <span class="string">'name'</span> | <span class="string">'isLsp'</span>&gt;;</span><br><span class="line"><span class="comment">// 内部就会变成这样</span></span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type QunYouOnlyLsp = Pick&lt;QunYou, <span class="string">"name"</span> | <span class="string">"isLsp"</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line"><span class="comment">// "name" | "isLsp"  是否包含在 K的集合里面？ 是的，符合要求</span></span><br><span class="line">type Pick&lt;QunYou, <span class="string">"name"</span> | <span class="string">"isLsp"</span>&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> <span class="string">'name'</span> | <span class="string">'isLsp'</span>]: QunYou[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type Pick = &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  isLsp: boolean;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extract from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Extract&lt;T, U&gt; = T extends U ? T : never;</span><br><span class="line"></span><br><span class="line">就是在一个对象中取出你想要的几个值</span><br><span class="line">Extract&lt;QunYou, <span class="string">'name'</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Omit-和-Exclude"><a href="#Omit-和-Exclude" class="headerlink" title="Omit 和 Exclude"></a>Omit 和 Exclude</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Exclude&lt;T, U&gt; = T extends U ? never : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with the properties of T except for those in type K.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure><blockquote><p>这里是 运算的 extends 书接上面 的泛型 的 extends，在此处记得对比。</p></blockquote><p>同样扮演 “判断” 的角色， 但是 在所谓 “TS 中的三目运算符” 里面，</p><p>更像是一层 “过滤” 的作用。</p><p>我们依旧以上面的例子作为介绍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">type QunYou = Person &amp; QunYouAttribute;</span><br><span class="line"></span><br><span class="line">type QunDaLao = Omit&lt;QunYou, <span class="string">'name'</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type QunDaLao = Pick&lt;QunYou, Exclude&lt;keyof T, K&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要观察Exclude</span></span><br><span class="line">type ExcludeKeys = Exclude&lt;keyof QunYou, <span class="string">"name"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓    type Exclude&lt;T, U&gt; = T extends U ? never : T;</span></span><br><span class="line">type Exclude&lt;<span class="string">"name"</span> | <span class="string">"age"</span> | <span class="string">"isLsp"</span> | <span class="string">"sex"</span>, <span class="string">"name"</span>&gt;  =  T extends U ? never : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓ 继续观察， 它将这么去 “判断”</span></span><br><span class="line"><span class="comment">//  在  T extends U ? never : T; 里面</span></span><br><span class="line"><span class="comment">//  将 T 里面的联合类型逐个逐个 与 U 进行 约束判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  T 里面的 "name" 与 U 的 "name" (类型)符合吗？ 符合， 返回 never ，既 什么都没有。</span></span><br><span class="line"><span class="comment">//  T 里面的 "age" 与 U 的 "name" (类型)符合吗？ 不符合 返回 "age" 本身。</span></span><br><span class="line"><span class="comment">//  T 里面的 "isLsp" 与 U 的 "name" (类型)符合吗？ 不符合 返回 "isLsp" 本身。</span></span><br><span class="line"><span class="comment">//  T 里面的 "sex" 与 U 的 "name" (类型)符合吗？ 不符合 返回 "sex" 本身。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以 我们得到的结果就是 被 "过滤"后的 联合类型</span></span><br><span class="line">type ExcludeResult = <span class="string">"age"</span> | <span class="string">"isLsp"</span> | <span class="string">"sex"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么回过头继续看 Omit</span></span><br><span class="line">type QunDaLao = Pick&lt;QunYou, Exclude&lt;keyof T, K&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type QunDaLao = Pick&lt;QunYou, <span class="string">"age"</span> | <span class="string">"isLsp"</span> | <span class="string">"sex"</span>&gt;</span><br><span class="line"><span class="comment">//  嗯？是不是很熟悉了，跟上面一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以 Omit 他的结果就达到了剔除  "name"的效果</span></span><br><span class="line">type QunDaLao = &#123;</span><br><span class="line">  age: number;</span><br><span class="line">  isLsp: boolean;</span><br><span class="line">  sex: <span class="string">'男'</span> | <span class="string">'女'</span> | <span class="number">0</span> | <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后 再聊一个 infer 与 typeof 关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qunYous: QunHaiXing[] = [];</span><br><span class="line"></span><br><span class="line">type whatIsQunYou&lt;T&gt; = T extends <span class="built_in">Array</span>&lt;infer V&gt; ? V : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newQunYou: whatIsQunYou&lt;<span class="keyword">typeof</span> qunYous&gt; = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>infer 的意思是待推导一个泛型，</p><p>在这里形容更像是一个 “标记”，</p><p>我在这里先把 V 给标记了，等下你们给我推出这个 V 的类型然后让我用！</p><p>注意看 typeof 的位置，他处在泛型的位置，</p><p>这将意味着 “Ts 的 typeof” 和 “Js 和 typeof” 不是一个东西。</p><p>在普通写运行代码的地方 typeof 是真的会运行并返回出一个变量的类型字符串。</p><p>但是写在类型地方的 typeof 仅起到一个静态类型的作用（既不会真的返回一个字符串出来）</p><p>那他在这里的作用是什么</p><p>还是同一个思想，只不过他在这里 typeof 返回的是 TS 里的类型</p><p>即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qunYous: QunHaiXing[] = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newQunYou: whatIsQunYou&lt;<span class="keyword">typeof</span> qunYous&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line"><span class="keyword">const</span> newQunYou: whatIsQunYou&lt;<span class="built_in">Array</span>&lt;QunHaiXing&gt;&gt;;</span><br><span class="line"><span class="comment">// 或者是 whatIsQunYou&lt;QunHaiXing[]&gt;</span></span><br></pre></td></tr></table></figure><p>回过头继续看 whatIsQunYou 中 infer 的标记 是怎么标记法！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type whatIsQunYou&lt;T&gt; = T extends <span class="built_in">Array</span>&lt;infer V&gt; ? V : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newQunYou: whatIsQunYou&lt;<span class="built_in">Array</span>&lt;QunHaiXing&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓</span></span><br><span class="line">type whatIsQunYou&lt; <span class="built_in">Array</span>&lt;QunHaiXing&gt; &gt; = <span class="built_in">Array</span>&lt;QunHaiXing&gt; extends <span class="built_in">Array</span>&lt;infer V&gt; ? V : never;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T 里面的 Array&lt;QunHaiXing&gt; 与 Array&lt;infer V&gt; 类型是否符合吗？ 符合， 符合返回 V</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 等等！ V 是什么！！！</span></span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line"><span class="comment">// 我们看看位置进行“对比”</span></span><br><span class="line"><span class="comment">// 我们用简单的语言进行概括。</span></span><br><span class="line"><span class="comment">// 把尖括号的位置 一样的！就赋值给 V！</span></span><br><span class="line"><span class="comment">// Array&lt;QunHaiXing&gt; 与 Array&lt;infer V&gt; 对比下</span></span><br><span class="line"><span class="comment">// 很明显 QunHaiXing 这个类型符合 V 的位置 所以把他赋值给V</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新来！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// T 里面的 Array&lt;QunHaiXing&gt; 与 Array&lt;infer V&gt; 类型是否符合吗？ 符合， 符合返回 QunHaiXing</span></span><br></pre></td></tr></table></figure><p>这就是 infer 具有推导作用的关键字。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p><a href="https://zhuanlan.zhihu.com/p/361968852" target="_blank" rel="external nofollow noopener noreferrer">文章来源</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用 1"></a>使用 1</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冻结客户类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> BlockOrUnblockCustomerActionEnum &#123;</span><br><span class="line">  <span class="comment">/** 永久冻结 */</span></span><br><span class="line">  TEMPORARY_BLOCK = <span class="string">'TEMPORARY_BLOCK'</span>,</span><br><span class="line">  <span class="comment">/** 临时冻结 */</span></span><br><span class="line">  PERMANENT_BLOCK = <span class="string">'PERMANENT_BLOCK'</span>,</span><br><span class="line">  <span class="comment">/** 解冻 */</span></span><br><span class="line">  UNBLOCK = <span class="string">'UNBLOCK'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冻结客户理由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> BlockOrUnblockCustomerReasonEnum &#123;</span><br><span class="line">  CUSTOMER_REQUEST = <span class="string">'CUSTOMER_REQUEST'</span>,</span><br><span class="line">  CLIENT_REQUEST = <span class="string">'CLIENT_REQUEST'</span>,</span><br><span class="line">  DECEASED = <span class="string">'DECEASED'</span>,</span><br><span class="line">  ACCOUNT_CLOSURE = <span class="string">'ACCOUNT_CLOSURE'</span>,</span><br><span class="line">  SUSPICIOUS_ACTIVITY = <span class="string">'SUSPICIOUS_ACTIVITY'</span>,</span><br><span class="line">  FRAUDULENT_ACTIVITY = <span class="string">'FRAUDULENT_ACTIVITY'</span>,</span><br><span class="line">  POTENTIAL_SANCTION = <span class="string">'POTENTIAL_SANCTION'</span>,</span><br><span class="line">  SANCTIONED_CUSTOMER = <span class="string">'SANCTIONED_CUSTOMER'</span>,</span><br><span class="line">  BLACKLISTED_CUSTOMER = <span class="string">'BLACKLISTED_CUSTOMER'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> IBlockOrUnblockCustomerReason = &#123;</span><br><span class="line">  [BlockOrUnblockCustomerActionEnum.PERMANENT_BLOCK]: BlockOrUnblockCustomerReasonEnum;</span><br><span class="line">  [BlockOrUnblockCustomerActionEnum.TEMPORARY_BLOCK]: Extract&lt;</span><br><span class="line">    BlockOrUnblockCustomerReasonEnum,</span><br><span class="line">    | BlockOrUnblockCustomerReasonEnum.CUSTOMER_REQUEST</span><br><span class="line">    | BlockOrUnblockCustomerReasonEnum.CLIENT_REQUEST</span><br><span class="line">    | BlockOrUnblockCustomerReasonEnum.SUSPICIOUS_ACTIVITY</span><br><span class="line">    | BlockOrUnblockCustomerReasonEnum.POTENTIAL_SANCTION</span><br><span class="line">  &gt;;</span><br><span class="line">  [BlockOrUnblockCustomerActionEnum.UNBLOCK]: Extract&lt;</span><br><span class="line">    BlockOrUnblockCustomerReasonEnum,</span><br><span class="line">    BlockOrUnblockCustomerReasonEnum.CUSTOMER_REQUEST | BlockOrUnblockCustomerReasonEnum.CLIENT_REQUEST</span><br><span class="line">  &gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> BlockOrUnblockCustomerInput&lt;K <span class="keyword">extends</span> BlockOrUnblockCustomerActionEnum, T <span class="keyword">extends</span> IBlockOrUnblockCustomerReason&gt; = &#123;</span><br><span class="line">  <span class="comment">// 冻结类型</span></span><br><span class="line">  action: K;</span><br><span class="line">  <span class="comment">// 理由</span></span><br><span class="line">  reason: T[K];</span><br><span class="line">  <span class="comment">// 自定义</span></span><br><span class="line">  comment?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> blockOrUnblockCustomer&lt;K <span class="keyword">extends</span> BlockOrUnblockCustomerActionEnum, T <span class="keyword">extends</span> IBlockOrUnblockCustomerReason&gt;(</span><br><span class="line">    customerHashId: <span class="built_in">string</span>,</span><br><span class="line">    dataParams: BlockOrUnblockCustomerInput&lt;K, T&gt;,</span><br><span class="line">  ) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用 2"></a>使用 2</h3><p>实现 a 和 b 的类型是动态的; has_more 是不变的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Data &#123;</span><br><span class="line">  has_more: <span class="built_in">boolean</span>;</span><br><span class="line">  a: &#123;</span><br><span class="line">    id: <span class="built_in">string</span>;</span><br><span class="line">  &#125;[];</span><br><span class="line">  b: &#123;</span><br><span class="line">    id: <span class="built_in">string</span>;</span><br><span class="line">    <span class="built_in">number</span>: <span class="built_in">string</span>;</span><br><span class="line">  &#125;[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Partial2&lt;K <span class="keyword">extends</span> keyof Data&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: Data[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b: Partial2&lt;<span class="string">"a"</span> | <span class="string">"has_more"</span>&gt; = &#123;</span><br><span class="line">  a: [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="string">"1"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  has_more: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nestjs单元测试</title>
      <link href="nestjs%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>nestjs%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><ol><li>You are trying to <code>import</code> a file after the Jest environment has been torn down.<br>或者 TypeError: Right-hand side of ‘instanceof’ is not an object</li></ol><p>在最外层加上 <code>jest.useFakeTimers();</code></p><ol start="2"><li>Timeout - Async callback was not invoked within the 5000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 5000 ms timeout specified by jest.setTimeout.Error:</li></ol><p>超时错误<br>在最外层加上 <code>jest.setTimeout(1000000);</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> nestjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs下载文件遇到内存超出导致pm2重启</title>
      <link href="nodejs%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%81%87%E5%88%B0%E5%86%85%E5%AD%98%E8%B6%85%E5%87%BA%E5%AF%BC%E8%87%B4pm2%E9%87%8D%E5%90%AF/"/>
      <url>nodejs%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%81%87%E5%88%B0%E5%86%85%E5%AD%98%E8%B6%85%E5%87%BA%E5%AF%BC%E8%87%B4pm2%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<p>例子如下，由于 request 下载速度特别快，而自定义的处理方法更不上导致流一直写在内存中得不到释放，所以这里加上了 req.pause();和 req.resume();</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> req = request</span><br><span class="line">    .get(url)</span><br><span class="line">    .auth(worldCheck.userName, worldCheck.password, <span class="literal">false</span>)</span><br><span class="line">    .on(<span class="string">"response"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"开始"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"data"</span>, <span class="keyword">async</span> (chunk: any) =&gt; &#123;</span><br><span class="line">      <span class="comment">// _md5.update(chunk);</span></span><br><span class="line">      <span class="comment">// 暂停</span></span><br><span class="line">      req.pause();</span><br><span class="line">      <span class="keyword">let</span> data = chunk.toString();</span><br><span class="line">      <span class="keyword">if</span> (lastRow) &#123;</span><br><span class="line">        data = lastRow + data;</span><br><span class="line">        lastRow = <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> rows: any[] = [];</span><br><span class="line">      <span class="comment">// 数据正好完整</span></span><br><span class="line">      <span class="keyword">if</span> (data.slice(data.length - <span class="number">2</span>) === <span class="string">"\r\n"</span>) &#123;</span><br><span class="line">        rows = data.split(<span class="regexp">/[\r\n]/</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rows = data.split(<span class="regexp">/[\r\n]/</span>);</span><br><span class="line">        lastRow = rows.pop();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理数据</span></span><br><span class="line">      <span class="keyword">if</span> (type === DownloadFileEnum.Wc1) &#123;</span><br><span class="line">        <span class="keyword">await</span> $<span class="keyword">this</span>.dealRows(rows);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === DownloadFileEnum.Wc1Names) &#123;</span><br><span class="line">        <span class="keyword">await</span> $<span class="keyword">this</span>.dealNamesRows(rows);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 恢复</span></span><br><span class="line">      req.resume();</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"error"</span>, (err: any) =&gt; &#123;</span><br><span class="line">      Logger4.error(err);</span><br><span class="line">      reject(<span class="literal">false</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"end"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// console.log('结束');</span></span><br><span class="line">      <span class="comment">// const newSign = _md5.digest('hex');</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// if (newSign === sign) &#123;</span></span><br><span class="line">      <span class="comment">// 数据正确 保存到数据库</span></span><br><span class="line">      <span class="comment">// 保存最后一行数据</span></span><br><span class="line">      <span class="keyword">if</span> (lastRow) &#123;</span><br><span class="line">        <span class="keyword">const</span> rows = [lastRow];</span><br><span class="line">        <span class="keyword">if</span> (type === DownloadFileEnum.Wc1) &#123;</span><br><span class="line">          <span class="keyword">await</span> $<span class="keyword">this</span>.dealRows(rows);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === DownloadFileEnum.Wc1Names) &#123;</span><br><span class="line">          <span class="keyword">await</span> $<span class="keyword">this</span>.dealNamesRows(rows);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      reslove(<span class="literal">true</span>);</span><br><span class="line">      <span class="comment">// &#125; else &#123;</span></span><br><span class="line">      <span class="comment">//   reject(false);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"close"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"关闭"</span>);</span><br><span class="line">      req.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统中限制了用户可以watch文件变更的最大数</title>
      <link href="linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%99%90%E5%88%B6%E4%BA%86%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5watch%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
      <url>linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%99%90%E5%88%B6%E4%BA%86%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5watch%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>启动或者编译报<br>System limit for number of file watchers reached</p><p>原因：<br>linux 系统中限制了用户可以 watch 文件变更的最大数，因此需要通过 sysctl.conf 进行更改数值</p><p>临时限额增加可以设置新的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl fs.inotify.max_user_watches = 524288</span><br><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></table></figure><p>永久增加限额</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf</span><br><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux环境下安装elasticsearch</title>
      <link href="linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85elasticsearch/"/>
      <url>linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85elasticsearch/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>1.ElasticSearch 下载地址：</p><p><code>https://www.elastic.co/downloads/elasticsearch</code>（最新 es）</p><p>如果你想要下载其他版本请访问<code>https://www.elastic.co/cn/downloads/past-releases#elasticsearch</code></p><p>我这里选择的是 7.12.0<br>进入/home 文件夹下（最好不要放在 root 下，会报错）<br>下载命令<br><code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.12.0-linux-x86_64.tar.gz</code></p><a id="more"></a><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><code>tar -xzvf elasticsearch-7.12.0-linux-x86_64.tar.gz</code></p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>adduser elasticsearch（回车 按照提示输入两次密码，其他的直接回车）</p><h2 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h2><p>chown -R elasticsearch elasticsearch-7.12.0<br>可以使用（ll 命令查看）</p><h2 id="进入新用户"><a href="#进入新用户" class="headerlink" title="进入新用户"></a>进入新用户</h2><p>su elasticsearch</p><h2 id="配置-elasticsearch-自带-jdk"><a href="#配置-elasticsearch-自带-jdk" class="headerlink" title="配置 elasticsearch 自带 jdk"></a>配置 elasticsearch 自带 jdk</h2><p>修改 bin 下 elasticsearch-env 文件<br><code>vim elasticsearch-env</code><br><img src="https://img-blog.csdnimg.cn/20210621204459266.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> [ ! -z <span class="string">"<span class="variable">$JAVA_HOME</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># fallback to JAVA_HOME</span></span><br><span class="line">  <span class="comment"># 取消警告</span></span><br><span class="line">  <span class="comment"># echo "warning: usage of JAVA_HOME is deprecated, use ES_JAVA_HOME" &gt;&amp;2</span></span><br><span class="line">  JAVA=<span class="string">"/home/elasticsearch/elasticsearch-7.12.0/jdk/bin/java"</span></span><br><span class="line">  JAVA_TYPE=<span class="string">"JAVA_HOME"</span></span><br></pre></td></tr></table></figure><p>保存就好</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在 bin 下<br><code>./elasticsearch</code> 或者<br>后台启动 <code>./elasticsearch -d</code></p><p>检测是否正常启动<br>lsof -i:9200<br>curl 127.0.0.1:9200</p><h2 id="其他配置（可以不用配置）"><a href="#其他配置（可以不用配置）" class="headerlink" title="其他配置（可以不用配置）"></a>其他配置（可以不用配置）</h2><p>配置让外网访问<br>vim config/elasticsearch.yml<br><code>network.host: 0.0.0.0</code></p><h2 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h2><ol><li><p>could not find java in JAVA_HOME at ￥ ELASTIC_HOME/jdk//bin/java<br>这是 jdk 版本问题</p></li><li><p>Error: Could not find or load main class org.elasticsearch.tools.java_version_checker.JavaVersionCh</p></li></ol><p>把 elasticsearch 目录换到不属于 root 目录的其他目录就行了</p><p>3.</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210621203731298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不能使用 root 用户启动</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10环境下安装elasticsearch</title>
      <link href="windows10%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85elasticsearch/"/>
      <url>windows10%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85elasticsearch/</url>
      
        <content type="html"><![CDATA[<p>注意 现在安装 Elasticsearch 可以不需要去安装 jdk 有自带</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>1.ElasticSearch 下载地址：</p><p><code>https://www.elastic.co/downloads/elasticsearch</code>（最新 es）</p><p>如果你想要下载其他版本请访问<code>https://www.elastic.co/cn/downloads/past-releases#elasticsearch</code></p><a id="more"></a><p>2.下载安装包后解压<br><img src="https://img-blog.csdnimg.cn/20210619201301236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>进入 bin 目录下,双击执行 elasticsearch.bat<br><code>注意</code>:在启动前需要配置 jdk 环境，如果你本地已经配置了 jdk 就需要注意 jdk 版本问题，由于 es 现在都自带 jdk,所以使用 vscode 或者其他工具编辑<code>elasticsearch-certgen.bat</code><br>加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rem 配置自己的jdk</span><br><span class="line"><span class="keyword">set</span> JAVA_HOME=D:/downloads/elasticsearch-7.12.0-windows-x86_64/elasticsearch-7.12.0/jdk</span><br></pre></td></tr></table></figure><p><code>注意上面的路径是你es解压后的路径</code></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>双击启动 或者打开命令进入 bin 文件夹 写入 <code>.\elasticsearch</code> 回车执行，如下就是执行成功<br><img src="https://img-blog.csdnimg.cn/20210619201819898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><img src="https://img-blog.csdnimg.cn/20210619202035515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="ElasticSearch-安装为-Windows-服务"><a href="#ElasticSearch-安装为-Windows-服务" class="headerlink" title="ElasticSearch 安装为 Windows 服务"></a>ElasticSearch 安装为 Windows 服务</h2><p>由于每次都要这样启动太麻烦了，es 还提供了加入 Windows 服务的命令</p><p>elasticsearch 的 bin 目录下有一个 elasticsearch-service.bat<br><img src="https://img-blog.csdnimg.cn/20210619202930826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一个命令是安装服务，第二个命令是启动，这样就不用一直开着命令窗口了</p><p>其他命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-service.bat后面还可以执行这些命令</span><br><span class="line">install: 安装Elasticsearch服务</span><br><span class="line">remove: 删除已安装的Elasticsearch服务（如果启动则停止服务）</span><br><span class="line">start: 启动Elasticsearch服务（如果已安装）</span><br><span class="line">stop: 停止服务（如果启动）</span><br><span class="line">manager:启动GUI来管理已安装的服务</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nest遇到的问题</title>
      <link href="%E4%BD%BF%E7%94%A8nest%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>%E4%BD%BF%E7%94%A8nest%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h2><p>访问接口报下面警告<br>No metadata found. There is more than once class-validator version installed probably. You need to flatten your dependencies<br>原因 是类验证版本有问题<br>处理 <code>npm install --save class-validator</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> nestjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-socket.io的使用</title>
      <link href="vue-socket-io%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>vue-socket-io%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>ts + vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module, VuexModule, Mutation, Action, getModule &#125; <span class="keyword">from</span> <span class="string">'vuex-module-decorators'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'@/main'</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'@/store/modules/user'</span></span><br><span class="line"></span><br><span class="line">@Module(&#123; <span class="attr">dynamic</span>: <span class="literal">true</span>, store, <span class="attr">name</span>: <span class="string">'WebSocket'</span> &#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSocket</span> <span class="keyword">extends</span> <span class="title">VuexModule</span> </span>&#123;</span><br><span class="line">  connect_status: <span class="built_in">Boolean</span> = <span class="literal">false</span> <span class="comment">// 连接状态</span></span><br><span class="line">  message: any <span class="comment">// 全局消息</span></span><br><span class="line">  env = process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_CONNECT() &#123;</span><br><span class="line">    <span class="keyword">this</span>.connect_status = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.env) <span class="built_in">console</span>.log(<span class="string">'socket连接成功==========&gt;'</span>, <span class="keyword">this</span>.connect_status)</span><br><span class="line">  &#125;</span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_CONNECT_ERROR() &#123;</span><br><span class="line">    <span class="keyword">this</span>.connect_status = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.env) <span class="built_in">console</span>.log(<span class="string">'socket连接失败==========&gt;'</span>, <span class="keyword">this</span>.connect_status)</span><br><span class="line">  &#125;</span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_DISCONNECT() &#123;</span><br><span class="line">    <span class="keyword">this</span>.connect_status = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.env) <span class="built_in">console</span>.log(<span class="string">'socket连接断开==========&gt;'</span>, <span class="keyword">this</span>.connect_status)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_NOTIFICATION(message: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = message</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Mutation</span><br><span class="line">  private SOCKET_JOINACCOUNTROOM(data: any) &#123;</span><br><span class="line">    App.$socket.emit(<span class="string">'joinAccountRoom'</span>, &#123;</span><br><span class="line">      accountId: data.accountId,</span><br><span class="line">      userId: data.userId,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Action</span><br><span class="line">  socket_connect() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_CONNECT'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  @Action</span><br><span class="line">  socket_disconnet() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_DISCONNECT'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  @Action</span><br><span class="line">  socket_reconnect() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'重连成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器重启 重新加入私有房间</span></span><br><span class="line">    <span class="keyword">const</span> accountId = UserModule.accountId</span><br><span class="line">    <span class="keyword">const</span> userId = UserModule.userId</span><br><span class="line">    <span class="built_in">console</span>.log(accountId, userId)</span><br><span class="line">    <span class="keyword">if</span> (accountId &amp;&amp; userId)</span><br><span class="line">      <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_JOINACCOUNTROOM'</span>, &#123;</span><br><span class="line">        accountId,</span><br><span class="line">        userId,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  @Action</span><br><span class="line">  socket_connect_error() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_CONNECT_ERROR'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Action <span class="comment">// notification 与后端 通知的方法名称一致</span></span><br><span class="line">  socket_notification(message: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_NOTIFICATION'</span>, message)</span><br><span class="line">  &#125;</span><br><span class="line">  @Action <span class="comment">// 加入私有房间</span></span><br><span class="line">  socket_joinAccountRoom(data: any) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.connect_status) <span class="keyword">this</span>.context.commit(<span class="string">'SOCKET_JOINACCOUNTROOM'</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> WebSocketModule = getModule(WebSocket)</span><br></pre></td></tr></table></figure><p>在 main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(</span><br><span class="line">  <span class="keyword">new</span> VueSocketIO(&#123;</span><br><span class="line">    debug: process.env.NODE_ENV === <span class="string">"development"</span>,</span><br><span class="line">    connection: process.env.VUE_APP_SOCKET_UEL || <span class="string">""</span>,</span><br><span class="line">    vuex: &#123;</span><br><span class="line">      store,</span><br><span class="line">      actionPrefix: <span class="string">"socket_"</span>,</span><br><span class="line">      mutationPrefix: <span class="string">"SOCKET_"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 app.vue 导入 就可以用了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"@/store/modules/websocket"</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker搭建Elasticsearch-ik中文分词器-安装Kibana可视化工具</title>
      <link href="docker%E6%90%AD%E5%BB%BAElasticsearch-ik%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8-%E5%AE%89%E8%A3%85Kibana%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
      <url>docker%E6%90%AD%E5%BB%BAElasticsearch-ik%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8-%E5%AE%89%E8%A3%85Kibana%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Elasticsearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 Apache Lucene™ 基础之上。 Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库—​ 无论是开源还是私有。</p><p>但是 Lucene 仅仅只是一个库。为了充分发挥其功能，你需要使用 Java 并将 Lucene 直接集成到应用程序中。 更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理。Lucene 非常 复杂。</p><p>Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索，但是它的目的是使全文检索变得简单， 通过隐藏 Lucene 的复杂性，取而代之的提供一套简单一致的 RESTful API。</p><p>然而，Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。 它可以被下面这样准确的形容：</p><p>一个分布式的实时文档存储，每个字段 可以被索引与搜索<br>一个分布式实时分析搜索引擎<br>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据<br>Elasticsearch 将所有的功能打包成一个单独的服务，这样你可以通过程序与它提供的简单的 RESTful API 进行通信， 可以使用自己喜欢的编程语言充当 web 客户端，甚至可以使用命令行（去充当这个客户端）。</p><p>就 Elasticsearch 而言，起步很简单。对于初学者来说，它预设了一些适当的默认值，并隐藏了复杂的搜索理论知识。 它 开箱即用 。只需最少的理解，你很快就能具有生产力。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/routing-value.html" target="_blank" rel="external nofollow noopener noreferrer">Elasticsearch 中文文档</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/16.x/index.html" target="_blank" rel="external nofollow noopener noreferrer">Elasticsearch 英文文档</a><br><a href="https://github.com/nestjs/elasticsearch" target="_blank" rel="external nofollow noopener noreferrer">nestjs 使用 Elasticsearch 文档</a><br><a href="https://www.elastic.co/cn/" target="_blank" rel="external nofollow noopener noreferrer">elastic 介绍</a></p><h2 id="安装-Elasticsearch-的镜像用-7-9-0"><a href="#安装-Elasticsearch-的镜像用-7-9-0" class="headerlink" title="安装 Elasticsearch 的镜像用 7.9.0"></a>安装 Elasticsearch 的镜像用 7.9.0</h2><p><code>docker pull elasticsearch:7.9.0</code></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> \</span><br><span class="line">-e <span class="string">"discovery.type=single-node"</span> \</span><br><span class="line">-d --name elasticsearch \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">elasticsearch:7.9.0</span><br></pre></td></tr></table></figure><p>可以增加文件映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v /data/docker/elastic/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /data/docker/elastic/data:/usr/share/elasticsearch/data \</span><br></pre></td></tr></table></figure><p>-p  指定容器暴露的端口<br>    9200 作为 Http 协议，主要用于外部通讯；<br>    9300 指定容器暴露的端口</p><p>在浏览器访问 http://你的服务器 ip:9200 如下 说明启动成功</p><p><img src="https://img-blog.csdnimg.cn/2021041814472763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装-ik-分词器我也是用-7-9-0-版本的"><a href="#安装-ik-分词器我也是用-7-9-0-版本的" class="headerlink" title="安装 ik 分词器我也是用 7.9.0 版本的"></a>安装 ik 分词器我也是用 7.9.0 版本的</h2><p>下载地址<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/medcl/elasticsearch-analysis-ik/releases</a><br>找到 7.9.0 版本 并且下载下来放到服务器上</p><h3 id="进入-es-的容器里"><a href="#进入-es-的容器里" class="headerlink" title="进入 es 的容器里"></a>进入 es 的容器里</h3><p><code>docker exec -it elasticsearch /bin/bash</code></p><p><img src="https://img-blog.csdnimg.cn/20210418145051498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在 plugins 目录下创建 ik 文件夹：<br><code>mkdir /usr/share/elasticsearch/plugins/ik</code></p><p>退出容器：<code>exit</code></p><p>拷贝下载好的 ik 分词器压缩包到 ik 文件夹中：</p><p><code>docker cp elasticsearch-analysis-ik-7.9.0.zip elasticsearch:/usr/share/elasticsearch/plugins/ik/</code></p><p>再进入容器：<br><code>docker exec -it elasticsearch /bin/bash</code></p><p>进入 IK 文件夹下<br><code>cd plugins/ik/</code></p><p>解压文件<br><code>unzip elasticsearch-analysis-ik-7.9.0.zip</code></p><p>退出容器 重启<br><code>docker restart elasticsearch</code></p><p>查看 ik 分词器是否安装成功 可已经进去 es 容器里的 bin 目录下</p><p><code>elasticsearch-plugin list</code></p><p><img src="https://img-blog.csdnimg.cn/2021041814545176.png" alt="在这里插入图片描述"></p><p>修改配置，解决跨域访问问题</p><p>首先进入到容器中，然后进入到指定目录修改 elasticsearch.yml 文件。<br><code>docker exec -it elasticsearch</code><br><code>vi elasticsearch.yml</code><br>在 elasticsearch.yml 的文件末尾加上:<br><code>http.cors.enabled: true</code><br><code>http.cors.allow-origin: &quot;\*&quot;</code><br>修改配置后重启容器即可。<br><code>docker restart elasticsearch</code></p><h2 id="Kibana-7-可视化工具"><a href="#Kibana-7-可视化工具" class="headerlink" title="Kibana 7 可视化工具"></a>Kibana 7 可视化工具</h2><p><code>docker pull kibana:7.9.0</code></p><p><code>docker run -d -p 5601:5601 --name kibana --link elasticsearch7.9.0:elasticsearch7.9.0 docker.io/kibana:7.9.0</code></p><ol><li>如果报错 <code>kibana报错Unable to revive connection: http://172.16.23.126:9200/</code></li></ol><p><code>docker inspect elasticsearch</code> 查看 ES 容器暴露出来的 ip</p><p><img src="https://img-blog.csdnimg.cn/20210421094333915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查询配置文件<br><code>find / -name kibana.yml</code></p><p>写入对应 ip<br><img src="https://img-blog.csdnimg.cn/20210421095241497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>重启<br>docker restart kibana</p><ol start="2"><li>kibana 启动报 server is not ready yet <code>https://www.jianshu.com/p/a698eddb6cec</code></li></ol><p>kibana 对应的索引已经在 es 中创建 需要 删除对应索引</p><p><img src="https://img-blog.csdnimg.cn/20210421095628154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>查看内存 <code>free -h</code> 启动失败还有可能是内存不够</li></ol><p>查看索引<br><code>curl localhost:9200/_cat/indices?v</code><br>删除索引,通配符形式<br><code>curl -XDELETE localhost:9200/索引*</code><br>索引起别名<br><code>curl -XPUT localhost:9200/索引/_alias/别名</code><br>查看别名<br><code>curl -XPUT localhost:9200/_cat/aliases?v</code></p><ol start="3"><li>还可以指定端口启动<br><code>docker run -d -p 5601:5601 --name kibana -e ELASTICSEARCH_HOSTS=http://172.17.0.3:9200 docker.io/kibana:7.9.0</code></li></ol><p>启动特别慢 要等久点</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ol><li>运行一段时间 访问 Kibana 显示 Data too large 问题</li></ol><p>解决<br>使用 potman 发送请求<br>put <a href="https://127.0.0.1:9200/_cluster/settings" target="_blank" rel="external nofollow noopener noreferrer">https://127.0.0.1:9200/_cluster/settings</a> (参数格式 application/json)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"persistent"</span> : &#123;</span><br><span class="line"><span class="string">"indices.breaker.fielddata.limit"</span> : <span class="string">"40%"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-socket.io跨域问题的解决方法</title>
      <link href="vue-socket-io%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>vue-socket-io%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>错误提示如下<br><code>Access to XMLHttpRequest at &#39;https://global.notice.qbitnetwork.com/socket.io/?EIO=3&amp;transport=polling&amp;t=NZOyCjd&#39; from origin &#39;http://localhost:9527&#39; has been blocked by CORS policy: The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;\*&#39; when the request&#39;s credentials mode is &#39;include&#39;. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</code></p><p>服务器要在 cors 增加配置 credentials: true,</p><p>在 nestjs 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.enableCors(&#123;</span><br><span class="line">  credentials: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeorm+nestjs的使用(二)</title>
      <link href="typeorm-nestjs%E7%9A%84%E4%BD%BF%E7%94%A8(%E4%BA%8C)/"/>
      <url>typeorm-nestjs%E7%9A%84%E4%BD%BF%E7%94%A8(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [data, total] =</span><br><span class="line">  (<span class="keyword">await</span> createQueryBuilder) &lt;</span><br><span class="line">  T &gt;</span><br><span class="line">  (T, tableName)</span><br><span class="line">    .skip(queryParams.pagination.page * queryParams.pagination.limit)</span><br><span class="line">    .take(queryParams.pagination.limit)</span><br><span class="line">    .where(customCondition)</span><br><span class="line">    .orderBy(orderByCondition)</span><br><span class="line">    .getManyAndCount();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Pagination() &lt; T &gt; &#123; data, total &#125;;</span><br></pre></td></tr></table></figure><h2 id="graphql-的使用"><a href="#graphql-的使用" class="headerlink" title="graphql 的使用"></a>graphql 的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Write your query or mutation here</span><br><span class="line">query ($queryParams: QueryParams!) &#123;</span><br><span class="line">  accounts(queryParams: $queryParams) &#123;</span><br><span class="line">    total</span><br><span class="line">    pageTotal</span><br><span class="line">    data &#123;</span><br><span class="line">      id</span><br><span class="line">      remarks</span><br><span class="line">      verifiedName</span><br><span class="line">      prevUserId</span><br><span class="line">      balances &#123;</span><br><span class="line">        id</span><br><span class="line">        walletType</span><br><span class="line">        available</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210317111537123.png" alt="在这里插入图片描述"></p><h2 id="find-使用"><a href="#find-使用" class="headerlink" title="find 使用"></a>find 使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">userRepository.find(&#123;</span><br><span class="line">    select: [<span class="string">"firstName"</span>, <span class="string">"lastName"</span>],</span><br><span class="line">    relations: [<span class="string">"profile"</span>, <span class="string">"photos"</span>, <span class="string">"videos"</span>],</span><br><span class="line">    where: &#123;</span><br><span class="line">        firstName: <span class="string">"Timber"</span>,</span><br><span class="line">        lastName: <span class="string">"Saw"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    order: &#123;</span><br><span class="line">        name: <span class="string">"ASC"</span>,</span><br><span class="line">        id: <span class="string">"DESC"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    skip: <span class="number">5</span>,</span><br><span class="line">    take: <span class="number">10</span>,</span><br><span class="line">    cache: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">LessThan &lt;</span><br><span class="line">LessThanOrEqual &lt;=   likes: LessThanOrEqual(<span class="number">10</span>)</span><br><span class="line">MoreThan &gt;</span><br><span class="line">MoreThanOrEqual &gt;=</span><br><span class="line">Equal =</span><br><span class="line">Like title: Like(<span class="string">"%out #%"</span>)</span><br><span class="line">Between likes: Between(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">In title: In([<span class="string">"About #2"</span>, <span class="string">"About #3"</span>])</span><br><span class="line">Any title: Any([<span class="string">"About #2"</span>, <span class="string">"About #3"</span>])</span><br><span class="line">IsNull title: IsNull()</span><br><span class="line">Raw Raw(<span class="string">"1 + likes = 4"</span>)</span><br><span class="line">SELECT * FROM <span class="string">"post"</span> WHERE <span class="number">1</span> + <span class="string">"likes"</span> = <span class="number">4</span></span><br><span class="line">Not</span><br><span class="line">likes: Not(MoreThan(<span class="number">10</span>)),</span><br><span class="line">title: Not(Equal(<span class="string">"About #2"</span>))</span><br><span class="line">SELECT * FROM <span class="string">"post"</span> WHERE NOT(<span class="string">"likes"</span> &gt; <span class="number">10</span>) AND NOT(<span class="string">"title"</span> = <span class="string">'About #2'</span>)</span><br></pre></td></tr></table></figure><p>1.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cards = <span class="keyword">await</span> <span class="keyword">this</span>.qbitCardRepo</span><br><span class="line">  .createQueryBuilder(<span class="string">"q"</span>)</span><br><span class="line">  .select([<span class="string">"id"</span>])</span><br><span class="line">  .where(&#123;</span><br><span class="line">    id: <span class="string">"0053edd6-4da0-4100-9899-97b099d4d9f5"</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .leftJoinAndSelect(</span><br><span class="line">    (subQuery) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> subQuery</span><br><span class="line">        .from(QbitCardTransactionRecord, <span class="string">"r"</span>)</span><br><span class="line">        .select([<span class="string">"r.id"</span>, <span class="string">'r."cardId"'</span>, <span class="string">'r."createTime"'</span>])</span><br><span class="line">        .where(&#123;&#125;)</span><br><span class="line">        .orderBy(&#123;</span><br><span class="line">          <span class="string">'r."createTime"'</span>: <span class="string">"DESC"</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .limit(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"r"</span>,</span><br><span class="line">    <span class="string">'r."cardId" = id'</span></span><br><span class="line">  )</span><br><span class="line">  .getRawMany();</span><br><span class="line"></span><br><span class="line">  SELECT <span class="string">"r"</span>.*, id FROM <span class="string">"qbitCard"</span> <span class="string">"q"</span> LEFT JOIN (SELECT <span class="string">"r"</span>.<span class="string">"id"</span> AS <span class="string">"r_id"</span>, r.<span class="string">"cardId"</span>, r.<span class="string">"createTime"</span> FROM <span class="string">"qbitCardTransactionRecord"</span> <span class="string">"r"</span> WHERE <span class="string">"r"</span>.<span class="string">"deleteTime"</span> IS NULL ORDER BY r.<span class="string">"createTime"</span> DESC LIMIT <span class="number">1</span>) <span class="string">"r"</span> ON r.<span class="string">"cardId"</span> = id WHERE ( <span class="string">"q"</span>.<span class="string">"id"</span> = $<span class="number">1</span> ) AND ( <span class="string">"q"</span>.<span class="string">"deleteTime"</span> IS NULL )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/typeorm/typeorm/issues/6767</span></span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> query = connection</span><br><span class="line">  .createQueryBuilder(Chat, <span class="string">"chat"</span>)</span><br><span class="line">  .leftJoin(<span class="string">'chat.listingMembers'</span>, <span class="string">'listingMembers'</span>)</span><br><span class="line">  .where(<span class="string">'listingMembers.id = :id'</span>, &#123;<span class="attr">id</span>: currentUser.id&#125;)</span><br><span class="line">  .leftJoinAndSelect(<span class="string">'chat.messages'</span>, <span class="string">'messages'</span>)</span><br><span class="line">  .innerJoin(<span class="string">'messages.holders'</span>, <span class="string">'holders'</span>, <span class="string">'holders.id = :userId'</span>, &#123;<span class="attr">userId</span>: currentUser.id&#125;)</span><br><span class="line">  .orderBy(&#123;</span><br><span class="line">    <span class="string">"messages.createdAt"</span>: &#123;<span class="attr">order</span>: <span class="string">"DESC"</span>, <span class="attr">nulls</span>: <span class="string">"NULLS LAST"</span>&#125;,</span><br><span class="line">    <span class="string">"chat.id"</span>: <span class="string">"DESC"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  SELECT <span class="string">"q"</span>.<span class="string">"id"</span> AS <span class="string">"q_id"</span>, <span class="string">"r"</span>.<span class="string">"id"</span> AS <span class="string">"r_id"</span>, r.<span class="string">"createTime"</span> FROM <span class="string">"qbitCard"</span> <span class="string">"q"</span> LEFT JOIN <span class="string">"qbitCardTransactionRecord"</span> <span class="string">"r"</span> ON r.<span class="string">"cardId"</span> = <span class="string">"q"</span>.<span class="string">"id"</span> WHERE ( <span class="string">"q"</span>.<span class="string">"id"</span> = $<span class="number">1</span> ) AND ( <span class="string">"q"</span>.<span class="string">"deleteTime"</span> IS NULL ) ORDER BY r.<span class="string">"createTime"</span> DESC NULLS LAST -- PARAMETERS: [<span class="string">"0053edd6-4da0-4100-9899-97b099d4d9f5"</span>]</span><br><span class="line"><span class="string">``</span></span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cards = <span class="keyword">await</span> <span class="keyword">this</span>.qbitCardRepo</span><br><span class="line">  .createQueryBuilder(<span class="string">"q"</span>)</span><br><span class="line">  .select([<span class="string">"q.id"</span>, <span class="string">"r.id"</span>, <span class="string">'r."createTime"'</span>])</span><br><span class="line">  .leftJoin(<span class="string">"qbitCardTransactionRecord"</span>, <span class="string">"r"</span>, <span class="string">'r."cardId" = q.id'</span>)</span><br><span class="line">  .where(&#123;</span><br><span class="line">    id: <span class="string">"0053edd6-4da0-4100-9899-97b099d4d9f5"</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .orderBy(&#123;</span><br><span class="line">    <span class="string">'r."createTime"'</span>: &#123; <span class="attr">order</span>: <span class="string">"DESC"</span>, <span class="attr">nulls</span>: <span class="string">"NULLS LAST"</span> &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .getRawMany();</span><br></pre></td></tr></table></figure><p>4.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="keyword">await</span> <span class="keyword">this</span>.qbitCardTransactionRecordRepo</span><br><span class="line">  .createQueryBuilder()</span><br><span class="line">  .select([<span class="string">"id"</span>, <span class="string">"content"</span>])</span><br><span class="line">  .where(<span class="string">`content::json-&gt;&gt;'authCode'=:authCode`</span>, &#123; <span class="attr">authCode</span>: <span class="string">"111"</span> &#125;)</span><br><span class="line">  .andWhere(<span class="string">`content::json-&gt;&gt;'cardHashID'=:cardHashID`</span>, &#123;</span><br><span class="line">    cardHashID: val[<span class="string">"cardHashID"</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">  .andWhere(</span><br><span class="line">    <span class="string">`content::json-&gt;&gt;'systemTraceAuditNumber'=:systemTraceAuditNumber`</span>,</span><br><span class="line">    &#123; <span class="attr">systemTraceAuditNumber</span>: val.systemTraceAuditNumber &#125;</span><br><span class="line">  )</span><br><span class="line">  .getRawOne();</span><br><span class="line"></span><br><span class="line">  SELECT id, content FROM <span class="string">"qbitCardTransactionRecord"</span> <span class="string">"QbitCardTransactionRecord"</span> WHERE ( content::json-&gt;&gt;<span class="string">'authCode'</span>=$<span class="number">1</span> AND content::json-&gt;&gt;<span class="string">'cardHashID'</span>=$<span class="number">2</span> AND content::json-&gt;&gt;<span class="string">'systemTraceAuditNumber'</span>=$<span class="number">3</span> ) AND ( <span class="string">"QbitCardTransactionRecord"</span>.<span class="string">"deleteTime"</span> IS NULL ) -- PARAMETERS: [<span class="string">"111"</span>,<span class="string">"cc3007f2-7f4b-4a4c-89bf-65e92a0d41a9"</span>,<span class="string">"940152"</span>]</span><br></pre></td></tr></table></figure><p>4.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SELECT json_array_elements(<span class="string">"statusLog"</span>)-&gt;<span class="string">'status'</span> AS status <span class="keyword">from</span> apply WHERE id = <span class="string">'adf7eabf-1230-4378-8789-c81b6ac3af55'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://blog.csdn.net/liangrui1988/article/details/54708391?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control</span></span><br></pre></td></tr></table></figure><h2 id="count-if-使用"><a href="#count-if-使用" class="headerlink" title="count if 使用"></a>count if 使用</h2><p><code>select count(status = &#39;Active&#39; OR null) from account</code></p><h2 id="sun-if-使用"><a href="#sun-if-使用" class="headerlink" title="sun if 使用"></a>sun if 使用</h2><p>语法 <code>case then 条件 then (可以是数据库字段名 | 数字) ELSE 0 END</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select(`cast(<span class="string">"sum"</span> ( CASE q.<span class="string">"status"</span> WHEN <span class="string">'Frozen'</span> THEN 1 ELSE 0 END ) as <span class="built_in">integer</span>)`, <span class="string">'frozenQbitCardCount'</span>)</span><br></pre></td></tr></table></figure><p><code>SELECT cast(&quot;sum&quot; ( CASE &quot;status&quot; WHEN &#39;Frozen&#39; THEN 1 ELSE 0 END ) as integer) AS count FROM account</code></p><p><code>SELECT SUM(CASE WHEN type = &#39;QbitCardAccountRechargeQbitCardGroup&#39; THEN &quot;recipientCost&quot; ELSE 0 END) AS money from &quot;Transaction&quot;</code></p><p><code>SELECT count(case when type = &#39;QbitCardAccountRechargeQbitCardGroup&#39; then 1 end) as total from &quot;Transaction&quot;</code></p><h2 id="increment-数据库字段自增（自减一样）"><a href="#increment-数据库字段自增（自减一样）" class="headerlink" title="increment 数据库字段自增（自减一样）"></a>increment 数据库字段自增（自减一样）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">await this.accountExtendRepo</span><br><span class="line">      .createQueryBuilder()</span><br><span class="line">      .update()</span><br><span class="line">      .<span class="built_in">set</span>(&#123;</span><br><span class="line">        qbitCardCountLimit: () =&gt; &#123;</span><br><span class="line">          <span class="built_in">return</span> `<span class="string">"qbitCardCountLimit"</span> + <span class="variable">$&#123;data.qbitCardCountLimit&#125;</span>`;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="built_in">where</span>(&#123;</span><br><span class="line">        accountId: data.subAccountId,</span><br><span class="line">      &#125;)</span><br><span class="line">      .execute();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE <span class="string">"accountExtend"</span> SET <span class="string">"qbitCardCountLimit"</span> = <span class="string">"qbitCardCountLimit"</span> + 10, <span class="string">"version"</span> = <span class="string">"version"</span> + 1 WHERE <span class="string">"accountId"</span> = <span class="variable">$1</span> -- PARAMETERS: [<span class="string">"cd459ae2-3f4c-4505-a984-d14c2a85c734"</span>]</span><br></pre></td></tr></table></figure><h2 id="cast-的使用-类型转换"><a href="#cast-的使用-类型转换" class="headerlink" title="cast 的使用 类型转换"></a>cast 的使用 类型转换</h2><p><code>cast (sum(&quot;a&quot;) as integer)</code></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.* <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="string">"accountId"</span>, <span class="keyword">MAX</span>(<span class="string">"createTime"</span>) <span class="keyword">AS</span> <span class="string">"followTime"</span> <span class="keyword">FROM</span> <span class="string">"operationLog"</span> <span class="string">"OperationLog"</span> <span class="keyword">WHERE</span> ( <span class="string">"OperationLog"</span>.<span class="string">"businessType"</span> <span class="keyword">IN</span> ($<span class="number">1</span>) ) <span class="keyword">AND</span> ( <span class="string">"OperationLog"</span>.<span class="string">"deleteTime"</span> <span class="keyword">IS</span> <span class="literal">NULL</span> ) <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="string">"accountId"</span>) <span class="string">"a"</span>  <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">"followTime"</span> <span class="keyword">DESC</span> <span class="comment">-- PARAMETERS: ["FollowCSMAccountLog"]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [db, parameters] = <span class="keyword">this</span>.operationLogRepo</span><br><span class="line">      .createQueryBuilder()</span><br><span class="line">      .select(<span class="string">'"accountId"'</span>)</span><br><span class="line">      .addSelect(<span class="string">`MAX("createTime")`</span>, <span class="string">'followTime'</span>)</span><br><span class="line">      .where(&#123;</span><br><span class="line">        businessType: In([<span class="string">'FollowCSMAccountLog'</span>]),</span><br><span class="line">      &#125;)</span><br><span class="line">      .groupBy(<span class="string">'"accountId"'</span>)</span><br><span class="line">      .getQueryAndParameters();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> createQueryBuilder()</span><br><span class="line">      .select(<span class="string">'a.*'</span>)</span><br><span class="line">      .from(<span class="string">`(<span class="subst">$&#123;db&#125;</span>)`</span> <span class="keyword">as</span> any, <span class="string">'a'</span>)</span><br><span class="line">      .setNativeParameters(parameters)</span><br><span class="line">      .orderBy(<span class="string">'"followTime"'</span>, <span class="string">'DESC'</span>)</span><br><span class="line">      .getRawMany();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nestjs </tag>
            
            <tag> typeorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包上传至阿里云oss</title>
      <link href="%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91oss/"/>
      <url>%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91oss/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-webpack-aliyun-oss-plugin-包"><a href="#安装-webpack-aliyun-oss-plugin-包" class="headerlink" title="安装 webpack-aliyun-oss-plugin 包"></a>安装 webpack-aliyun-oss-plugin 包</h2><p><code>npm install webpack-aliyun-oss-plugin --save-dev</code></p><h2 id="配置-vue-config-js"><a href="#配置-vue-config-js" class="headerlink" title="配置 vue.config.js"></a>配置 vue.config.js</h2><p>// 上述代码是修改你的资源根目录，改为你上传到 oss 上的目录<br><code>publicPath: process.env.NODE_ENV !== &#39;development&#39; ? &#39;https://xxx.com/&#39; : &#39;./&#39;,</code></p><h2 id="webpack-打包配置"><a href="#webpack-打包配置" class="headerlink" title="webpack 打包配置"></a>webpack 打包配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackAliyunOssPlugin = <span class="built_in">require</span>(<span class="string">'webpack-aliyun-oss-plugin'</span>)</span><br><span class="line"></span><br><span class="line">chainWebpack(config) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line @typescript-eslint/no-var-requires</span></span><br><span class="line">      <span class="keyword">const</span> &#123; oss &#125; = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line">      config</span><br><span class="line">        .plugin(<span class="string">'webpack-aliyun-oss-plugin'</span>)</span><br><span class="line">        .use(webpackAliyunOssPlugin, [&#123;</span><br><span class="line">          buildPath: <span class="string">'dist/**'</span>,</span><br><span class="line">          region: <span class="string">'oss-cn-hangzhou'</span>,</span><br><span class="line">          ak: <span class="string">''</span>, <span class="comment">// ak为accessKeyId，sk为accessKeySecret</span></span><br><span class="line">          sk: <span class="string">''</span>,</span><br><span class="line">          bucket: <span class="string">''</span>, <span class="comment">// bucket的name</span></span><br><span class="line">        &#125;])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>distinct和distinct-on的使用</title>
      <link href="distinct%E5%92%8Cdistinct-on%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>distinct%E5%92%8Cdistinct-on%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="去重；关键字-distinct-去重功能-在其他数据库（oracle，mysql）是存在；当然-postgresql-也有这个功能"><a href="#去重；关键字-distinct-去重功能-在其他数据库（oracle，mysql）是存在；当然-postgresql-也有这个功能" class="headerlink" title="去重；关键字 distinct 去重功能 在其他数据库（oracle，mysql）是存在；当然 postgresql 也有这个功能"></a>去重；关键字 distinct 去重功能 在其他数据库（oracle，mysql）是存在；当然 postgresql 也有这个功能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[postgres@sdserver40_210 ~]$ psql mydb lottu</span><br><span class="line">psql (9.5.0)</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">mydb=&gt; select * from trade;</span><br><span class="line"> tradeno | accountid  | fee | game_id</span><br><span class="line">---------+------------+-----+---------</span><br><span class="line"> 1000006 | yyb_100001 |  10 |    2555</span><br><span class="line"> 1000011 | yyb_100002 | 100 |    2555</span><br><span class="line"> 1001859 | yyb_100001 |  10 |    2555</span><br><span class="line"> 1001861 | yyb_100003 |  20 |    2555</span><br><span class="line"> 1001854 | yyb_100004 |   6 |    2555</span><br><span class="line"> 1001881 | yyb_100002 | 328 |    2555</span><br><span class="line">(6 rows)</span><br><span class="line"></span><br><span class="line">mydb=&gt; select distinct accountid from trade;</span><br><span class="line"> accountid</span><br><span class="line">------------</span><br><span class="line"> yyb_100001</span><br><span class="line"> yyb_100004</span><br><span class="line"> yyb_100002</span><br><span class="line"> yyb_100003</span><br><span class="line">(4 rows)</span><br><span class="line"></span><br><span class="line">mydb=&gt; select distinct accountid,game_id from trade;</span><br><span class="line"> accountid  | game_id</span><br><span class="line">------------+---------</span><br><span class="line"> yyb_100001 |    2555</span><br><span class="line"> yyb_100003 |    2555</span><br><span class="line"> yyb_100004 |    2555</span><br><span class="line"> yyb_100002 |    2555</span><br><span class="line">(4 rows)</span><br></pre></td></tr></table></figure><h2 id="跟-on-一起用；-使用-DISTINCT-ON-实现用窗口函数实现的取第一名的功能"><a href="#跟-on-一起用；-使用-DISTINCT-ON-实现用窗口函数实现的取第一名的功能" class="headerlink" title="跟 on 一起用； 使用 DISTINCT ON 实现用窗口函数实现的取第一名的功能"></a>跟 on 一起用； 使用 DISTINCT ON 实现用窗口函数实现的取第一名的功能</h2><p>这个功能 oracle，mysql 是没有的；当然它们有其他的分析函数可以替换；顶替；例如 row_number, fisrt_value 等等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mydb=&gt; select distinct on (accountid) accountid,fee from trade;</span><br><span class="line"> accountid  | fee</span><br><span class="line">------------+-----</span><br><span class="line"> yyb_100001 |  10</span><br><span class="line"> yyb_100002 | 100</span><br><span class="line"> yyb_100003 |  20</span><br><span class="line"> yyb_100004 |   6</span><br><span class="line">(4 rows)</span><br><span class="line"></span><br><span class="line">mydb=&gt; select distinct on (game_id) accountid,fee from trade;</span><br><span class="line"> accountid  | fee</span><br><span class="line">------------+-----</span><br><span class="line"> yyb_100001 |  10</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">mydb=&gt; select distinct on (game_id) accountid,fee from trade order by game_id, fee desc;</span><br><span class="line"> accountid  | fee</span><br><span class="line">------------+-----</span><br><span class="line"> yyb_100002 | 328</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">--例如取每个帐号充值最大的一笔</span><br><span class="line">mydb=&gt; select distinct on (accountid) accountid,fee from trade order by accountid, fee desc;</span><br><span class="line"> accountid  | fee</span><br><span class="line">------------+-----</span><br><span class="line"> yyb_100001 |  10</span><br><span class="line"> yyb_100002 | 328</span><br><span class="line"> yyb_100003 |  20</span><br><span class="line"> yyb_100004 |   6</span><br><span class="line">(4 rows)</span><br></pre></td></tr></table></figure><p>在 typeorm 中实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Repository, Between, MoreThanOrEqual, In, LessThan, IsNull, LessThanOrEqual</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">'typeorm'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.transactionRepository</span><br><span class="line">        .createQueryBuilder()</span><br><span class="line">        .select(<span class="string">`DISTINCT ON ("accountId") "accountId"`</span>)</span><br><span class="line">        .addSelect([<span class="string">'"transactionTime"'</span>, <span class="string">'"recipientCost"'</span>])</span><br><span class="line">        .where(&#123;</span><br><span class="line">          status: TransactionStatusEnum.Closed,</span><br><span class="line">          type: TransactionTypeEnum.Deposit,</span><br><span class="line">          accountId: In(_accountIds),</span><br><span class="line">          senderType: IsNull(),</span><br><span class="line">          transactionTime: Between(time[<span class="number">0</span>], time[<span class="number">1</span>]),</span><br><span class="line">        &#125;)</span><br><span class="line">        .orderBy(<span class="string">`"accountId", "transactionTime"`</span>, <span class="string">'ASC'</span>)</span><br><span class="line">        .getRawMany(),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> typeorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts中keyof的使用</title>
      <link href="ts%E4%B8%ADkeyof%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>ts%E4%B8%ADkeyof%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h2><p>映射类型允许您通过映射属性类型从现有类型创建新类型。现有类型的每个属性都根据您指定的规则进行转换。然后，转换后的属性构成了新类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  name: <span class="string">"Tobias"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name is a property of person</span></span><br><span class="line"><span class="comment">// --&gt; no error</span></span><br><span class="line"><span class="keyword">const</span> name = getProperty(person, <span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gender is not a property of person</span></span><br><span class="line"><span class="comment">// --&gt; error</span></span><br><span class="line"><span class="keyword">const</span> gender = getProperty(person, <span class="string">"gender"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type Optional&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]?: T[K]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Optional&lt;Person&gt; = &#123;</span><br><span class="line">  name: <span class="string">"Tobias"</span></span><br><span class="line">  <span class="comment">// notice how I do not have to specify an age,</span></span><br><span class="line">  <span class="comment">// since age is now of type 'number?' and is therefor optional</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://mariusschulz.com/blog/mapped-types-in-typescript#modeling-object-freeze-with-mapped-types" target="_blank" rel="external nofollow noopener noreferrer">映射类型</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nest中TypeORM的使用(一)</title>
      <link href="nest%E4%B8%ADTypeORM%E7%9A%84%E4%BD%BF%E7%94%A8(%E4%B8%80)/"/>
      <url>nest%E4%B8%ADTypeORM%E7%9A%84%E4%BD%BF%E7%94%A8(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>postgreSql</p><h2 id="数据库初始化连接"><a href="#数据库初始化连接" class="headerlink" title="数据库初始化连接"></a>数据库初始化连接</h2><p>配置不同环境导入配置<br>在 app.module.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ConfigModule, ConfigService &#125; <span class="keyword">from</span> <span class="string">"@nestjs/config"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">"@nestjs/common"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">"@nestjs/typeorm"</span>;</span><br><span class="line"><span class="keyword">import</span> customConfig <span class="keyword">from</span> <span class="string">"./config/index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; EntityModule &#125; <span class="keyword">from</span> <span class="string">"./entity/entity.module"</span>;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ConfigModule.forRoot(&#123;</span><br><span class="line">      isGlobal: <span class="literal">true</span>, <span class="comment">// 作用于全局</span></span><br><span class="line">      load: [customConfig], <span class="comment">// 加载自定义配置项</span></span><br><span class="line">    &#125;),</span><br><span class="line">    TypeOrmModule.forRootAsync(&#123;</span><br><span class="line">      imports: [ConfigModule], <span class="comment">// 数据库配置项依赖于ConfigModule，需在此引入</span></span><br><span class="line">      useFactory: <span class="function">(<span class="params">configService: ConfigService</span>) =&gt;</span></span><br><span class="line">        configService.get(<span class="string">"database"</span>),</span><br><span class="line">      inject: [ConfigService], <span class="comment">// 记得注入服务，不然useFactory函数中获取不到ConfigService,</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// TypeOrmModule.forRoot(&#123;</span></span><br><span class="line">    <span class="comment">//   type: 'postgres',</span></span><br><span class="line">    <span class="comment">//   host: 'localhost',</span></span><br><span class="line">    <span class="comment">//   port: 5432,</span></span><br><span class="line">    <span class="comment">//   username: 'postgres',</span></span><br><span class="line">    <span class="comment">//   password: '123456',</span></span><br><span class="line">    <span class="comment">//   database: 'test',</span></span><br><span class="line">    <span class="comment">//   logging: true, // 打印sql</span></span><br><span class="line">    <span class="comment">//   autoLoadEntities: true, // 自动加载实体</span></span><br><span class="line">    <span class="comment">//   synchronize: true, // 同步数据库表字段</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">    EntityModule,</span><br><span class="line">  ],</span><br><span class="line">  controllers: [],</span><br><span class="line">  providers: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在 config/index.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dev <span class="keyword">from</span> <span class="string">"./dev"</span>;</span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">"./api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configs = &#123;</span><br><span class="line">  development: dev,</span><br><span class="line">  production: api,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV || <span class="string">"development"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"env=============&gt;"</span>, env);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; configs[env];</span><br></pre></td></tr></table></figure><p>在 config/dev.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  database: &#123;</span><br><span class="line">    type: <span class="string">"postgres"</span>,</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">5432</span>,</span><br><span class="line">    username: <span class="string">"postgres"</span>,</span><br><span class="line">    password: <span class="string">"123456"</span>,</span><br><span class="line">    database: <span class="string">"test"</span>,</span><br><span class="line">    logging: <span class="literal">true</span>, <span class="comment">// 打印sql</span></span><br><span class="line">    autoLoadEntities: <span class="literal">true</span>, <span class="comment">// 自动加载实体</span></span><br><span class="line">    synchronize: <span class="literal">false</span>, <span class="comment">// 同步数据库表字段</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="model-表映射"><a href="#model-表映射" class="headerlink" title="model 表映射"></a>model 表映射</h2><p>在 entity/entity.module.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, Global &#125; <span class="keyword">from</span> <span class="string">"@nestjs/common"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">"@nestjs/typeorm"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Admin &#125; <span class="keyword">from</span> <span class="string">"./Admin.entity"</span>;</span><br><span class="line"></span><br><span class="line">@Global()</span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [TypeOrmModule.forFeature([Admin])],</span><br><span class="line">  exports: [TypeOrmModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在 Admin.entity.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Entity,</span><br><span class="line">  Column,</span><br><span class="line">  PrimaryGeneratedColumn,</span><br><span class="line">  Index,</span><br><span class="line">  CreateDateColumn,</span><br><span class="line">  UpdateDateColumn,</span><br><span class="line">  DeleteDateColumn,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"typeorm"</span>;</span><br><span class="line"></span><br><span class="line">@Entity(<span class="string">"admin"</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> </span>&#123;</span><br><span class="line">  @PrimaryGeneratedColumn()</span><br><span class="line">  id: number;</span><br><span class="line"></span><br><span class="line">  @Column()</span><br><span class="line">  name: string;</span><br><span class="line"></span><br><span class="line">  @Index()</span><br><span class="line">  @CreateDateColumn(&#123; <span class="attr">type</span>: <span class="string">"timestamptz"</span> &#125;)</span><br><span class="line">  createTime: <span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line">  @UpdateDateColumn(&#123; <span class="attr">type</span>: <span class="string">"timestamptz"</span> &#125;)</span><br><span class="line">  updateTime: <span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line">  @DeleteDateColumn(&#123; <span class="attr">select</span>: <span class="literal">false</span>, <span class="attr">type</span>: <span class="string">"timestamptz"</span> &#125;)</span><br><span class="line">  deleteTime: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, Dependencies &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getRepositoryToken, InjectRepository &#125; <span class="keyword">from</span> <span class="string">'@nestjs/typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Admin &#125; <span class="keyword">from</span> <span class="string">'../../entity/Admin.entity'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; EntityRepository, Repository &#125; <span class="keyword">from</span> <span class="string">'typeorm'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    @InjectRepository(Admin)</span><br><span class="line">    private repository: Repository&lt;Admin&gt;,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 分页查询</span></span><br><span class="line">  <span class="keyword">async</span> findAndCount(&#123; limit, offset, order = &#123;&#125;, where = &#123;&#125; &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.repository.findAndCount(&#123;</span><br><span class="line">      skip: offset,</span><br><span class="line">      take: limit,</span><br><span class="line">      where,</span><br><span class="line">      order,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 新增</span></span><br><span class="line">  <span class="keyword">async</span> insert(data) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.repository.insert(data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 查询一条数据</span></span><br><span class="line">  <span class="keyword">async</span> findOne(id) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">this</span>.repository.findOne(&#123;</span><br><span class="line">      where: &#123;</span><br><span class="line">        id,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 修改数据</span></span><br><span class="line">  <span class="keyword">async</span> update(id: number, data) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.repository.update(id, data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">delete</span>(id: number) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.repository.delete(&#123;</span><br><span class="line">      id,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 软删除</span></span><br><span class="line">  <span class="keyword">async</span> softDelete(id: number) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.repository.softDelete(&#123;</span><br><span class="line">      id,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 软删除还原</span></span><br><span class="line">  <span class="keyword">async</span> restore(id: number) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.repository.restore(&#123;</span><br><span class="line">      id,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接多个数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TypeOrmModule.forRootAsync(&#123;</span><br><span class="line">      name: <span class="string">'qbit-aml'</span>,</span><br><span class="line">      imports: [ConfigModule], <span class="comment">// 数据库配置项依赖于ConfigModule，需在此引入</span></span><br><span class="line">      useFactory: <span class="function">(<span class="params">configService: ConfigService</span>) =&gt;</span> configService.get(<span class="string">'DATABASE_CONFIG'</span>)[<span class="number">0</span>],</span><br><span class="line">      inject: [ConfigService], <span class="comment">// 记得注入服务，不然useFactory函数中获取不到ConfigService,</span></span><br><span class="line">    &#125;),</span><br><span class="line">    TypeOrmModule.forRootAsync(&#123;</span><br><span class="line">      name: <span class="string">'qbit-core'</span>,</span><br><span class="line">      imports: [ConfigModule], <span class="comment">// 数据库配置项依赖于ConfigModule，需在此引入</span></span><br><span class="line">      useFactory: <span class="function">(<span class="params">configService: ConfigService</span>) =&gt;</span> configService.get(<span class="string">'DATABASE_CONFIG'</span>)[<span class="number">1</span>],</span><br><span class="line">      inject: [ConfigService], <span class="comment">// 记得注入服务，不然useFactory函数中获取不到ConfigService,</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TypeOrmModule.forFeature([QbitNotification], <span class="string">'qbit-aml'</span>),</span><br><span class="line">    TypeOrmModule.forFeature([Account, AccountUser], <span class="string">'qbit-core'</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @InjectRepository(Account, <span class="string">'qbit-core'</span>) private readonly accountRepo: Repository&lt;Account&gt;,</span><br></pre></td></tr></table></figure><p><a href="https://docs.nestjs.com/techniques/database" target="_blank" rel="external nofollow noopener noreferrer">nest-typeorm</a><br><a href="https://typeorm.io/#/" target="_blank" rel="external nofollow noopener noreferrer">typeorm</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nestjs </tag>
            
            <tag> typeorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+ts项目vue-property-decorator（装饰器）用法</title>
      <link href="vue-ts%E9%A1%B9%E7%9B%AEvue-property-decorator%EF%BC%88%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%89%E7%94%A8%E6%B3%95/"/>
      <url>vue-ts%E9%A1%B9%E7%9B%AEvue-property-decorator%EF%BC%88%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%89%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在 vue 项目使用 ts 时，装饰器有以下几种，下面为这些装饰器的具体用法并且有和 js 中写法的对比：</p><ul><li>@Component</li><li>@Emit</li><li>@Prop</li><li>@Watch</li><li>@Model</li><li>@Inject / @Provide</li><li>Mixins</li><li>slot</li></ul><a id="more"></a><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=<span class="string">"parent"</span>&gt;</span><br><span class="line">        parent组件--&#123;&#123;title&#125;&#125;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;Home v-model=<span class="string">"title"</span>&gt;&lt;/Home&gt;</span><br><span class="line">        &lt;About v-model=<span class="string">"title"</span>&gt;&lt;/About&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">'ts'</span>&gt;</span><br><span class="line">    import Home from <span class="string">'./Home.vue'</span></span><br><span class="line">    import About from <span class="string">'./About.vue'</span></span><br><span class="line">    import &#123; Component, Vue &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line">    @Component(&#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Home,</span><br><span class="line">            About</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">export</span> default class  extends Vue &#123;</span><br><span class="line">        private title: string = <span class="string">'父组件中的值'</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面为在 js 中引入组件 components 的写法，与上面 ts 的代码效果一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Home from <span class="string">'./Home.vue'</span></span><br><span class="line">import About from <span class="string">'./About.vue'</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">            title: <span class="string">'父组件中的值'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Home,</span><br><span class="line">        About</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Emit"><a href="#Emit" class="headerlink" title="@Emit"></a>@Emit</h2><p>子模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">"primary"</span></span><br><span class="line">        icon=<span class="string">"el-icon-search"</span></span><br><span class="line">        :disabled=<span class="string">"buttonDisabled"</span></span><br><span class="line">        @click=<span class="string">"fetch"</span></span><br><span class="line">      &gt;</span><br><span class="line">        搜索</span><br><span class="line">      &lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ts</span></span><br><span class="line">import &#123; Component, Vue, Inject, Emit &#125; from <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line">@Emit(<span class="string">'fetch'</span>)</span><br><span class="line">    <span class="function"><span class="title">fetch</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> this.filter</span><br><span class="line">    &#125;</span><br><span class="line">等同于</span><br><span class="line"><span class="function"><span class="title">fetch</span></span>() &#123;</span><br><span class="line">this.<span class="variable">$emit</span>(<span class="string">'fetch'</span>, this.filter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;Search</span><br><span class="line">        @fetch=<span class="string">"fetch"</span></span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">fetch(<span class="built_in">where</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Prop"><a href="#Prop" class="headerlink" title="@Prop"></a>@Prop</h2><p>子模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">"home"</span>&gt;</span><br><span class="line">    vue+ts项目vue-property-decorator用法</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;p&gt;这是从父组件中传过来的值: &#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line">import &#123; Component, Vue, Prop &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="built_in">export</span> default class Home extends Vue &#123;</span><br><span class="line">  @Prop() title!: string;</span><br><span class="line">  <span class="comment"># prop的类型和默认值</span></span><br><span class="line">  <span class="comment"># @Prop(&#123;type: String, default: 'default value'&#125;) title!: string;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面为 prop 在 js 中的写法，与上面 ts 的代码效果一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [<span class="string">"title"</span>],</span><br><span class="line">  <span class="comment"># props: &#123;</span></span><br><span class="line">  <span class="comment">#   title: &#123;</span></span><br><span class="line">  <span class="comment">#     style: String,</span></span><br><span class="line">  <span class="comment">#     default: 'default value'</span></span><br><span class="line">  <span class="comment">#   &#125;</span></span><br><span class="line">  <span class="comment"># &#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Watch"><a href="#Watch" class="headerlink" title="@Watch"></a>@Watch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">"home"</span>&gt;</span><br><span class="line">    vue+ts项目vue-property-decorator用法</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"inputValue"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line">import &#123; Component, Vue, Watch &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="built_in">export</span> default class Home extends Vue &#123;</span><br><span class="line">  private inputValue: string = <span class="string">''</span></span><br><span class="line">  @Watch(<span class="string">'inputValue'</span>)</span><br><span class="line">  valueChange(newValue: string, oldValue: string) &#123;</span><br><span class="line">    console.log(newValue, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 对watch的配置为第二个参数，以对象形式传入</span></span><br><span class="line">  <span class="comment"># @Watch('inputValue',&#123; deep: true &#125;)</span></span><br><span class="line">  <span class="comment"># valueChange(newValue: string, oldValue: string) &#123;</span></span><br><span class="line">  <span class="comment">#   console.log(newValue, oldValue)</span></span><br><span class="line">  <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面为 watch 在 js 中的写法，与上面 ts 的代码效果一样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      inputValue: <span class="string">""</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    inputValue(newValue, oldValue) &#123;</span><br><span class="line">      console.log(newValue, oldValue);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Model"><a href="#Model" class="headerlink" title="@Model"></a>@Model</h2><p>父组件代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=<span class="string">"parent"</span>&gt;</span><br><span class="line">        parent组件--&#123;&#123;title&#125;&#125;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;Home v-model=<span class="string">"title"</span>&gt;&lt;/Home&gt;</span><br><span class="line">        &lt;!-- 直接使用v-mode为以下使用标签的语法糖，默认子组件使用value接受prop传值使用emit调用input方法修改值，在使用model参数prop修改如何接受，event修改emit调用哪个方法来修改值 --&gt;</span><br><span class="line">        &lt;!--&lt;Home :value=<span class="string">"title"</span> @input=<span class="string">"title=<span class="variable">$event</span>.target.value"</span>&gt;&lt;/Home&gt;--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">'ts'</span>&gt;</span><br><span class="line">    import Home from <span class="string">'./Home.vue'</span></span><br><span class="line">    import &#123; Component, Vue &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line">    @Component(&#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Home</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">export</span> default class  extends Vue &#123;</span><br><span class="line">        private title: string = <span class="string">'父组件中的值'</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件 ts 代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">"home"</span>&gt;</span><br><span class="line">    vue+ts项目vue-property-decorator用法</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"inputValue"</span> @input=<span class="string">"valueChange(<span class="variable">$event</span>.target.value)"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line">import &#123; Component, Vue, Model, Emit, Prop &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="built_in">export</span> default class Home extends Vue &#123;</span><br><span class="line">  private inputValue: string = <span class="string">''</span></span><br><span class="line">  private <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    this.inputValue = this.valueFromModel</span><br><span class="line">  &#125;</span><br><span class="line">  @Model (<span class="string">'changeValueFromModel'</span>)  valueFromModel !: string;</span><br><span class="line">  @Emit(<span class="string">'changeValueFromModel'</span>)</span><br><span class="line">  <span class="comment"># 参数应该为输入框的值，所以上面传过来的值应该为value而不能是e</span></span><br><span class="line">  valueChange(val: string) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面为 model 在 js 中的写法，与上面 ts 的代码效果一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">"valueFromModel"</span>,</span><br><span class="line">    event: <span class="string">"changeValueFromModel"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [<span class="string">"valueFromModel"</span>],</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      inputValue: <span class="string">""</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    this.inputValue = this.valueFromModel;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    valueChange(e) &#123;</span><br><span class="line">      this.<span class="variable">$emit</span>(<span class="string">"changeValueFromModel"</span>, e.target.value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Provide-Inject-（重点推荐）"><a href="#Provide-Inject-（重点推荐）" class="headerlink" title="@Provide / @Inject （重点推荐）"></a>@Provide / @Inject （重点推荐）</h2><p>ts 中@Provide / @Inject 用法如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=<span class="string">"parent"</span>&gt;</span><br><span class="line">        parent组件--&#123;&#123;title&#125;&#125;</span><br><span class="line">        &lt;Home&gt;&lt;/Home&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">'ts'</span>&gt;</span><br><span class="line">    import Home from <span class="string">'./Home.vue'</span></span><br><span class="line">    import &#123; Component, Vue, Provide &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line">    @Component(&#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Home</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">export</span> default class  extends Vue &#123;</span><br><span class="line">        private title: string = <span class="string">'父组件中的值'</span></span><br><span class="line">        @Provide()</span><br><span class="line">        pOne = <span class="string">'oneFromProvide'</span></span><br><span class="line"></span><br><span class="line">        @Provide(<span class="string">'pTwo'</span>)</span><br><span class="line">        two = <span class="string">'twoFromProvide'</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">"home"</span>&gt;</span><br><span class="line">    vue+ts项目vue-property-decorator用法</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    来自provide中的值--1--&#123;&#123;pOne&#125;&#125;--2--&#123;&#123;pTwo&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line">import &#123; Component, Vue, Inject &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line">import outMixins from <span class="string">'./mixins'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="built_in">export</span> default class Home extends Vue &#123;</span><br><span class="line">  @Inject(<span class="string">'pOne'</span>)</span><br><span class="line">    pOne!: string;</span><br><span class="line"></span><br><span class="line">  @Inject(&#123;</span><br><span class="line">      from:<span class="string">'pTwo'</span>,</span><br><span class="line">      default:<span class="string">'default value'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  pTwo!: string;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面为 project / inject 在 js 中的写法，与上面 ts 的代码效果一样：<br>父组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=<span class="string">"parent"</span>&gt;</span><br><span class="line">        parent组件</span><br><span class="line">        &lt;About&gt;&lt;/About&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import About from <span class="string">'./About.vue'</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        About</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">provide</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">            pOne: <span class="string">'oneFromProvide'</span>,</span><br><span class="line">            pTwo: <span class="string">'twoFromProvide'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">"home"</span>&gt;</span><br><span class="line">    vue+js项目</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    来自provide中的值--1--&#123;&#123;pOne&#125;&#125;--2--&#123;&#123;pTwo&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    pOne: <span class="string">'pOne'</span>,</span><br><span class="line">    pTwo: &#123; from: <span class="string">'pTwo'</span>, default: <span class="string">'default value'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h2><p>ts 中 Mixins 的用法如下<br>mixins.ts 文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Vue, Component &#125; from <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"><span class="built_in">export</span> default class myMixins extends Vue &#123;</span><br><span class="line">  valueFromMixins: string = <span class="string">"来自mixins的value"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ts 代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">"home"</span>&gt;</span><br><span class="line">    vue+ts项目vue-property-decorator用法</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    来自mixins中的变量--&#123;&#123;valueFromMixins&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line">import &#123; Component, Vue, Model, Emit, Prop &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line">import outMixins from <span class="string">'./mixins'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  mixins: [outMixins]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">export</span> default class Home extends Vue &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面为 mixins 在 js 中的写法，与上面 ts 的代码效果一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;outMixins&#125; from <span class="string">'./mixins'</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  mixins:[outMixins]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=<span class="string">"footer"</span>&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;Here<span class="string">'s some contact info&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/template&gt;</span></span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://juejin.cn/post/6844903939377201165#heading-5" target="_blank" rel="external nofollow noopener noreferrer">https://juejin.cn/post/6844903939377201165#heading-5</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10安装docker</title>
      <link href="windows10%E5%AE%89%E8%A3%85docker/"/>
      <url>windows10%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>必须是 windows 10 专业版</li><li>进入任务管理器看虚拟化是否已启用<br><img src="https://img-blog.csdnimg.cn/20210317175951685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>然后再是进入电脑的控制面板-&gt;程序-&gt;启用或关闭 Windows 功能-&gt;把 Hyper-v 勾上，启用后电脑会重启，后面就可以下载并安装 Docker for Windows 了。</li></ol><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><code>https://docs.docker.com/docker-for-windows/wsl/</code><br><img src="https://img-blog.csdnimg.cn/20210317180105110.png" alt="在这里插入图片描述"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>直接安装（就是取消勾选 WSL 2）</li><li>安装成功 右键进入 settings 取消勾选 wsl 2 就可以正常使用了</li></ol><p><img src="https://img-blog.csdnimg.cn/20210317175824765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>dockers ps</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts模拟类多继承类</title>
      <link href="ts%E6%A8%A1%E6%8B%9F%E7%B1%BB%E5%A4%9A%E7%BB%A7%E6%89%BF%E7%B1%BB/"/>
      <url>ts%E6%A8%A1%E6%8B%9F%E7%B1%BB%E5%A4%9A%E7%BB%A7%E6%89%BF%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的实现方式是把类当做接口 使用implements继承</span></span><br><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">class Person &#123;</span><br><span class="line">  name?: string;</span><br><span class="line">  grade?: number;</span><br><span class="line">  constructor(name: string, grade: number) &#123;</span><br><span class="line">    this.grade = grade;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHello</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'tag'</span>, `Helo <span class="variable">$&#123;this.name&#125;</span>!, <span class="variable">$&#123;this.grade&#125;</span>`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Student 类</span><br><span class="line">class Student &#123;</span><br><span class="line">  grade?: number;</span><br><span class="line">  constructor(grade: number) &#123;</span><br><span class="line">    this.grade = grade;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">test</span>!: (name: string) =&gt; void;</span><br><span class="line">  <span class="function"><span class="title">study</span></span>() &#123;</span><br><span class="line">    this.test(<span class="string">'1'</span>);</span><br><span class="line">    console.log(<span class="string">'tag'</span>, <span class="string">' I need Study!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SmartObject implements Person, Student &#123;</span><br><span class="line">  // Person</span><br><span class="line">  name = <span class="string">'person'</span>;</span><br><span class="line">  // Activatable</span><br><span class="line">  grade = 3;</span><br><span class="line">  sayHello!: () =&gt; void;</span><br><span class="line">  study!: () =&gt; void;</span><br><span class="line">  <span class="built_in">test</span>(name: string) &#123;</span><br><span class="line">    console.log(<span class="string">'test'</span>, name);</span><br><span class="line">  &#125;</span><br><span class="line">  static applyMixins(derivedCtor: any, baseCtors: any[]) &#123;</span><br><span class="line">    baseCtors.forEach(baseCtor =&gt; &#123;</span><br><span class="line">      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (name !== <span class="string">'test'</span>) derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SmartObject.applyMixins(SmartObject, [Person, Student]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> = SmartObject;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">import SmartObject from <span class="string">'./index'</span>;</span><br><span class="line">const smartObject = new SmartObject();</span><br><span class="line">smartObject.study();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux查看设置开机启动的服务列表</title>
      <link href="Linux%E6%9F%A5%E7%9C%8B%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8/"/>
      <url>Linux%E6%9F%A5%E7%9C%8B%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><code>systemctl list-units --type=service</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pierced进行内网穿透</title>
      <link href="%E4%BD%BF%E7%94%A8pierced%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>%E4%BD%BF%E7%94%A8pierced%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="pierced-钉钉支持"><a href="#pierced-钉钉支持" class="headerlink" title="pierced(钉钉支持)"></a>pierced(钉钉支持)</h2><p><a href="https://ding-doc.dingtalk.com/doc#/kn6zg7/hb7000/316f3a13" target="_blank" rel="external nofollow noopener noreferrer">文档</a></p><ol><li>mac使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mac_64</span><br><span class="line">chmod 777 ./ding</span><br><span class="line">./ding -config=./ding.cfg -subdomain=abcde 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="comment"># ./ding -config=./ding.cfg -subdomain=wjc 4000 </span></span><br><span class="line"><span class="comment"># http://wjc.vaiwan.com/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="其他推荐"><a href="#其他推荐" class="headerlink" title="其他推荐"></a>其他推荐</h2><ol><li>花生壳</li><li>natapp</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启动一个简单http服务器</title>
      <link href="%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95http%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const url = require(<span class="string">'url'</span>);</span><br><span class="line">const util = require(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) =&gt; &#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line">    // res.writeHead(200, &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span> &#125;);</span><br><span class="line">    res.writeHead(200, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain;charset=utf-8'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    // 解析 url 参数</span><br><span class="line">    const params = url.parse(req.url, <span class="literal">true</span>).query;</span><br><span class="line">    res.write(<span class="string">'用户名：：'</span> + params.name);</span><br><span class="line">    res.write(<span class="string">'\n'</span>);</span><br><span class="line">    res.write(<span class="string">'城市：'</span> + params.city);</span><br><span class="line">    res.end();</span><br><span class="line">    // res.end(JSON.stringify(&#123;</span><br><span class="line">    //     <span class="string">'name'</span>: params.name,</span><br><span class="line">    //     <span class="string">'city'</span>: params.city,</span><br><span class="line">    // &#125;));</span><br><span class="line"></span><br><span class="line">&#125;).listen(8888);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure><p>访问<br>curl <a href="http://localhost:8888/?name=klover&amp;city=hz" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8888/?name=klover&amp;city=hz</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis实现商城秒杀活动</title>
      <link href="redis%E5%AE%9E%E7%8E%B0%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8/"/>
      <url>redis%E5%AE%9E%E7%8E%B0%E5%95%86%E5%9F%8E%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>1、使用watch，采用乐观锁<br>2、不使用悲观锁，因为等待时间非常长，响应慢<br>3、不使用队列，因为并发量会让队列内存瞬间升高</p><p>Redis事务<br>Redis中的事务(transaction)是一组命令的集合。事务同命令一样都是Redis最小的执行单<br>位，一个事务中的命令要么都执行，要么都不执行。Redis事务的实现需要用到 MULTI 和<br>EXEC 两个命令，事务开始的时候先向Redis服务器发送 MULTI 命令，然后依次发送需要在<br>本次事务中处理的命令，最后再发送 EXEC 命令表示事务命令结束。Redis的事务是下面4<br>个命令来实现</p><p>1.multi，开启Redis的事务，置客户端为事务态。<br>2.exec，提交事务，执行从multi到此命令前的命令队列，置客户端为非事务态。<br>3.discard，取消事务，置客户端为非事务态。<br>4.watch,监视键值对，作用时如果事务提交exec时发现监视的监视对发生变化，事务将被取消。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">const config = require(<span class="string">'./app/config/config'</span>);</span><br><span class="line">const Redis = require(<span class="string">'ioredis'</span>);</span><br><span class="line"></span><br><span class="line">const redisServer = new Redis(&#123;</span><br><span class="line">    <span class="string">'port'</span>: config.redis_common.port,</span><br><span class="line">    <span class="string">'host'</span>: config.redis_common.host,</span><br><span class="line">    <span class="string">'password'</span>: config.redis_common.password,</span><br><span class="line">    <span class="string">'db'</span>: config.redis_common.db || 0,</span><br><span class="line">&#125;);</span><br><span class="line">const moment = require(<span class="string">'moment'</span>);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // <span class="built_in">let</span> t_exp = new Date(moment().add(1, <span class="string">'days'</span>).format(<span class="string">'YYYY-MM-DD'</span>)).valueOf();</span><br><span class="line">        // await redisServer.set(<span class="string">'boboTeacher_other_modules:skill-count'</span>, 50);</span><br><span class="line">        // await redisServer.pexpireat(<span class="string">'boboTeacher_other_modules:skill-count'</span>, t_exp); // 设置过期时间</span><br><span class="line"></span><br><span class="line">        // boboTeacher_other_modules:skill-count</span><br><span class="line">        <span class="built_in">let</span> count = await redisServer.get(<span class="string">'boboTeacher_other_modules:skill-count'</span>);</span><br><span class="line">        console.log(<span class="string">'count'</span>, count);</span><br><span class="line">        // 监听</span><br><span class="line">        <span class="built_in">let</span> watch = await redisServer.watch(<span class="string">'boboTeacher_other_modules:skill-count'</span>); // OK</span><br><span class="line">        console.log(<span class="string">'watch'</span>, watch);</span><br><span class="line">        // 开启事务</span><br><span class="line">        <span class="built_in">let</span> multi = await redisServer.multi();</span><br><span class="line">        // 减 1</span><br><span class="line">        await multi.decrby(<span class="string">'boboTeacher_other_modules:skill-count'</span>, 1);</span><br><span class="line">        // 结束事务</span><br><span class="line">        <span class="built_in">let</span> result = await multi.exec();// 正常 result====&gt; [ [ null, 46 ] ] 异常 result====&gt; null</span><br><span class="line">        console.log(<span class="string">'result====&gt;'</span>, result);</span><br><span class="line">        // 取消监听</span><br><span class="line">        <span class="built_in">let</span> unwatch = await redisServer.unwatch();</span><br><span class="line">        console.log(<span class="string">'unwatch'</span>, unwatch); // OK</span><br><span class="line"></span><br><span class="line">        <span class="built_in">let</span> count1 = await redisServer.get(<span class="string">'boboTeacher_other_modules:skill-count'</span>);</span><br><span class="line">        console.log(<span class="string">'count1'</span>, count1);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(<span class="string">'error'</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>异常测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">const config = require(<span class="string">'./app/config/config'</span>);</span><br><span class="line">const Redis = require(<span class="string">'ioredis'</span>);</span><br><span class="line"></span><br><span class="line">const redisServer = new Redis(&#123;</span><br><span class="line">    <span class="string">'port'</span>: config.redis_common.port,</span><br><span class="line">    <span class="string">'host'</span>: config.redis_common.host,</span><br><span class="line">    <span class="string">'password'</span>: config.redis_common.password,</span><br><span class="line">    <span class="string">'db'</span>: config.redis_common.db || 0,</span><br><span class="line">&#125;);</span><br><span class="line">const moment = require(<span class="string">'moment'</span>);</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // <span class="built_in">let</span> t_exp = new Date(moment().add(1, <span class="string">'days'</span>).format(<span class="string">'YYYY-MM-DD'</span>)).valueOf();</span><br><span class="line">        // await redisServer.set(<span class="string">'boboTeacher_other_modules:skill-count'</span>, 50);</span><br><span class="line">        // await redisServer.pexpireat(<span class="string">'boboTeacher_other_modules:skill-count'</span>, t_exp); // 设置过期时间</span><br><span class="line"></span><br><span class="line">        // boboTeacher_other_modules:skill-count</span><br><span class="line">        <span class="built_in">let</span> count = await redisServer.get(<span class="string">'boboTeacher_other_modules:skill-count'</span>);</span><br><span class="line">        console.log(<span class="string">'count'</span>, count);</span><br><span class="line">        // 监听</span><br><span class="line">        <span class="built_in">let</span> watch = await redisServer.watch(<span class="string">'boboTeacher_other_modules:skill-count'</span>); // OK</span><br><span class="line">        console.log(<span class="string">'watch'</span>, watch);</span><br><span class="line">        // 开启事务</span><br><span class="line">        <span class="built_in">let</span> multi = await redisServer.multi();</span><br><span class="line">        setTimeout(async () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            // 减 1</span><br><span class="line">            await multi.decrby(<span class="string">'boboTeacher_other_modules:skill-count'</span>, 1);</span><br><span class="line">            // 结束事务</span><br><span class="line">            <span class="built_in">let</span> result = await multi.exec(); // 正常 result====&gt; [ [ null, 46 ] ] 异常 result====&gt; null</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">'result====&gt;'</span>, result);</span><br><span class="line">            // 取消监听</span><br><span class="line">            <span class="built_in">let</span> unwatch = await redisServer.unwatch();</span><br><span class="line">            console.log(<span class="string">'unwatch'</span>, unwatch); // OK</span><br><span class="line"></span><br><span class="line">            <span class="built_in">let</span> count1 = await redisServer.get(<span class="string">'boboTeacher_other_modules:skill-count'</span>);</span><br><span class="line">            console.log(<span class="string">'count1'</span>, count1);</span><br><span class="line"></span><br><span class="line">        &#125;, 5000);</span><br><span class="line"></span><br><span class="line">        await redisServer.decrby(<span class="string">'boboTeacher_other_modules:skill-count'</span>, 1);</span><br><span class="line">        <span class="built_in">let</span> count3 = await redisServer.get(<span class="string">'boboTeacher_other_modules:skill-count'</span>);</span><br><span class="line">        console.log(<span class="string">'count3'</span>, count3);</span><br><span class="line">        console.log(<span class="string">'-----------------'</span>);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(<span class="string">'error'</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP获取地理位置的API</title>
      <link href="IP%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E7%9A%84API/"/>
      <url>IP%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E7%9A%84API/</url>
      
        <content type="html"><![CDATA[<ol><li>淘宝<br><code>http://ip.taobao.com/service/getIpInfo.php?ip=ip地址字串</code></li></ol><p>每个用户的访问频率需小于1qps<br>文档说明 <a href="http://ip.taobao.com/instructions.html" target="_blank" rel="external nofollow noopener noreferrer">http://ip.taobao.com/instructions.html</a></p><ol start="2"><li><p>ip-api<br><code>http://ip-api.com/json/119.35.6.120?lang=zh-CN</code><br>文档说明 <a href="https://ip-api.com/docs" target="_blank" rel="external nofollow noopener noreferrer">https://ip-api.com/docs</a></p></li><li><p>IPIP<br><code>http://freeapi.ipip.net/119.35.6.120</code><br>每天1000次<br>文档说明 <a href="https://www.ipip.net/support/api.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.ipip.net/support/api.html</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IP获取地理位置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的/var/lib/docker目录迁移</title>
      <link href="docker%E7%9A%84-var-lib-docker%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/"/>
      <url>docker%E7%9A%84-var-lib-docker%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>由于/var/lib/docker/overlay2 占用空间很大 迁移到一个空闲的地方</p><ol><li>首先需要停止docker服务</li></ol><p>systemctl stop docker<br>2. 通过命令df -h 先去看下磁盘大概的情况，找一个大的空间</p><ol start="3"><li>创建docker的新目录，我这边找了data, 所以我这边的新目录地址是 /data/docker</li></ol><p>mkdir -p /data/docker<br>注：参数-p 确保目录名称存在，如果目录不存在的就新创建一个。</p><ol start="4"><li>开始迁移</li></ol><p><code>rsync -avzP /var/lib/docker /data/docker</code><br>先确认是否安装了rsync. 若未安装rsync使用<code>yum install -y rsync</code>安装</p><p>参数解释：</p><p>-a，归档模式，表示递归传输并保持文件属性。<br>-v，显示rsync过程中详细信息。可以使用”-vvvv”获取更详细信息。<br>-P，显示文件传输的进度信息。(实际上”-P”=”–partial –progress”，其中的”–progress”才是显示进度信息的)。<br>-z,   传输时进行压缩提高效率。</p><ol start="5"><li>指定新的docker目录</li></ol><p><code>vim /lib/systemd/system/docker.service</code><br>在ExecStart加入:  </p><p> <code>--graph=/data/docker</code></p><ol start="6"><li><p>重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"> </span><br><span class="line">systemctl restart docker</span><br><span class="line"> </span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p>启动之后确认docker 没有问题，删除旧的/var/lib/docker/目录</p></li></ol><p><a href="https://zengwu.com.cn/p/fe977338.html" target="_blank" rel="external nofollow noopener noreferrer">文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置代理</title>
      <link href="CentOS7%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>CentOS7%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ol><li><p>通过修改/etc/profile文件来实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开profile文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加Proxy代理信息（其中username和password根据需要填写，若无则不填写）</span></span><br><span class="line">http_proxy = http://username:password@proxy_ip:port/</span><br><span class="line">https_proxy = http://username:password@proxy_ip:port/</span><br><span class="line">ftp_proxy = http://username:password@proxy_ip:port/</span><br><span class="line"><span class="built_in">export</span> http_proxy</span><br><span class="line"><span class="built_in">export</span> https_proxy</span><br><span class="line"><span class="built_in">export</span> ftp_proxy</span><br><span class="line"></span><br><span class="line"><span class="comment">#生效配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>yum代理设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开yum.conf文件</span></span><br><span class="line">vim /etc/yum.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加Proxy代理信息</span></span><br><span class="line">proxy = http://username:password@proxy_ip:port/</span><br></pre></td></tr></table></figure></li><li><p>wget代理设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开/wgetrc文件</span></span><br><span class="line">vim /etc/wgetrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改Proxy代理信息</span></span><br><span class="line">http_proxy=http://username:password@proxy_ip:port/</span><br><span class="line">ftp_proxy=http://username:password@proxy_ip:port/</span><br></pre></td></tr></table></figure></li></ol><p>重启服务器 <code>reboot</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>polipo|privoxy实现 Linux 系统全局|自动代理</title>
      <link href="polipo%E3%80%81privoxy%E5%AE%9E%E7%8E%B0%20Linux%20%E7%B3%BB%E7%BB%9F%E5%85%A8%E5%B1%80%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%90%86/"/>
      <url>polipo%E3%80%81privoxy%E5%AE%9E%E7%8E%B0%20Linux%20%E7%B3%BB%E7%BB%9F%E5%85%A8%E5%B1%80%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统为-Ubuntu。"><a href="#操作系统为-Ubuntu。" class="headerlink" title="操作系统为 Ubuntu。"></a>操作系统为 Ubuntu。</h1><h2 id="polipo-实现全局代理"><a href="#polipo-实现全局代理" class="headerlink" title="polipo 实现全局代理"></a>polipo 实现全局代理</h2><ol><li>安装 polipo：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install polipo</span><br></pre></td></tr></table></figure></li><li><code>polipo</code> 的配置文件 <code>/etc/polipo/config</code> 初始内容只有 <code>logSyslog</code> 和 <code>logFile</code> 两项。<br>添加以下内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SS 的代理地址</span></span><br><span class="line">socksParentProxy = <span class="string">"127.0.0.1:1081"</span></span><br><span class="line"><span class="comment"># 类型</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line"><span class="comment"># 转换为 HTTP 之后的端口</span></span><br><span class="line">proxyPort = 8123</span><br><span class="line"><span class="comment"># 下面的就不清楚了</span></span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line">proxyAddress = <span class="string">"0.0.0.0"</span></span><br></pre></td></tr></table></figure></li><li>接下来把代理地址添加到环境变量。在 <code>/etc/profile</code> 添加以下内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:8123"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:8123"</span></span><br></pre></td></tr></table></figure></li><li>重新载入：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li>启动 polipo：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service polipo start</span><br></pre></td></tr></table></figure></li><li>测试一下：<br><code>curl www.google.com</code></li></ol><h2 id="privoxy-实现全局和自动代理"><a href="#privoxy-实现全局和自动代理" class="headerlink" title="privoxy 实现全局和自动代理"></a>privoxy 实现全局和自动代理</h2><p>privoxy 可以配置 .action 格式的代理规则文件。通过控制规则文件实现全局和自动代理。</p><p>action 文件可以手动编辑，也可以从 <a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="external nofollow noopener noreferrer">gfwlist</a> 生成。<br>下面将先介绍 privoxy 的安装配置，再介绍 action 文件的生成。</p><ol><li><p>安装配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install privoxy</span><br></pre></td></tr></table></figure></li><li><p>进入目录 /etc/privoxy，可以看到目录结构大致为：</p></li></ol><ul><li><code>config</code> 配置文件，这个文件很长。。</li><li><code>*.action</code> 代理规则文件</li><li><code>*.filter</code> 过滤规则文件</li><li><code>trust</code></li><li><code>templates/</code></li></ul><ol start="3"><li>开始修改配置文件。</li></ol><p>privoxy 有 filter （过滤）的功能，可以用来实现广告拦截。不过这里只希望实现自动代理，在配置文件中把 filter 部分注释掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filterfile default.filter</span></span><br><span class="line"><span class="comment"># filterfile user.filter      # User customizations</span></span><br></pre></td></tr></table></figure><p>可以指定转换后的 HTTP 代理地址，这里直接使用默认端口 8118：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen-address  127.0.0.1:8118</span><br><span class="line">listen-address  [::1]:8118</span><br></pre></td></tr></table></figure><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><ol><li>如果代理规则直接写在配置文件 <code>config</code> 中，那么代理规则和本地 SS 代理地址是写在一起的：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># / 代表匹配全部 URL，即全局代理</span></span><br><span class="line">forward-socks5 / 127.0.0.1:1081 .</span><br></pre></td></tr></table></figure></li></ol><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据规则自动代理</span></span><br><span class="line">forward-socks5 .google.com 127.0.0.1:1081 .</span><br></pre></td></tr></table></figure><p><code>注意！每行最后还有一个点。</code></p><ol start="2"><li>自定义方式配置 如下<br>我们将使用自定义的 action 文件，所以把默认的 action 文件注释掉，并添加自定义文件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认的 action 文件</span></span><br><span class="line"><span class="comment"># actionsfile match-all.action # Actions that are applied to all sites and maybe overruled later on.</span></span><br><span class="line"><span class="comment"># actionsfile default.action   # Main actions file</span></span><br><span class="line"><span class="comment"># actionsfile user.action      # User customizations</span></span><br><span class="line"><span class="comment"># 自定义 action 文件</span></span><br><span class="line">actionsfile my.action</span><br></pre></td></tr></table></figure>新建 action 文件 <code>my.action</code>，内容如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这一行表示本 action 文件中所有条目都使用代理</span></span><br><span class="line">&#123;+forward-override&#123;forward-socks5 127.0.0.1:1081 .&#125;&#125;</span><br><span class="line"><span class="comment"># 添加一条规则</span></span><br><span class="line">.google.com</span><br></pre></td></tr></table></figure></li></ol><h3 id="把-privoxy-转换后的地址-http-127-0-0-1-8118-添加到环境变量，可以参照-polipo-部分。"><a href="#把-privoxy-转换后的地址-http-127-0-0-1-8118-添加到环境变量，可以参照-polipo-部分。" class="headerlink" title="把 privoxy 转换后的地址 http://127.0.0.1:8118 添加到环境变量，可以参照 polipo 部分。"></a>把 privoxy 转换后的地址 <a href="http://127.0.0.1:8118" target="_blank" rel="external nofollow noopener noreferrer">http://127.0.0.1:8118</a> 添加到环境变量，可以参照 polipo 部分。</h3><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service privoxy start</span><br><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure><p><code>注意： 配置文件 config 或 action 文件修改后不需要重启 privoxy。</code></p><h1 id="操作系统-centos"><a href="#操作系统-centos" class="headerlink" title="操作系统 centos"></a>操作系统 centos</h1><h2 id="polipo"><a href="#polipo" class="headerlink" title="polipo"></a>polipo</h2><ol><li>下载<br><code>wget https://copr-be.cloud.fedoraproject.org/results/jasonbrooks/polipo/epel-7-x86_64/polipo-1.1.1-2.fc22/polipo-1.1.1-2.el7.centos.x86_64.rpm</code></li><li>安装<br><code>yum install polipo-1.1.1-2.el7.centos.x86_64.rpm</code></li><li>配置<br><code>vim /etc/polipo/config</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">socksParentProxy = <span class="string">"localhost:9050"</span></span><br><span class="line">socksProxyType = socks5  <span class="comment"># 这里Polipo提供了把他接管的http送到socks5的方法</span></span><br><span class="line">diskCacheRoot = <span class="string">""</span>  <span class="comment"># 这一行跟上两行不挨在一起，往下面找找，如果不需要Tor，仅仅用Polipo的话，这三行可以不用打开</span></span><br><span class="line"></span><br><span class="line">chunkHighMark = 50331648  <span class="comment"># 这两行是控制使用的内存大小，打开即可</span></span><br><span class="line">objectHighMark = 16384</span><br></pre></td></tr></table></figure><ol start="4"><li>运行<br><code>systemctl start polipo</code></li></ol><h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><ol><li>环境变量的配置 很多教程都只添加了 http_proxy 一项，但是实际使用中发现也需要设置 https_proxy</li><li>另外，关于地址的写法，只写 127.0.0.1:8123 时，遇到过有软件不能识别的情况，改为写完整的地址 <a href="http://127.0.0.1:8123/" target="_blank" rel="external nofollow noopener noreferrer">http://127.0.0.1:8123/</a> 就不会有问题了。</li></ol><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p><a href="https://www.bbsmax.com/A/MAzAgwjM59/" target="_blank" rel="external nofollow noopener noreferrer">Privoxy教程</a><br><a href="https://blog.phpgao.com/privoxy-shadowsocks.html" target="_blank" rel="external nofollow noopener noreferrer">使用Privoxy将socks5代理转为http代理</a><br><a href="https://juejin.cn/post/6844903813393055751" target="_blank" rel="external nofollow noopener noreferrer">polipo/privoxy 实现 Linux 系统全局/自动代理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> privoxy </tag>
            
            <tag> polipo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理服务器</title>
      <link href="%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="新建一个目录"><a href="#新建一个目录" class="headerlink" title="新建一个目录"></a>新建一个目录</h1><p>shadowsocks</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm install shadowsocks</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>安装后修改对应的config.json配置文件，修改端口和密码等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>, // 我用的是腾讯云，这里修改成了0.0.0.0</span><br><span class="line">    <span class="string">"server_port"</span>:3333,//此处修改为自己的端口</span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"woshimima"</span>,//修改你自己的密码</span><br><span class="line">    <span class="string">"timeout"</span>:600,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>./bin/ssserver</p><h1 id="也可以安装在全局"><a href="#也可以安装在全局" class="headerlink" title="也可以安装在全局"></a>也可以安装在全局</h1><ol><li>centos7以上<br><code>yum install python-setuptools &amp;&amp; easy_install pip</code><br><code>pip install shadowsocks</code></li><li>Debian / Ubuntu:<br><code>apt-get install python-pip</code><br><code>pip install shadowsocks</code></li></ol><p>在/etc 下创建文件config.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>, // 我用的是腾讯云，这里修改成了0.0.0.0</span><br><span class="line">    <span class="string">"server_port"</span>:3333,//此处修改为自己的端口</span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"woshimima"</span>,//修改你自己的密码</span><br><span class="line">    <span class="string">"timeout"</span>:600,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>ssserver -c /etc/shadowsocks.json</code></p><p>后台运行: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure><p>配置自启动<br>新建启动脚本文件<code>/etc/systemd/system/shadowsocks.service</code>，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动<br><code>systemctl enable shadowsocks</code><br><code>systemctl start shadowsocks</code><br>启动后可以查看服务状态<br><code>systemctl status shadowsocks -l</code></p><p>注意 centos7用的firewalld 需要配置端口开放<br><code>firewall-cmd --permanent --add-port=3333/tcp</code><br><code>firewall-cmd --reload</code></p><h2 id="连接工具下在-windows-https-github-com-shadowsocks-shadowsocks-windows-releases"><a href="#连接工具下在-windows-https-github-com-shadowsocks-shadowsocks-windows-releases" class="headerlink" title="连接工具下在 windows https://github.com/shadowsocks/shadowsocks-windows/releases"></a>连接工具下在 windows <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/shadowsocks/shadowsocks-windows/releases</a></h2><p>文档<br><a href="https://zengwu.com.cn/p/5eceab18.html" target="_blank" rel="external nofollow noopener noreferrer">CentOS7 下搭建shadowsocks</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载和重写的区别及在typescript中的使用</title>
      <link href="%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%9C%A8typescript%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%9C%A8typescript%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h2><p>从字面上看，重写就是 重新写一遍的意思。其实就是在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型(除过子类中方法的返回值是父类中方法返回值的子类时)都相同的情况下， 对方法体进行修改或重写，这就是重写。但要注意子类函数的访问修饰权限不能小于父类的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    public <span class="function"><span class="title">eat</span></span>() &#123;</span><br><span class="line">        console.log(<span class="string">"这是一个吃的方法"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    public <span class="function"><span class="title">eat</span></span>() &#123;</span><br><span class="line">        console.log(<span class="string">"这是一个小狗吃的方法"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> dog: Dog = new Dog()</span><br><span class="line">dog.eat()</span><br></pre></td></tr></table></figure><p>重写 总结：</p><ul><li>发生在父类与子类之间</li><li>方法名，参数列表，返回类型（除过子类中方法的返回类型是父类中返回类型的子类）必须相同</li><li>访问修饰符的限制一定要大于被重写方法的访问修饰符（public&gt;protected&gt;private)</li></ul><h2 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h2><p>在一个类中，同名的方法如果有不同的参数列表（<code>参数类型不同、参数个数不同甚至是参数顺序不同</code>）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但<code>不能通过返回类型是否相同来判断重载</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">class Demo &#123;</span><br><span class="line">  // 重载</span><br><span class="line">  public <span class="built_in">log</span>(): void;</span><br><span class="line">  public <span class="built_in">log</span>(arg1: string): void;</span><br><span class="line">  public <span class="built_in">log</span>(arg1: number, arg2: number): void;</span><br><span class="line">  public <span class="built_in">log</span>(arg1: string, arg2: string): void;</span><br><span class="line">  // 实现</span><br><span class="line">  <span class="built_in">log</span>(arg1?: string | number, arg2?: string | number) &#123;</span><br><span class="line">    console.log(arg1, arg2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> = Demo;</span><br></pre></td></tr></table></figure><p>面试题：重载（Overload）和重写（Override）的区别？<br>答：方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求，不能根据返回类型进行区分。</p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crypto加密参数</title>
      <link href="crypto%E5%8A%A0%E5%AF%86%E5%8F%82%E6%95%B0/"/>
      <url>crypto%E5%8A%A0%E5%AF%86%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="HMac-算法"><a href="#HMac-算法" class="headerlink" title="HMac 算法"></a>HMac 算法</h2><ol><li>sha256 加密 微信参数加密</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const <span class="built_in">hash</span> = crypto.createHmac(<span class="string">'sha256'</span>, 秘钥).update(<span class="string">'需要加密的参数 string类型的参数'</span>).digest(<span class="string">'hex'</span>);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">return</span> hash.toUpperCase();</span><br></pre></td></tr></table></figure><h2 id="签名和验证算法"><a href="#签名和验证算法" class="headerlink" title="签名和验证算法"></a>签名和验证算法</h2><ol start="2"><li>RSA 秘钥加密 转 base64 支付宝参数加密</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const sign = crypto.createSign(<span class="string">'RSA-SHA1'</span>);</span><br><span class="line">sign.update(querystring);</span><br><span class="line">sign.sign(this.privateKey, <span class="string">'base64'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>RSA2 秘钥加密 转 base64 支付宝参数加密</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const sign = crypto.createSign(<span class="string">'RSA-SHA256'</span>);</span><br><span class="line">sign.update(querystring);</span><br><span class="line">sign.sign(this.privateKey, <span class="string">'base64'</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>公钥加密 支付宝 回调 sign 验证</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> verify;</span><br><span class="line">    <span class="keyword">if</span> (sign_type.toUpperCase() === <span class="string">'RSA2'</span>) &#123;</span><br><span class="line">      verify = crypto.createVerify(<span class="string">'RSA-SHA256'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign_type.toUpperCase() === <span class="string">'RSA'</span>) &#123;</span><br><span class="line">      verify = crypto.createVerify(<span class="string">'RSA-SHA1'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      throw new Error(<span class="string">'请传入正确的签名方式，sign_type：'</span> + sign_type);</span><br><span class="line">    &#125;</span><br><span class="line">    verify.update(querystring);</span><br><span class="line">    <span class="built_in">return</span> verify.verify(this.publicKey, sign, <span class="string">'base64'</span>);</span><br></pre></td></tr></table></figure><h2 id="HMac-算法-md5"><a href="#HMac-算法-md5" class="headerlink" title="HMac 算法 md5"></a>HMac 算法 md5</h2><ol start="5"><li>数据内容签名：把(请求内容(未编码)+AppKey)进行 MD5 加密，然后 Base64 编码，最后 进行 URL(utf-8)编码。快递鸟签名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const <span class="built_in">hash</span> = crypto.createHash(<span class="string">'md5'</span>);</span><br><span class="line">    hash.update(requestData);</span><br><span class="line">    hash.update(key);</span><br><span class="line">    <span class="built_in">let</span> sign = hash.digest(<span class="string">'hex'</span>);</span><br><span class="line">    sign = Buffer.from(sign).toString(<span class="string">'base64'</span>);</span><br><span class="line">    sign = encodeURIComponent(sign);</span><br><span class="line">    <span class="built_in">return</span> sign;</span><br></pre></td></tr></table></figure><h2 id="非对称加密解密-RSA"><a href="#非对称加密解密-RSA" class="headerlink" title="非对称加密解密 (RSA)"></a>非对称加密解密 (RSA)</h2><p>借助 openssl 生成私钥和公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">openssl genrsa -out privatekey.pem 1024</span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> privatekey.pem -pubout -out publickey.pem</span><br></pre></td></tr></table></figure><p>对 hello world! 加密和解密的代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(<span class="string">"crypto"</span>);</span><br><span class="line">const fs = require(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">const privateKey = fs.readFileSync(<span class="string">"./privatekey.pem"</span>);</span><br><span class="line">const publicKey = fs.readFileSync(<span class="string">"./publickey.pem"</span>);</span><br><span class="line"></span><br><span class="line">const content = <span class="string">"hello world!"</span>; // 待加密的明文内容</span><br><span class="line"></span><br><span class="line">// 公钥加密</span><br><span class="line">const encodeData = crypto.publicEncrypt(publicKey, Buffer.from(content));</span><br><span class="line">console.log(encodeData.toString(<span class="string">"base64"</span>));</span><br><span class="line">// 私钥解密</span><br><span class="line">const decodeData = crypto.privateDecrypt(privateKey, encodeData);</span><br><span class="line">console.log(decodeData.toString(<span class="string">"utf8"</span>));</span><br></pre></td></tr></table></figure><h2 id="对称加密-AES"><a href="#对称加密-AES" class="headerlink" title="对称加密 (AES)"></a>对称加密 (AES)</h2><p>下面是用 aes-256-cbc 算法对明文进行加密：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(<span class="string">"crypto"</span>);</span><br><span class="line"></span><br><span class="line">const secret = crypto.randomBytes(32); // 密钥</span><br><span class="line">const content = <span class="string">"hello world!"</span>; // 要加密的明文</span><br><span class="line"></span><br><span class="line">const cipher = crypto.createCipheriv(</span><br><span class="line">    <span class="string">"aes-256-cbc"</span>,</span><br><span class="line">    secret,</span><br><span class="line">    Buffer.alloc(16, 0)</span><br><span class="line">);</span><br><span class="line">cipher.update(content, <span class="string">"utf8"</span>);</span><br><span class="line">// 加密后的结果：e2a927165757acc609a89c093d8e3af5</span><br><span class="line">console.log(cipher.final(<span class="string">"hex"</span>));</span><br></pre></td></tr></table></figure><p>注意：在使用加密算法的时候，给定的密钥长度是有要求的，否则会爆出 this[kHandle].initiv(cipher, credential, iv, authTagLength); Error: Invalid key length… 的错误。以 aes-256-cbc 算法为例，需要 256 bits = 32 bytes 大小的密钥。同样地，AES 的 IV 也是有要求的，需要 128bits。（请参考 “参考链接” 部分）</p><p>使用 32 个连续 I 作为密钥，用 aes-256-cbc 加密后的结果是 a061e67f5643d948418fdb150745f24d。下面是逆向解密的过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const secret = <span class="string">"I"</span>.repeat(32);</span><br><span class="line">const decipher = crypto.createDecipheriv(</span><br><span class="line">    <span class="string">"aes-256-cbc"</span>,</span><br><span class="line">    secret,</span><br><span class="line">    Buffer.alloc(16, 0)</span><br><span class="line">);</span><br><span class="line">decipher.update(<span class="string">"a061e67f5643d948418fdb150745f24d"</span>, <span class="string">"hex"</span>);</span><br><span class="line">console.log(decipher.final(<span class="string">"utf8"</span>)); // 解密后的结果：hello world!</span><br></pre></td></tr></table></figure><h2 id="图片文件的文件摘要"><a href="#图片文件的文件摘要" class="headerlink" title="图片文件的文件摘要"></a>图片文件的文件摘要</h2><p>即对图片文件的二进制内容进行 sha256 计算得到的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const pic_buffer = fs.readFileSync(<span class="string">'72fe0092be0cf9dd8420579cc954fb4e.jpg'</span>);</span><br><span class="line">const sign = crypto.createHash(<span class="string">'sha256'</span>);</span><br><span class="line">  sign.update(pic_buffer);</span><br><span class="line">  console.log(sign.digest(<span class="string">'hex'</span>))</span><br></pre></td></tr></table></figure><h2 id="公钥加密（crypto-constants-RSA-PKCS1-OAEP-PADDING）"><a href="#公钥加密（crypto-constants-RSA-PKCS1-OAEP-PADDING）" class="headerlink" title="公钥加密（crypto.constants.RSA_PKCS1_OAEP_PADDING）"></a>公钥加密（crypto.constants.RSA_PKCS1_OAEP_PADDING）</h2><p>文档链接：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_3.shtml" target="_blank" rel="external nofollow noopener noreferrer">微信支付-敏感信息加解密</a></p><p>对应 java 签名方法是 Cipher.getinstance(RSA/ECB/OAEPWithSHA-1AndMGF1Padding)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 敏感信息加密</span></span><br><span class="line"><span class="comment">   * @param str 敏感信息字段（如用户的住址、银行卡号、手机号码等）</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> publicEncrypt(str: <span class="built_in">string</span>, padding = crypto.constants.RSA_PKCS1_OAEP_PADDING) &#123;</span><br><span class="line">    <span class="keyword">if</span> (![crypto.constants.RSA_PKCS1_PADDING, crypto.constants.RSA_PKCS1_OAEP_PADDING].includes(padding)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Doesn't supported the padding mode(<span class="subst">$&#123;padding&#125;</span>), here's only support RSA_PKCS1_OAEP_PADDING or RSA_PKCS1_PADDING.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> encrypted = crypto.publicEncrypt(&#123; key: <span class="keyword">this</span>.publicKey, padding, oaepHash: <span class="string">'sha1'</span> &#125;, Buffer.from(str, <span class="string">'utf8'</span>)).toString(<span class="string">'base64'</span>);</span><br><span class="line">    <span class="keyword">return</span> encrypted;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="私钥解密（crypto-constants-RSA-PKCS1-OAEP-PADDING）"><a href="#私钥解密（crypto-constants-RSA-PKCS1-OAEP-PADDING）" class="headerlink" title="私钥解密（crypto.constants.RSA_PKCS1_OAEP_PADDING）"></a>私钥解密（crypto.constants.RSA_PKCS1_OAEP_PADDING）</h2><p>文档链接：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_3.shtml" target="_blank" rel="external nofollow noopener noreferrer">微信支付-敏感信息加解密</a></p><p>对应 java 签名方法是 Cipher.getinstance(RSA/ECB/OAEPWithSHA-1AndMGF1Padding)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 敏感信息解密</span></span><br><span class="line"><span class="comment">   * @param str 敏感信息字段（如用户的住址、银行卡号、手机号码等）</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> privateDecrypt(str: <span class="built_in">string</span>, padding = crypto.constants.RSA_PKCS1_OAEP_PADDING) &#123;</span><br><span class="line">    <span class="keyword">if</span> (![crypto.constants.RSA_PKCS1_PADDING, crypto.constants.RSA_PKCS1_OAEP_PADDING].includes(padding)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Doesn't supported the padding mode(<span class="subst">$&#123;padding&#125;</span>), here's only support RSA_PKCS1_OAEP_PADDING or RSA_PKCS1_PADDING.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> decrypted = crypto.privateDecrypt(&#123; key: <span class="keyword">this</span>.privateKey <span class="keyword">as</span> Buffer, padding, oaepHash: <span class="string">'sha1'</span> &#125;, Buffer.from(str, <span class="string">'base64'</span>));</span><br><span class="line">    <span class="keyword">return</span> decrypted.toString(<span class="string">'utf8'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="使用对称加密算法-AES-ECB-PKCS5Padding，对请求体和响应体进行加密与解密，结果采用-Base64-编码。"><a href="#使用对称加密算法-AES-ECB-PKCS5Padding，对请求体和响应体进行加密与解密，结果采用-Base64-编码。" class="headerlink" title="使用对称加密算法 AES/ECB/PKCS5Padding，对请求体和响应体进行加密与解密，结果采用 Base64 编码。"></a>使用对称加密算法 AES/ECB/PKCS5Padding，对请求体和响应体进行加密与解密，结果采用 Base64 编码。</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * AES/ECB/PKCS5Padding 加密</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> aesEncrypt(data: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cipherChunks = [];</span><br><span class="line">    <span class="keyword">const</span> cipher = crypto.createCipheriv(<span class="string">'aes-128-ecb'</span>, Buffer.from(<span class="keyword">this</span>.AES_KEY, <span class="string">'base64'</span>), Buffer.alloc(<span class="number">0</span>));</span><br><span class="line">    cipher.setAutoPadding(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    cipherChunks.push(cipher.update(data, <span class="string">'utf8'</span>, <span class="string">'base64'</span>));</span><br><span class="line">    cipherChunks.push(cipher.final(<span class="string">'base64'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipherChunks.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * AES/ECB/PKCS5Padding 解密</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> aesDecrypt(data: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cipherChunks = [];</span><br><span class="line">    <span class="keyword">const</span> decipher = crypto.createDecipheriv(<span class="string">'aes-128-ecb'</span>, Buffer.from(<span class="keyword">this</span>.AES_KEY, <span class="string">'base64'</span>), Buffer.alloc(<span class="number">0</span>));</span><br><span class="line">    decipher.setAutoPadding(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    cipherChunks.push(decipher.update(data, <span class="string">'base64'</span>, <span class="string">'utf8'</span>));</span><br><span class="line">    cipherChunks.push(decipher.final(<span class="string">'utf8'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipherChunks.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java</span></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.charset.StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AesUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Base64.Encoder ENCODER = Base64.getEncoder();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Base64.Decoder DECODER = Base64.getDecoder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">aesEncrypt</span><span class="params">(SecretKey key, String plaintext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">        <span class="keyword">byte</span>[] cipherBytes = cipher.doFinal(plaintext.getBytes(UTF_8));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(ENCODER.encode(cipherBytes), UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">aesDecrypt</span><span class="params">(SecretKey key, String ciphertext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">        <span class="keyword">byte</span>[] cipherBytes = DECODER.decode(ciphertext.getBytes(UTF_8));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(cipher.doFinal(cipherBytes), UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title">newAesKey</span><span class="params">(String keyStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(DECODER.decode(keyStr.getBytes(UTF_8)), <span class="string">"AES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toAesKeyStr</span><span class="params">(SecretKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(ENCODER.encode(key.getEncoded()), UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="需使用签名算法-SHA256withRSA，对请求待签字符串和响应待签字符串进行签名，签名结果采用-Base64-编码。"><a href="#需使用签名算法-SHA256withRSA，对请求待签字符串和响应待签字符串进行签名，签名结果采用-Base64-编码。" class="headerlink" title="需使用签名算法 SHA256withRSA，对请求待签字符串和响应待签字符串进行签名，签名结果采用 Base64 编码。"></a>需使用签名算法 SHA256withRSA，对请求待签字符串和响应待签字符串进行签名，签名结果采用 Base64 编码。</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * SHA256withRSA 私钥签名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> rsaSign(data: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sign = crypto.createSign(<span class="string">'RSA-SHA256'</span>);</span><br><span class="line">    sign.update(Buffer.from(data, <span class="string">'utf8'</span>));</span><br><span class="line">    <span class="keyword">return</span> sign.sign(<span class="keyword">this</span>.CUSTOMER_PRIVATE_KEY, <span class="string">'base64'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * SHA256withRSA 公钥验签</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> rsaVerify(data: <span class="built_in">string</span>, sign: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> verify = crypto.createVerify(<span class="string">'RSA-SHA256'</span>);</span><br><span class="line">    verify.update(Buffer.from(data, <span class="string">'utf8'</span>));</span><br><span class="line">    <span class="keyword">return</span> verify.verify(<span class="keyword">this</span>.TRIP_LINK_PUBLIC_KEY, sign, <span class="string">'base64'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.charset.StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Base64.Encoder ENCODER = Base64.getEncoder();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Base64.Decoder DECODER = Base64.getDecoder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">rsaSign</span><span class="params">(PrivateKey privateKey, String content)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Signature signer = Signature.getInstance(<span class="string">"SHA256withRSA"</span>);</span><br><span class="line">        signer.initSign(privateKey);</span><br><span class="line">        signer.update(content.getBytes(UTF_8));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(ENCODERL.encode(signer.sign()), UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">rsaVerify</span><span class="params">(PublicKey publicKey, String content, String signature)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Signature signer = Signature.getInstance(<span class="string">"SHA256withRSA"</span>);</span><br><span class="line">        signer.initVerify(publicKey);</span><br><span class="line">        signer.update(content.getBytes(UTF_8));</span><br><span class="line">        <span class="keyword">return</span> signer.verify(DECODER.decode(signature.getBytes(UTF_8)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title">newRsaPrivateKey</span><span class="params">(String privateKeyStr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = DECODER.decode(privateKeyStr.getBytes(UTF_8));</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(bytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title">newRsaPublicKey</span><span class="params">(String publicKeyStr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = DECODER.decode(publicKeyStr.getBytes(UTF_8));</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(bytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toRsaPrivateKeyStr</span><span class="params">(PrivateKey privateKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(ENCODER.encode(privateKey.getEncoded()), UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toRsaPublicKeyStr</span><span class="params">(PublicKey publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(ENCODER.encode(publicKey.getEncoded()), UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://my.oschina.net/ahaoboy/blog/3167535" target="_blank" rel="external nofollow noopener noreferrer">nodejs crypto 加密 对称加密 非对称加密</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> crypto </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己发布的NPM包在CNPM上不同步</title>
      <link href="%E8%87%AA%E5%B7%B1%E5%8F%91%E5%B8%83%E7%9A%84NPM%E5%8C%85%E5%9C%A8CNPM%E4%B8%8A%E4%B8%8D%E5%90%8C%E6%AD%A5/"/>
      <url>%E8%87%AA%E5%B7%B1%E5%8F%91%E5%B8%83%E7%9A%84NPM%E5%8C%85%E5%9C%A8CNPM%E4%B8%8A%E4%B8%8D%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>由于自己发布的包等了一天cnpm 还是没有同步npm上面的包，所以就自己手动同步</p><ol><li>访问 <a href="https://npm.taobao.org/" target="_blank" rel="external nofollow noopener noreferrer">https://npm.taobao.org/</a></li><li>搜索自己的包<br><img src="https://img-blog.csdnimg.cn/20201216092602804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>会进入以下页面 右上角 sync，跳转新页面，等待 同步就可以啦<br><img src="https://img-blog.csdnimg.cn/20201216092707107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>成功后如下<br><img src="https://img-blog.csdnimg.cn/20201216092815425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p>或者通过命令同步</p><ol><li><code>cnpm sync node-wxapy3</code><br>或者</li><li><code>open https://npm.taobao.org/sync/node-wxpay3</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 发布npm插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序多人音视频参数处理</title>
      <link href="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A4%9A%E4%BA%BA%E9%9F%B3%E8%A7%86%E9%A2%91%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/"/>
      <url>%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A4%9A%E4%BA%BA%E9%9F%B3%E8%A7%86%E9%A2%91%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="使用的是koa2"><a href="#使用的是koa2" class="headerlink" title="使用的是koa2"></a>使用的是koa2</h2><p><code>const got = require(&#39;got&#39;);</code><br><code>const moment = require(&#39;moment&#39;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> &#123; code = <span class="string">''</span>, groupId = <span class="string">'1559_6729'</span>, roomType = <span class="string">'voice'</span> &#125; = ctx.request.body;</span><br><span class="line"><span class="keyword">if</span> (!code) throw new CustomError(<span class="string">'缺少code'</span>, ErrorConf.DefectParam);</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> appid = wxConf.student_appid,</span><br><span class="line">    appsecret = wxConf.student_appsecret;</span><br><span class="line"><span class="built_in">let</span> WxLoginInfo = (await got.get(`https://api.weixin.qq.com/sns/jscode2session?appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>&amp;js_code=<span class="variable">$&#123;code&#125;</span>&amp;grant_type=authorization_code`, &#123; <span class="string">'json'</span>: <span class="literal">true</span> &#125;)).body;</span><br><span class="line">// 返回值</span><br><span class="line"><span class="built_in">let</span> &#123; session_key, errcode, errmsg, openid &#125; = WxLoginInfo || &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (errmsg) throw new CustomError(errmsg, ErrorConf.ParamError);</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> params = &#123;</span><br><span class="line">    <span class="string">'appId'</span>: appid,</span><br><span class="line">    <span class="string">'groupId'</span>: groupId,</span><br><span class="line">    <span class="string">'nonceStr'</span>: Math.random().toString(36).substr(2, 15),</span><br><span class="line">    <span class="string">'timeStamp'</span>: moment(moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)).valueOf() / 1000 + <span class="string">''</span>,</span><br><span class="line">    <span class="string">'roomType'</span>: roomType,</span><br><span class="line">    <span class="string">'signature'</span>: <span class="string">''</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const str = Object.keys(params).filter(<span class="keyword">function</span>(key) &#123;</span><br><span class="line">    <span class="built_in">return</span> params[key] !== undefined &amp;&amp; params[key] !== <span class="string">''</span> &amp;&amp; ![ <span class="string">'roomType'</span>, <span class="string">'signature'</span>, <span class="string">'session_key'</span> ].includes(key);</span><br><span class="line">&#125;).map(<span class="keyword">function</span>(key) &#123;</span><br><span class="line">    <span class="built_in">return</span> params[key];</span><br><span class="line">&#125;)</span><br><span class="line">    .sort()</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">params.signature = crypto.createHmac(<span class="string">'sha256'</span>, session_key)</span><br><span class="line">    .update(str)</span><br><span class="line">    .digest(<span class="string">'hex'</span>);</span><br><span class="line"></span><br><span class="line">delete params[<span class="string">'appId'</span>];</span><br><span class="line">params[<span class="string">'openid'</span>] = openid;</span><br><span class="line">params[<span class="string">'timeStamp'</span>] = parseInt(params[<span class="string">'timeStamp'</span>]);</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'params'</span>, params)</span><br></pre></td></tr></table></figure><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/voip-room.html" target="_blank" rel="external nofollow noopener noreferrer">voip-room</a><br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.joinVoIPChat.html" target="_blank" rel="external nofollow noopener noreferrer">wx.joinVoIPChat</a><br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/voip-chat.html#%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95" target="_blank" rel="external nofollow noopener noreferrer">签名算法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器做端口映射报错(Error response from daemon)</title>
      <link href="Docker%E5%AE%B9%E5%99%A8%E5%81%9A%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E6%8A%A5%E9%94%99/"/>
      <url>Docker%E5%AE%B9%E5%99%A8%E5%81%9A%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="docker出现错误"><a href="#docker出现错误" class="headerlink" title="docker出现错误"></a>docker出现错误</h2><p> <code>Error response from daemon: driver failed programming external connectivity on endpoint mysql (a29d3409d7b1f5eaf8706050f4aeed7b11fa90415d243239a0c882eeb9fb83be):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 3306 -j DNAT --to-destination 172.17.0.5:3306 ! -i docker0: iptables: No chain/target/match by that name.</code><br> Docker容器做端口映射报错，docker服务启动时定义的自定义链DOCKER被清除；重启即可<br> systemctl restart docker</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Docker拉取镜像慢的问题</title>
      <link href="%E8%A7%A3%E5%86%B3Docker%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>%E8%A7%A3%E5%86%B3Docker%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>配置阿里云加速<br><code>https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</code><br>点击镜像中心的镜像加速器</p><p>加速地址为 <code>https://quk9x0kt.mirror.aliyuncs.com</code> 或者也可以使用网易的<code>http://hub-mirror.c.163.com</code></p><h2 id="centos配置"><a href="#centos配置" class="headerlink" title="centos配置"></a>centos配置</h2><ol><li><code>vim /etc/docker/daemon.json</code></li><li>在配置文件中加入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://quk9x0kt.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重启服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h2 id="mac配置"><a href="#mac配置" class="headerlink" title="mac配置"></a>mac配置</h2><ol><li>安装docker<br><code>brew cask install docker</code></li><li>点击启动 -&gt;右上角有图片-&gt;点击选择Preferences -&gt; 选择Docker Engine<br>加入配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"http://hub-mirror.c.163.com"</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ol><p>整体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"experimental"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"http://hub-mirror.c.163.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>docker info</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sessionStorage和localStorage的使用</title>
      <link href="sessionStorage%E5%92%8ClocalStorage%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>sessionStorage%E5%92%8ClocalStorage%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><code>sessionStorage 浏览器关闭时自动销毁</code></p><p><code>localStorage 存储在浏览器中，无期限</code></p><h2 id="sessionStorage用法-一般用于浏览器刷新缓存vuex"><a href="#sessionStorage用法-一般用于浏览器刷新缓存vuex" class="headerlink" title="sessionStorage用法 (一般用于浏览器刷新缓存vuex)"></a>sessionStorage用法 (一般用于浏览器刷新缓存vuex)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 保存或设置数据到sessionStorage</span><br><span class="line">    sessionStorage.setItem(<span class="string">'key'</span>,<span class="string">'value'</span>)</span><br><span class="line">    </span><br><span class="line">// 获取某个sessionStorage</span><br><span class="line">    sessionStorage.getItem(<span class="string">'key'</span>)</span><br><span class="line">    </span><br><span class="line">// 从sessionStorage删除某个保存的数据</span><br><span class="line">    sessionStorage.removeItem(<span class="string">'key'</span>)</span><br><span class="line">    </span><br><span class="line">// 从sessionStorage删除所有保存的数据</span><br><span class="line">    sessionStorage.clear();</span><br></pre></td></tr></table></figure><h2 id="localStorage用法"><a href="#localStorage用法" class="headerlink" title="localStorage用法"></a>localStorage用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 保存或设置数据到localStorage</span><br><span class="line">    localStorage.setItem(<span class="string">'key'</span>,<span class="string">'value'</span>)</span><br><span class="line">    </span><br><span class="line">// 获取某个localStorage</span><br><span class="line">    localStorage.getItem(<span class="string">'key'</span>)</span><br><span class="line">    </span><br><span class="line">// 从localStorage删除某个保存的数据</span><br><span class="line">    localStorage.removeItem(<span class="string">'key'</span>)</span><br><span class="line">    </span><br><span class="line">// 从localStorage删除所有保存的数据</span><br><span class="line">    localStorage.clear();</span><br></pre></td></tr></table></figure><p>vuex在页面刷新后，store中的状态将被重新初始化，赋值的数据丢失, 所以在页面刷新或离开之前将store中的数据保存到sessionStorage 或 localStorage中，在页面重新加载后再将数据取出，通过vuex的$store.replaceState 将数据替换到store中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.vue:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">created</span></span> () &#123;</span><br><span class="line"> </span><br><span class="line">     //在页面加载时读取sessionStorage里的状态信息</span><br><span class="line">     <span class="keyword">if</span> (sessionStorage.getItem(<span class="string">"storedata"</span>) ) &#123;</span><br><span class="line">         this.<span class="variable">$store</span>.replaceState(Object.assign(&#123;&#125;, this.<span class="variable">$store</span>.state,JSON.parse(sessionStorage.getItem(<span class="string">"storedata"</span>))))</span><br><span class="line">     &#125;</span><br><span class="line">    //在页面刷新时将vuex里的信息保存到sessionStorage里</span><br><span class="line">    window.addEventListener(<span class="string">"beforeunload"</span>,()=&gt;&#123;</span><br><span class="line">        sessionStorage.setItem(<span class="string">"storedata"</span>,JSON.stringify(this.<span class="variable">$store</span>.state))</span><br><span class="line">    &#125;);     // 兼容iphone手机</span><br><span class="line">    window.addEventListener(<span class="string">"pagehide"</span>,()=&gt;&#123;</span><br><span class="line">         sessionStorage.setItem(<span class="string">"storedata"</span>,JSON.stringify(this.<span class="variable">$store</span>.state))</span><br><span class="line">    &#125;);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgre实现按年月日周统计分组统计</title>
      <link href="postgre%E5%AE%9E%E7%8E%B0%E6%8C%89%E5%B9%B4%E6%9C%88%E6%97%A5%E5%91%A8%E7%BB%9F%E8%AE%A1%E5%88%86%E7%BB%84%E7%BB%9F%E8%AE%A1/"/>
      <url>postgre%E5%AE%9E%E7%8E%B0%E6%8C%89%E5%B9%B4%E6%9C%88%E6%97%A5%E5%91%A8%E7%BB%9F%E8%AE%A1%E5%88%86%E7%BB%84%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>const sequelize = require(‘sequelize’);</p><h2 id="postgre-按照年分组统计"><a href="#postgre-按照年分组统计" class="headerlink" title="postgre 按照年分组统计"></a>postgre 按照年分组统计</h2><blockquote><p>SELECT to_char(“createdAt”::DATE, ‘YYYY’) AS “year”, SUM(“money”) AS “total” FROM “reward_logs” AS “reward_log” GROUP BY “year” ORDER BY “year” DESC</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> list = await model.findAll(&#123;</span><br><span class="line">        <span class="string">'attributes'</span>: [[ sequelize.literal(`to_char(<span class="string">"createdAt"</span>::DATE, <span class="string">'$&#123;'</span>YYYY<span class="string">'&#125;'</span>)`), <span class="string">'year'</span> ], [ sequelize.fn(<span class="string">'SUM'</span>, sequelize.col(<span class="string">'money'</span>)), <span class="string">'total'</span> ]],</span><br><span class="line">        <span class="string">'where'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'group'</span>: [ sequelize.col(<span class="string">'year'</span>) ],</span><br><span class="line">        <span class="string">'order'</span>: [[ sequelize.col(<span class="string">'year'</span>), <span class="string">'DESC'</span> ]],</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(<span class="string">'list===========&gt;'</span>, list);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="postgre-按照月分组统计"><a href="#postgre-按照月分组统计" class="headerlink" title="postgre 按照月分组统计"></a>postgre 按照月分组统计</h2><blockquote><p>SELECT to_char(“createdAt”::DATE, ‘YYYY-MM’) AS “month”, SUM(“money”) AS “total” FROM “reward_logs” AS “reward_log” GROUP BY “month” ORDER BY “month” DESC;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> list = await model.findAll(&#123;</span><br><span class="line">        <span class="string">'attributes'</span>: [[ sequelize.literal(`to_char(<span class="string">"createdAt"</span>::DATE, <span class="string">'$&#123;'</span>YYYY-MM<span class="string">'&#125;'</span>)`), <span class="string">'month'</span> ], [ sequelize.fn(<span class="string">'SUM'</span>, sequelize.col(<span class="string">'money'</span>)), <span class="string">'total'</span> ]],</span><br><span class="line">        <span class="string">'where'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'group'</span>: [ sequelize.col(<span class="string">'month'</span>) ],</span><br><span class="line">        <span class="string">'order'</span>: [[ sequelize.col(<span class="string">'month'</span>), <span class="string">'DESC'</span> ]],</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(<span class="string">'list===========&gt;'</span>, list);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="postgre-按照日分组统计"><a href="#postgre-按照日分组统计" class="headerlink" title="postgre 按照日分组统计"></a>postgre 按照日分组统计</h2><blockquote><p>SELECT to_char(“createdAt”::DATE, ‘YYYY-MM-DD’) AS “day”, SUM(“money”) AS “total” FROM “reward_logs” AS “reward_log” GROUP BY “day” ORDER BY “day” DESC;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> list = await model.findAll(&#123;</span><br><span class="line">        <span class="string">'attributes'</span>: [[ sequelize.literal(`to_char(<span class="string">"createdAt"</span>::DATE, <span class="string">'$&#123;'</span>YYYY-MM-DD<span class="string">'&#125;'</span>)`), <span class="string">'day'</span> ], [ sequelize.fn(<span class="string">'SUM'</span>, sequelize.col(<span class="string">'money'</span>)), <span class="string">'total'</span> ]],</span><br><span class="line">        <span class="string">'where'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'group'</span>: [ sequelize.col(<span class="string">'day'</span>) ],</span><br><span class="line">        <span class="string">'order'</span>: [[ sequelize.col(<span class="string">'day'</span>), <span class="string">'DESC'</span> ]],</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(<span class="string">'list===========&gt;'</span>, list);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="postgre-按照周分组统计"><a href="#postgre-按照周分组统计" class="headerlink" title="postgre 按照周分组统计"></a>postgre 按照周分组统计</h2><blockquote><p><code>SELECT to_char(&quot;createdAt&quot;::DATE-(extract(dow from &quot;createdAt&quot;::TIMESTAMP)-1||&#39;day&#39;)::interval, &#39;YYYY-MM-DD&#39;) AS &quot;week&quot;, SUM(&quot;money&quot;) AS &quot;total&quot; FROM &quot;reward_logs&quot; AS &quot;reward_log&quot; GROUP BY &quot;week&quot; ORDER BY &quot;week&quot; DESC</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> list = await model.findAll(&#123;</span><br><span class="line">        <span class="string">'attributes'</span>: [[ sequelize.literal(`to_char(<span class="string">"createdAt"</span>::DATE-(extract(dow from <span class="string">"createdAt"</span>::TIMESTAMP)-1||<span class="string">'day'</span>)::interval, <span class="string">'$&#123;'</span>YYYY-MM-DD<span class="string">'&#125;'</span>)`), <span class="string">'week'</span> ], [ sequelize.fn(<span class="string">'SUM'</span>, sequelize.col(<span class="string">'money'</span>)), <span class="string">'total'</span> ]],</span><br><span class="line">        <span class="string">'where'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'group'</span>: [ sequelize.col(<span class="string">'week'</span>) ],</span><br><span class="line">        <span class="string">'order'</span>: [[ sequelize.col(<span class="string">'week'</span>), <span class="string">'DESC'</span> ]],</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(<span class="string">'list===========&gt;'</span>, list);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="postgre-按照小时分组统计"><a href="#postgre-按照小时分组统计" class="headerlink" title="postgre 按照小时分组统计"></a>postgre 按照小时分组统计</h2><blockquote><p>SELECT to_char(“createdAt”::DATE, ‘YYYY-MM-DD HH24’) AS “hour”, SUM(“money”) AS “total” FROM “reward_logs” AS “reward_log” GROUP BY “hour” ORDER BY “hour” DESC</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> list = await model.findAll(&#123;</span><br><span class="line">        <span class="string">'attributes'</span>: [[ sequelize.literal(`to_char(<span class="string">"createdAt"</span>::DATE, <span class="string">'$&#123;'</span>YYYY-MM-DD HH24<span class="string">'&#125;'</span>)`), <span class="string">'hour'</span> ], [ sequelize.fn(<span class="string">'SUM'</span>, sequelize.col(<span class="string">'money'</span>)), <span class="string">'total'</span> ]],</span><br><span class="line">        <span class="string">'where'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'group'</span>: [ sequelize.col(<span class="string">'hour'</span>) ],</span><br><span class="line">        <span class="string">'order'</span>: [[ sequelize.col(<span class="string">'hour'</span>), <span class="string">'DESC'</span> ]],</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(<span class="string">'list===========&gt;'</span>, list);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="postgre-按照分钟分组统计"><a href="#postgre-按照分钟分组统计" class="headerlink" title="postgre 按照分钟分组统计"></a>postgre 按照分钟分组统计</h2><blockquote><p>SELECT to_char(“createdAt”::DATE, ‘YYYY-MM-DD HH24:MI’) AS “minute”, SUM(“money”) AS “total” FROM “reward_logs” AS “reward_log” GROUP BY “minute” ORDER BY “minute” DESC;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> list = await model.findAll(&#123;</span><br><span class="line">        <span class="string">'attributes'</span>: [[ sequelize.literal(`to_char(<span class="string">"createdAt"</span>::DATE, <span class="string">'$&#123;'</span>YYYY-MM-DD HH24:MI<span class="string">'&#125;'</span>)`), <span class="string">'minute'</span> ], [ sequelize.fn(<span class="string">'SUM'</span>, sequelize.col(<span class="string">'money'</span>)), <span class="string">'total'</span> ]],</span><br><span class="line">        <span class="string">'where'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'group'</span>: [ sequelize.col(<span class="string">'minute'</span>) ],</span><br><span class="line">        <span class="string">'order'</span>: [[ sequelize.col(<span class="string">'minute'</span>), <span class="string">'DESC'</span> ]],</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(<span class="string">'list===========&gt;'</span>, list);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="postgre-按照秒分组统计"><a href="#postgre-按照秒分组统计" class="headerlink" title="postgre 按照秒分组统计"></a>postgre 按照秒分组统计</h2><blockquote><p>SELECT to_char(“createdAt”::DATE, ‘YYYY-MM-DD HH24:MI:SS’) AS “second”, SUM(“money”) AS “total” FROM “reward_logs” AS “reward_log” GROUP BY “second” ORDER BY “second” DESC;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> list = await model.findAll(&#123;</span><br><span class="line">        <span class="string">'attributes'</span>: [[ sequelize.literal(`to_char(<span class="string">"createdAt"</span>::DATE, <span class="string">'$&#123;'</span>YYYY-MM-DD HH24:MI:SS<span class="string">'&#125;'</span>)`), <span class="string">'second'</span> ], [ sequelize.fn(<span class="string">'SUM'</span>, sequelize.col(<span class="string">'money'</span>)), <span class="string">'total'</span> ]],</span><br><span class="line">        <span class="string">'where'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'group'</span>: [ sequelize.col(<span class="string">'second'</span>) ],</span><br><span class="line">        <span class="string">'order'</span>: [[ sequelize.col(<span class="string">'second'</span>), <span class="string">'DESC'</span> ]],</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(<span class="string">'list===========&gt;'</span>, list);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="去重统计"><a href="#去重统计" class="headerlink" title="去重统计"></a>去重统计</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ sequelize.fn(<span class="string">'COUNT'</span>, sequelize.literal(<span class="string">'distinct teacher_id'</span>)), <span class="string">'count'</span> ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> sequelize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios因为跨域导致或者headers信息不全</title>
      <link href="axios%E5%9B%A0%E4%B8%BA%E8%B7%A8%E5%9F%9F%E5%AF%BC%E8%87%B4%E6%88%96%E8%80%85headers%E4%BF%A1%E6%81%AF%E4%B8%8D%E5%85%A8/"/>
      <url>axios%E5%9B%A0%E4%B8%BA%E8%B7%A8%E5%9F%9F%E5%AF%BC%E8%87%B4%E6%88%96%E8%80%85headers%E4%BF%A1%E6%81%AF%E4%B8%8D%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>nodejs+koa2</p><p>CORS跨域时axios无法获取服务器自定义的header信息</p><p>用axios发送请求获取reponse header中的数据，需要提前在后台添加设置过滤器头部配置、自定义头部属性、并打开过滤器。<br>然后就是前端发送请求，然后获取reponse headers里面的自定义属性。</p><p>原来在默认的请求上， 浏览器只能访问以下默认的 响应头：（如下例）</p><p>Cache-Control<br>Content-Language<br>Content-Type<br>Expires<br>Last-Modified<br>Pragma</p><p>而且使用捕获响应头的方法时，浏览器默认respose.headers 拿到的只有两个headers信息（如下列）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Object &#123;</span><br><span class="line">    cache-control:<span class="string">"private, must-revalidate"</span>,  // 默认无配置不显示</span><br><span class="line">    content-type:<span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想让浏览器能访问到其他的 响应头的话：需要在服务器上设置 Access-Control-Expose-Headers</p><p>服务器安装koa2-cors</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yarn add koa2-cors</span><br><span class="line"></span><br><span class="line">const cors = require(<span class="string">'koa2-cors'</span>);</span><br><span class="line">// 解决跨域问题</span><br><span class="line">App.use(cors(&#123;</span><br><span class="line">    <span class="string">'credentials'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'exposeHeaders'</span>: [ <span class="string">'*'</span> ], //Access-Control-Expose-Headers *:代表所有 也可以一个一个配置 [<span class="string">'token'</span>, <span class="string">'status'</span>]</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> axios </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs使用crypto加密</title>
      <link href="nodejs%E4%BD%BF%E7%94%A8crypto%E5%8A%A0%E5%AF%86/"/>
      <url>nodejs%E4%BD%BF%E7%94%A8crypto%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="sha1加密"><a href="#sha1加密" class="headerlink" title="sha1加密"></a>sha1加密</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const shasum = crypto.createHash(<span class="string">'sha1'</span>);</span><br><span class="line">        shasum.update(<span class="string">'要加密的参数'</span>);</span><br><span class="line">        str.signature = shasum.digest(<span class="string">'hex'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给已经存在的项目添加git</title>
      <link href="%E7%BB%99%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0git/"/>
      <url>%E7%BB%99%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0git/</url>
      
        <content type="html"><![CDATA[<p>前提：先去gitlab或github网站上创建一个新项目 获取到git路径</p><p>1、打开终端​，cd到已存在项目的目录</p><p>​​​2、输入以下命令行，初始化一个本地仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​git init</span><br></pre></td></tr></table></figure><p>3、把工程所有文件都添加到该仓库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​git add .</span><br></pre></td></tr></table></figure><p>4、把文件提交到本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">'备注'</span></span><br></pre></td></tr></table></figure><p>5、添加远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：git remote add origin + 你的仓库地址</span><br><span class="line"></span><br><span class="line"> 例如：git remote add origin https://*/*.git</span><br><span class="line"></span><br><span class="line"> 如果出现fatal: remote origin already exists.​说明你已经添加过远程仓库了，输入以下命令删除远程仓库：git remote rm origin，然后再次执行第5步。</span><br></pre></td></tr></table></figure><p>6、把文件提交到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master​</span><br></pre></td></tr></table></figure><p>7、假如第6部失败的话再执行git pull –rebase origin master命令，然后再执行git push -u origin master即可上传成功。</p><p>8、完事后假如还是不能拉代码的话再重启项目执行git branch –set-upstream master origin/master即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx中root与alias的用法及区别</title>
      <link href="Nginx%E4%B8%ADroot%E4%B8%8Ealias%E7%9A%84%E7%94%A8%E6%B3%95%E5%8F%8A%E5%8C%BA%E5%88%AB/"/>
      <url>Nginx%E4%B8%ADroot%E4%B8%8Ealias%E7%9A%84%E7%94%A8%E6%B3%95%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Nginx中root与alias都是定义location {}块中虚拟目录访问的文件位置</p><p>用法区别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location /img/ &#123;</span><br><span class="line">    <span class="built_in">alias</span> /var/www/image/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#若按照上述配置的话，当客户端请求访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件</span></span><br><span class="line"></span><br><span class="line">location /img/ &#123;</span><br><span class="line">    root /var/www/image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件.</span></span><br></pre></td></tr></table></figure><p>alias是一个目录别名的定义，root则是最上层目录的定义。</p><p>还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的.而root则可有可无</p><p>一般情况下，在location / 中配置root，在location /other中配置alias是一个好习惯</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7-nginx配置,阻止dos攻击、禁止代理访问</title>
      <link href="CentOS7-nginx%E9%85%8D%E7%BD%AE-%E9%98%BB%E6%AD%A2dos%E6%94%BB%E5%87%BB%E3%80%81%E7%A6%81%E6%AD%A2%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE/"/>
      <url>CentOS7-nginx%E9%85%8D%E7%BD%AE-%E9%98%BB%E6%AD%A2dos%E6%94%BB%E5%87%BB%E3%80%81%E7%A6%81%E6%AD%A2%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>如何设置能限制某个IP某一时间段的访问次数是一个让人头疼的问题，特别面对恶意的ddos攻击的时候。其中CC攻击（Challenge Collapsar）是DDOS（分布式拒绝服务）的一种，也是一种常见的网站攻击方法，攻击者通过代理服务器或者肉鸡向向受害主机不停地发大量数据包，造成对方服务器资源耗尽，一直到宕机崩溃。<br>cc攻击一般就是使用有限的ip数对服务器频繁发送数据来达到攻击的目的，nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击。</p><p>HttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。一旦并发连接超过指定数量，就会返回503错误。</p><p>HttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令</p><p>这两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制</p><h2 id="HttpLimitReqModul-限制某一段时间内同一ip访问数实例"><a href="#HttpLimitReqModul-限制某一段时间内同一ip访问数实例" class="headerlink" title="HttpLimitReqModul 限制某一段时间内同一ip访问数实例"></a>HttpLimitReqModul 限制某一段时间内同一ip访问数实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，</span></span><br><span class="line">    <span class="comment">#以$binary_remote_addr 为key,限制平均每秒的请求为20个，</span></span><br><span class="line">    <span class="comment">#1M能存储16000个状态，rete的值必须为整数，</span></span><br><span class="line">    <span class="comment">#如果限制两秒钟一个请求，可以设置成30r/m</span></span><br><span class="line"></span><br><span class="line">    limit_req_zone <span class="variable">$binary_remote_addr</span> zone=allips:10m rate=20r/s;</span><br><span class="line">    ...</span><br><span class="line">    server&#123;</span><br><span class="line">        ...</span><br><span class="line">        location &#123;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            <span class="comment">#限制每ip每秒不超过20个请求，漏桶数burst为5</span></span><br><span class="line">            <span class="comment">#brust的意思就是，如果第1秒、2,3,4秒请求为19个，</span></span><br><span class="line">            <span class="comment">#第5秒的请求为25个是被允许的。</span></span><br><span class="line">            <span class="comment">#但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。</span></span><br><span class="line">            <span class="comment">#nodelay，如果不设置该选项，严格使用平均速率限制请求数，</span></span><br><span class="line">            <span class="comment">#第1秒25个请求时，5个请求放到第2秒执行，</span></span><br><span class="line">            <span class="comment">#设置nodelay，25个请求将在第1秒执行。</span></span><br><span class="line"></span><br><span class="line">            limit_req zone=allips burst=5 nodelay;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阻止用户使用代理"><a href="#阻止用户使用代理" class="headerlink" title="阻止用户使用代理"></a>阻止用户使用代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这三句if是禁止使用代理ip来访问，或禁止使用压力测试软件进行dos攻击（放在nginx.conf的server里面）</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* ApacheBench|WebBench|java/)&#123;</span><br><span class="line">                <span class="built_in">return</span> 403;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$http_user_agent</span> ~* (Wget|ab) ) &#123;</span><br><span class="line">   <span class="built_in">return</span> 403;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$http_user_agent</span> ~* LWP::Simple|BBBike|wget) &#123;</span><br><span class="line">            <span class="built_in">return</span> 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx配置和排查指引"><a href="#nginx配置和排查指引" class="headerlink" title="nginx配置和排查指引"></a>nginx配置和排查指引</h2><p>当出现直接超时、处理返回慢时的报警时，nigix侧的故障排查参考方法有如下： 1、检查请求日志情况， tail -f logs/access.log ，看upstream_status字段。</p><p>200：表示正常； 502/503/504：表示处理慢，或者后端down机；再看upstream_response_time返回的时间是否真的较慢，有没有上百毫秒，或更高的，有则说明是后端服务有问题。 404：表示请求的路径不存在或不对，文件不在了。需要检查你的url路径是否正确； 服务器上的文件、程序是否存在。 403：表示无权限访问。 检查一下nginx.conf 是否有特殊的访问配置。 499: 则是客户端的问题 此错误少见。</p><p>2、检查错误日志情况，tail -f logs/error_log ，查看是否有connect() failed、Connection refused、 Connection reset by peer等error错误日志，有则说明有可能nginx出现的连接数超负载等情况。</p><p>（1）查看系统的网络连接数情况确认是否有较大的链接数 # netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’ 解析： CLOSED //无连接是活动的或正在进行 LISTEN //服务器在等待进入呼叫 SYN_RECV //一个连接请求已经到达，等待确认 SYN_SENT //应用已经开始，打开一个连接 ESTABLISHED //正常数据传输状态/当前并发连接数 FIN_WAIT1 //应用说它已经完成 FIN_WAIT2 //另一边已同意释放 ITMED_WAIT //等待所有分组死掉 CLOSING //两边同时尝试关闭 TIME_WAIT //另一边已初始化一个释放 LAST_ACK //等待所有分组死掉<br>（2）查看系统的句柄配置情况，ulimit -n ，确认是否过小（小于请求数） （3）worker_rlimit_nofile、worker_connections配置项，是否过小（小于请求数）</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置限制IP访问</title>
      <link href="Nginx%E9%85%8D%E7%BD%AE%E9%99%90%E5%88%B6IP%E8%AE%BF%E9%97%AE/"/>
      <url>Nginx%E9%85%8D%E7%BD%AE%E9%99%90%E5%88%B6IP%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx配置限制IP访问"><a href="#Nginx配置限制IP访问" class="headerlink" title="Nginx配置限制IP访问"></a>Nginx配置限制IP访问</h2><p>有时候我们需要针对屏蔽某些恶意的IP访问我们的网站，或者限制仅仅某些白名单IP才能访问我们的网站。这时候我们就可以在nginx中通过简单的配置来达到目的。</p><h2 id="相关配置语句"><a href="#相关配置语句" class="headerlink" title="相关配置语句"></a>相关配置语句</h2><ol><li>屏蔽单个ip访问</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式： deny ip;</span></span><br><span class="line">deny 123.68.23.5;</span><br></pre></td></tr></table></figure><ol start="2"><li>允许单个ip访问</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式： allow ip;</span></span><br><span class="line">allow 123.68.25.6;</span><br></pre></td></tr></table></figure><ol start="3"><li>屏蔽所有ip访问<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deny all;</span><br></pre></td></tr></table></figure></li><li>允许所有ip访问</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow all;</span><br></pre></td></tr></table></figure><ol start="5"><li>屏蔽ip段访问</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># deny ip/mask</span></span><br><span class="line"><span class="comment"># 屏蔽172.12.62.0到172.45.62.255访问的命令 </span></span><br><span class="line">deny 172.12.62.0/24;</span><br></pre></td></tr></table></figure><ol start="6"><li>允许ip段访问</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># allow ip/mask</span></span><br><span class="line"><span class="comment"># 屏蔽172.102.0.0到172.102.255.255访问的命令 </span></span><br><span class="line">allow 172.102.0.0/16;</span><br></pre></td></tr></table></figure><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><ol><li>可新建一个配置文件，如blockip.conf。在其中编写相关的ip限制语句，然后在nginx.conf中加入如下配置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置ip限制策略</span></span><br><span class="line">include blockip.conf;</span><br></pre></td></tr></table></figure><ol start="2"><li>nginx会根据配置文件中的语句，从上至下依次判断。因此，写在前面的语句可能会屏蔽后续的语句。<br>除部分ip白名单外，屏蔽所有ip<h1 id="允许部分ip访问"><a href="#允许部分ip访问" class="headerlink" title="允许部分ip访问"></a>允许部分ip访问</h1></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">allow 123.45.25.6;</span><br><span class="line">allow 123.68.52.125;</span><br><span class="line">allow 123.125.25.106;</span><br><span class="line"> <span class="comment"># 禁止其余ip访问</span></span><br><span class="line">deny all;</span><br></pre></td></tr></table></figure><ol start="3"><li>屏蔽策略文件可以放在http, server, location, limit_except语句块中，我们可以根据需要合理的配置。</li></ol><table><thead><tr><th>放置位置</th><th>效果</th></tr></thead><tbody><tr><td>http</td><td>nginx中所有服务起效</td></tr><tr><td>server</td><td>指定的服务起效</td></tr><tr><td>location</td><td>满足的location下起效</td></tr><tr><td>limit_except</td><td>指定的http方法谓词起效</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>journal介绍</title>
      <link href="journal%E4%BB%8B%E7%BB%8D/"/>
      <url>journal%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="journal介绍"><a href="#journal介绍" class="headerlink" title="journal介绍"></a>journal介绍</h2><ol><li>journal什么呢？<br>journal是centos7中systemd的一个组件，由journald处理。捕获系统日志信息、内核日志信息，以及来自原始RAM磁盘的信息，早期启动信息以及所有服务中写入STDOUT和STDERR数据流的信息。可以说是为Linux服务器打造的一种新系统日志方式，这些日志信息写入到二进制文件，使用journalctl阅读，默认存放在/run/log/下。<a id="more"></a></li><li>这跟之前rsyslog有啥区别或又有啥关系呢？<br>systemd-journald.service：最主要的讯息收受者，由 systemd 提供的；<br>rsyslog.service：主要登录系统与网络等服务的讯息；<br>CentOS 7 除了保有既有的 rsyslog.service 之外，其实最上游还使用了 systemd 自己的登录文件日志管理功能喔！他使用的是 systemd-journald.service 这个服务来支持的。基本上，系统由 systemd 所管理，那所有经由 systemd 启动的服务，如果再启动或结束的过程中发生一些问题或者是正常的讯息， 就会将该讯息由 systemd-journald.service 以二进制的方式记录下来，之后再将这个讯息发送给 rsyslog.service 作进一步的记载。<br>systemd-journald.service 的记录主要都放置于内存中，因此在存取方面性能比较好。我们也能够通过 journalctl 以及 systemctl status unit.service 来查看各个不同服务的登录文件！ 这有个好处，就是日志文件可以随着个别服务让你查阅，在单一服务的处理上面，要比跑到 /var/log/messages 去大海捞针来的简易很多！<h2 id="journalctl使用"><a href="#journalctl使用" class="headerlink" title="journalctl使用"></a>journalctl使用</h2>上面了解概念之后，记录下如何使用journalctl。日志记录在/var/log/journal (或者/run/log/journal/)，如下<br><img src="https://img-blog.csdnimg.cn/20201009094346732.png#pic_center" alt="在这里插入图片描述"></li><li>常用命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">journalctl               <span class="comment">#查看所有日志</span></span><br><span class="line">journalctl -n 5          <span class="comment">#查看最后5条日志</span></span><br><span class="line">journalctl -p err        <span class="comment">#查看err类型的日志</span></span><br><span class="line">journalctl -f            <span class="comment">#不断输出最后10条日志</span></span><br><span class="line">journalctl --since today <span class="comment">#查看今天的日志</span></span><br><span class="line">journalctl --since <span class="string">"2020-05-12 08:00:00"</span> --until <span class="string">"2020-05-12 09:00:00"</span></span><br><span class="line">journalctl -o verbose    <span class="comment">#查看日志详细信息</span></span><br><span class="line">journalctl --disk-usage  <span class="comment">#检查当前journal使用磁盘量</span></span><br><span class="line">journalctl --vacuum-time=2d <span class="comment">#只保存2天的日志</span></span><br><span class="line">journalctl --vacuum-size=500M <span class="comment">#最大500M</span></span><br><span class="line">journalctl --verify      <span class="comment">#检查journal是否运行正常以及日志文件是否完整无损坏</span></span><br></pre></td></tr></table></figure></li><li>持久保存日志</li></ol><p>由于journald默认是保存在内存中，一旦服务器重启，就会丢失，作为生成环境，管理员必须保证系统任何日志不能丢失，通过修改配置文件做持久保存。<br>同时，systemd-journald.service 的配置文件主要参考 /etc/systemd/journald.conf 的内容，详细的参数可以参考 man 5 journald.conf 的数据,下面介绍下storage参数.<br>“<code>volatile</code>“ 表示仅保存在内存中， 也就是仅保存在<code>/run/log/journal</code>目录中(将会被自动按需创建)。 “<code>persistent</code>“ 表示优先保存在磁盘上， 也就优先保存在<code>/var/log/journal</code>目录中(将会被自动按需创建)， 但若失败(例如在系统启动早期”/var”尚未挂载)， 则转而保存在<code>/run/log/journal</code>目录中(将会被自动按需创建)。 “<code>auto</code>“(默认值) 与 “<code>persistent</code>“ 类似， 但不自动创建<code>/var/log/journal</code>目录， 因此可以根据该目录的存在与否决定日志的保存位置。 “<code>none</code>“ 表示不保存任何日志(直接丢弃所有收集到的日志)， 但日志转发不受影响。 默认值是 “<code>auto</code>“</p><p><img src="https://img-blog.csdnimg.cn/20201009095018198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iview打包icon不显示</title>
      <link href="iview%E6%89%93%E5%8C%85icon%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
      <url>iview%E6%89%93%E5%8C%85icon%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>设置 extract: false</p><p><img src="https://img-blog.csdnimg.cn/20200929162804708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> iview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mps给上传到oss的视频截取关键帧</title>
      <link href="mps%E7%BB%99%E4%B8%8A%E4%BC%A0%E5%88%B0oss%E7%9A%84%E8%A7%86%E9%A2%91%E6%88%AA%E5%8F%96%E5%85%B3%E9%94%AE%E5%B8%A7/"/>
      <url>mps%E7%BB%99%E4%B8%8A%E4%BC%A0%E5%88%B0oss%E7%9A%84%E8%A7%86%E9%A2%91%E6%88%AA%E5%8F%96%E5%85%B3%E9%94%AE%E5%B8%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://help.aliyun.com/document_detail/29207.html?spm=a2c4g.11186623.6.543.55b25529tkkA0j" target="_blank" rel="external nofollow noopener noreferrer">mps介绍文档</a></p><ol><li><p>先创建好两个bucket ,配置好跨域等</p></li><li><p>把两个bucket加入到媒体bucket(<a href="https://mps.console.aliyun.com/bucket" target="_blank" rel="external nofollow noopener noreferrer">https://mps.console.aliyun.com/bucket</a>)<br>一个输入 一个输出<br><img src="https://img-blog.csdnimg.cn/20200929174010447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>添加工作流（<a href="https://mps.console.aliyun.com/workflow/list）" target="_blank" rel="external nofollow noopener noreferrer">https://mps.console.aliyun.com/workflow/list）</a><br><img src="https://img-blog.csdnimg.cn/20200929174216834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>配置工作流<br><img src="https://img-blog.csdnimg.cn/2020092917443418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<br><img src="https://img-blog.csdnimg.cn/20200929174500470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>转码<br><img src="https://img-blog.csdnimg.cn/20200929174551756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200929174701726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ol><p>截图<br><img src="https://img-blog.csdnimg.cn/20200929174627847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输出<br><img src="https://img-blog.csdnimg.cn/2020092917471764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>保存就好了</p><ol start="5"><li>使用 通过输入的bucket 上传视频，视频和截屏处理好后会自动同步的输出的bucket中<br>在输入bucket只会有一个视频<br><img src="https://img-blog.csdnimg.cn/20200929175100146.png#pic_center" alt="在这里插入图片描述"><br>在输出的bucket会有一个视频和一个图片（路径相同）<br><img src="https://img-blog.csdnimg.cn/20200929175151244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSS配置跨域访问</title>
      <link href="OSS%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE/"/>
      <url>OSS%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>如果没有配置，网页控制台会报（如果出现以下错误):<br>Access to XMLHttpRequest at ‘<a href="https://xxx.oss-cn-hangzhou.aliyuncs.com/" target="_blank" rel="external nofollow noopener noreferrer">https://xxx.oss-cn-hangzhou.aliyuncs.com/</a> ’ from origin ‘null’ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p><p>1.进入bucket 管理后台 （<a href="https://oss.console.aliyun.com/bucket）" target="_blank" rel="external nofollow noopener noreferrer">https://oss.console.aliyun.com/bucket）</a><br>2. 点击需要配置的bucket<br><img src="https://img-blog.csdnimg.cn/20200929162018457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200929162149945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>保存就可以上传图片了</p><p>如果在自己后台中访问图片出现403 可以在html中加入</p><meta name="referrer" content="no-referrer">这是oss配置了防盗链 所以不要带上referrer<p>注意：<br>oss 需要配置域名，不然访问是下载<br>配置一个域名（必须备案）</p><ol><li><p>在域名解析中通过CANME 映射到oss分配的外网bucket地址</p></li><li><p>进入oss管理后台 点击你要配置的bucket<br><img src="https://img-blog.csdnimg.cn/20200929175702675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>如果需要https 访问 就需要上传证书（申请一个免费证书即可）<br><img src="https://img-blog.csdnimg.cn/20200929175820876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序插件</title>
      <link href="%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8F%92%E4%BB%B6/"/>
      <url>%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="直播"><a href="#直播" class="headerlink" title="直播"></a>直播</h2><p>在设置-&gt;第三方设置-&gt;插件管理中添加插件 通过(    wx2b03c6e691cd7370)搜索添加</p><h2 id="腾讯视频（由于小程序视频不支持外部视频，需要证书）"><a href="#腾讯视频（由于小程序视频不支持外部视频，需要证书）" class="headerlink" title="腾讯视频（由于小程序视频不支持外部视频，需要证书）"></a>腾讯视频（由于小程序视频不支持外部视频，需要证书）</h2><p>在设置-&gt;第三方设置-&gt;插件管理中添加插件 通过(wxa75efa648b60994b)搜索添加</p><h2 id="ocr"><a href="#ocr" class="headerlink" title="ocr"></a>ocr</h2><p>在设置-&gt;第三方设置-&gt;插件管理中添加插件 通过(wx4418e3e031e551be)搜索添加<br><a href="https://developers.weixin.qq.com/community/servicemarket/detail/000ce4cec24ca026d37900ed551415" target="_blank" rel="external nofollow noopener noreferrer">需要购买</a></p><p>在服务端使用ocr(下面是通过img方式是把，使用img_url就不用img)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const superagent = require(<span class="string">'superagent'</span>);</span><br><span class="line">const fs = require(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    // https://api.weixin.qq.com/cv/ocr/idcard?<span class="built_in">type</span>=MODE&amp;img_url=ENCODE_URL&amp;access_token=ACCESS_TOCKEN</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> appid = <span class="string">''</span>, // 小程序appid</span><br><span class="line">        appsecret = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> accessTokenInfo = await superagent.get(`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>`);</span><br><span class="line">    <span class="built_in">let</span> &#123; access_token = <span class="string">''</span>, errcode, errmsg &#125; = accessTokenInfo.body || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    console.log(<span class="string">'access_token========&gt;'</span>, access_token);</span><br><span class="line">    // 上传素材</span><br><span class="line">    <span class="built_in">let</span> uploadUrl = `https://api.weixin.qq.com/cv/ocr/idcard?<span class="built_in">type</span>=MODE&amp;access_token=<span class="variable">$&#123;access_token&#125;</span>`;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> result = await superagent.post(uploadUrl).attach(<span class="string">'img'</span>, fs.createReadStream(<span class="string">'./anq52fdebqianq52fdebqi.jpg'</span>));</span><br><span class="line"></span><br><span class="line">    console.log(<span class="string">'result======&gt;'</span>, result.body);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200917134243964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序、公众号文章、H5跳转路径简述</title>
      <link href="%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%81%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E3%80%81H5%E8%B7%B3%E8%BD%AC%E8%B7%AF%E5%BE%84%E7%AE%80%E8%BF%B0/"/>
      <url>%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%81%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E3%80%81H5%E8%B7%B3%E8%BD%AC%E8%B7%AF%E5%BE%84%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>小程序 -&gt; 公众号文章/H5 页面</strong><br>通过web-view组件打开公众号(绑定的)文章,可点赞评论<br>通过web-view打开的H5页面功能受限，若有网页授权，与微信内置浏览器表现一致<br><strong>公众号文章 -&gt; 小程序</strong><br>通过文章内嵌小程序卡片和文字链接直接打开绑定的小程序,可以带参数</p><p><strong>H5页面 -&gt; 小程序</strong><br>普通 H5 页面无法跳转到小程序，web-view 中的 H5 页面可以回到“外层”小程序</p><p><strong>小程序 -&gt; APP</strong><br>特定场景(APP 分享消息卡片/APP 打开小程序)下，微信允许小程序跳转 APP ，需要用户主动触发</p><p><strong>公众号文章 -&gt; H5页面</strong><br>认证服务号可添加外链<br>非认证的通过阅读原文，自定义菜单，模板消息，被动回复等实现<br><strong>H5 页面 -&gt; APP</strong><br>在支持的浏览器中通过 url schema 打开<br>微信内支持应用宝链接跳转打开<br><strong>APP -&gt; H5页面</strong><br>通过 web-view 打开 H5页面，原则上没有功能限制，支付可以跳转到微信或支付宝等</p><p><strong>小程序 -&gt; 小程序</strong><br>绑定到了相同公众号(存在绑定关系的小程序)可以互相跳转<br>每个公众号可以绑定相同主体的 10 个小程序，不同主体的 3 个小程序；每个小程序可以被 500 个公众号绑定</p><p>微信公众号h5 打开小程序环境判断<br>先要引入对应微信的js包<code>https://res.wx.qq.com/open/js/jweixin-1.6.0.js</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 网页环境判断</span><br><span class="line">      <span class="built_in">let</span> env = <span class="string">'wechat'</span>;</span><br><span class="line">      const ua = window.navigator.userAgent.toLowerCase();</span><br><span class="line">      <span class="keyword">if</span> (ua.match(/MicroMessenger/i) == <span class="string">'micromessenger'</span>) &#123;</span><br><span class="line">        //判断是否是微信环境</span><br><span class="line">        //微信环境</span><br><span class="line">        wx.miniProgram.getEnv(<span class="keyword">function</span>(res) &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.miniprogram) &#123;</span><br><span class="line">            // 小程序环境下逻辑</span><br><span class="line">            console.log(<span class="string">'小程序环境下=========&gt;'</span>, <span class="string">'小程序环境下'</span>);</span><br><span class="line">            env = <span class="string">'wxapp'</span>;</span><br><span class="line"></span><br><span class="line">            // 进入小程序页面(https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html)</span><br><span class="line">            // wx.miniProgram.navigateTo(&#123;url: <span class="string">'/path/to/page'</span>&#125;)</span><br><span class="line">            // wx.miniProgram.postMessage(&#123; data: <span class="string">'foo'</span> &#125;)</span><br><span class="line">            // wx.miniProgram.postMessage(&#123; data: &#123;foo: <span class="string">'bar'</span>&#125; &#125;)</span><br><span class="line">            // wx.miniProgram.getEnv(<span class="keyword">function</span>(res) &#123; console.log(res.miniprogram) &#125;)</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            //非小程序环境下逻辑</span><br><span class="line">            console.log(<span class="string">'非小程序环境下=========&gt;'</span>, <span class="string">'非小程序环境下'</span>);</span><br><span class="line">            env = <span class="string">'wechat'</span>; // 微信环境内（微信公众号）</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //非微信环境逻辑</span><br><span class="line">        console.log(<span class="string">'非微信环境逻辑=========&gt;'</span>, <span class="string">'非微信环境逻辑'</span>);</span><br><span class="line">        env = <span class="string">'nowechat'</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑连接佳能2520i打印机</title>
      <link href="%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E4%BD%B3%E8%83%BD2520i%E6%89%93%E5%8D%B0%E6%9C%BA/"/>
      <url>%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E4%BD%B3%E8%83%BD2520i%E6%89%93%E5%8D%B0%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="查看打印机IP"><a href="#查看打印机IP" class="headerlink" title="查看打印机IP"></a>查看打印机IP</h1><ol><li>给打印机插入网线</li><li>点击打印机附加功能-&gt;点击系统设置-&gt;输入账号密码（默认原始账号密码都是7654321 输入完成点击ID键（登录/取消））-&gt;网络设置-&gt;Tcp/IP协议设置-&gt;ipv4设置-&gt;查看IP<a id="more"></a><h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1></li><li>下载驱动： <code>https://www.canon.com.cn/supports/download/simsdetail/0101067101.html?modelId=809&amp;channel=4</code><ol start="2"><li>点赞下载好的mac-ps-v4174-04.dmg 会出现.pkg文件，一直点赞安装就好</li><li>搜索打印机和扫描仪 点击添加<br>配置如下：<br><img src="https://img-blog.csdnimg.cn/2020091415022514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol></li></ol><h1 id="windows10-8-7"><a href="#windows10-8-7" class="headerlink" title="windows10 8 7"></a>windows10 8 7</h1><ol><li>下载驱动: <code>https://www.canon.com.cn/supports/download/simsdetail/0100959001.html?modelId=809&amp;channel=1</code></li><li>点击UFRIILT_Driver_V3040_W64_00.exe 会生成UFRIILT_Driver_V3040_W64_00文件夹</li><li>点击UFRIILT_Driver_V3040_W64_00文件夹中的Setup.exe 进行驱动安装（一直点下一步就好，在同一个网络下就能搜索到打印机）</li><li>添加成功就可以打印测试了</li></ol><p><code>注意</code>：<br>添加佳能其他型号<br>访问：<a href="https://www.canon.com.cn/supports/service.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.canon.com.cn/supports/service.html</a><br><img src="https://img-blog.csdnimg.cn/20200914151155973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 打印机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习</title>
      <link href="%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="常用元字符"><a href="#常用元字符" class="headerlink" title="常用元字符"></a>常用元字符</h2><table><thead><tr><th>表达式</th><th>介绍</th></tr></thead><tbody><tr><td>/…/</td><td>代表一个模式的开始和结束</td></tr><tr><td>^</td><td>匹配字符串的开始，仅限在/…/中，在[]代表非</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr><tr><td>\s</td><td>匹配任意空白字符</td></tr><tr><td>\d</td><td>匹配任意数字，相当于[0-9]</td></tr><tr><td>\w</td><td>匹配一个数字 字符串 下划线的字符，相当于[A-Za-z0-9_]</td></tr><tr><td>.</td><td>除了换行符的任意字符</td></tr></tbody></table><a id="more"></a><h2 id="常用反义字符"><a href="#常用反义字符" class="headerlink" title="常用反义字符"></a>常用反义字符</h2><table><thead><tr><th>表达式</th><th>介绍</th></tr></thead><tbody><tr><td>\S</td><td>匹配任意不是空白字符</td></tr><tr><td>\D</td><td>匹配任意不是数字的字符，相当于[^0-9]</td></tr><tr><td>\W</td><td>匹配一个不是数字 字符串 下划线的字符，相当于[^a-za-z0-9_]</td></tr><tr><td>[^a]</td><td>匹配不是 a 的其他字符</td></tr></tbody></table><h2 id="常用限定符"><a href="#常用限定符" class="headerlink" title="常用限定符"></a>常用限定符</h2><table><thead><tr><th>表达式</th><th>介绍</th></tr></thead><tbody><tr><td>{n}</td><td>匹配前一项 n 次</td></tr><tr><td>{n，}</td><td>匹配前一项&gt;=n 次</td></tr><tr><td>{n，m}</td><td>m&gt;=匹配前一项&gt;=n 次</td></tr><tr><td>*</td><td>相当于{0,}</td></tr><tr><td>+</td><td>相当于{1,}</td></tr><tr><td>?</td><td>相当于{0,1}</td></tr></tbody></table><h2 id="懒惰限定符"><a href="#懒惰限定符" class="headerlink" title="懒惰限定符"></a>懒惰限定符</h2><table><thead><tr><th>表达式</th><th>介绍</th></tr></thead><tbody><tr><td>*？</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+？</td><td>重复 1 次或者更多次，但尽可能少重复</td></tr><tr><td>?？</td><td>重复 0 次或 1 次，但尽可能少重复</td></tr><tr><td>*？</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复 n 到 m 次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复 n 次以上，但尽可能少重复</td></tr></tbody></table><h2 id="常用分组语法"><a href="#常用分组语法" class="headerlink" title="常用分组语法"></a>常用分组语法</h2><table><thead><tr><th>表达式</th><th>介绍</th></tr></thead><tbody><tr><td>(exp)</td><td>匹配 exp，并捕获文本到自动命名的组里</td></tr><tr><td><code>(?&lt;name&gt;exp)</code></td><td>匹配 exp，并捕获文本到名称为 name 的组里，也可以写成（?’name’exp）</td></tr><tr><td>(?:exp)</td><td>匹配 exp，不捕获匹配的文本，也不给此分组分配组号</td></tr><tr><td>(?=exp)</td><td>匹配 exp 前面的位置</td></tr><tr><td>(?&lt;=exp)</td><td>匹配 exp 后面的位置</td></tr><tr><td>(?!exp)</td><td>匹配后面跟的不是 exp 的位置</td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是 exp 的位置</td></tr><tr><td>(?#comment)</td><td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//连续3个数字</span><br><span class="line">var pattern1 = /\d&#123;3&#125;/g;</span><br><span class="line">console.log(pattern1.test(<span class="string">'s23'</span>)); // <span class="literal">false</span></span><br><span class="line">console.log(pattern1.test(<span class="string">'s112s'</span>)); // <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">//连续2个相同的 数字</span><br><span class="line">var pattern1 = /(\d)\1/g;</span><br><span class="line">console.log(pattern1.test(<span class="string">'s23'</span>)); // <span class="literal">false</span></span><br><span class="line">console.log(pattern1.test(<span class="string">'s223s'</span>)); // <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">//连续3个相同的数字</span><br><span class="line">var pattern1 = /(\d)\1&#123;2&#125;/g;</span><br><span class="line">console.log(pattern1.test(<span class="string">'s23'</span>)); // <span class="literal">false</span></span><br><span class="line">console.log(pattern1.test(<span class="string">'s222s'</span>)); // <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">//连续3个或3个以上 相同的 字符</span><br><span class="line">var pattern1 = /(\w)\1&#123;2,&#125;/g;</span><br><span class="line">console.log(pattern1.test(<span class="string">'s23'</span>)); // <span class="literal">false</span></span><br><span class="line">console.log(pattern1.test(<span class="string">'saaaa2s'</span>)); // <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">//正整数</span><br><span class="line">[1-9]\d*</span><br><span class="line"></span><br><span class="line">//负整数</span><br><span class="line">-[1-9]\d*</span><br><span class="line"></span><br><span class="line">//整数</span><br><span class="line">(-?[1-9]\d*)|0</span><br><span class="line"></span><br><span class="line">//正浮点数</span><br><span class="line">\d+.\d+</span><br><span class="line"></span><br><span class="line">//负浮点数</span><br><span class="line">-\d+.\d+</span><br><span class="line"></span><br><span class="line">//浮点数</span><br><span class="line">-?\d+.\d+</span><br><span class="line"></span><br><span class="line">//中文字符</span><br><span class="line">[\u4e00-\u9fa5]</span><br><span class="line"></span><br><span class="line">//双字节中文字符</span><br><span class="line">[^\x00-\xff]</span><br><span class="line"></span><br><span class="line">//空格</span><br><span class="line">\s</span><br><span class="line"></span><br><span class="line">//换行</span><br><span class="line">\n</span><br></pre></td></tr></table></figure><h3 id="和-的使用"><a href="#和-的使用" class="headerlink" title="^ 和 $ 的使用"></a>^ 和 $ 的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//假如我把 正浮点数 的正则写成这样 ：(0.\d+)|(\d+.\d+) ，现在开始匹配</span><br><span class="line"></span><br><span class="line">//匹配一个字符串中的 正浮点数</span><br><span class="line">var pattern = /(0.\d+)|(\d+.\d+)/;</span><br><span class="line">console.log(pattern.test(<span class="string">'0'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern.test(<span class="string">'0.5'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.5'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.5s'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.a5s'</span>));  // <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">//匹配以 `正浮点数` 开头或结尾 的字符串</span><br><span class="line">var pattern = /^(0.\d+)|(\d+.\d+)$/;</span><br><span class="line">console.log(pattern.test(<span class="string">'0.5'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.5'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.5s'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.a5s'</span>));  // <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">//只匹配 正浮点数</span><br><span class="line">var pattern = /^(0.\d+)$|^(\d+.\d+)$/;</span><br><span class="line">//或      /^((0.\d+)|(\d+.\d+))$/</span><br><span class="line">console.log(pattern.test(<span class="string">'0.5'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.5'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.5s'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern.test(<span class="string">'a0.a5s'</span>));  // <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="格式日期"><a href="#格式日期" class="headerlink" title="格式日期"></a>格式日期</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//只匹配 日期格式：年-月-日</span><br><span class="line">var pattern7 = /^\d&#123;4&#125;-(1[0-2]|0?[1-9])-(0?[1-9]|[12]\d|3[01])$/;</span><br><span class="line">console.log(pattern7.test(<span class="string">'ad2016-08-20ad'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'2016-08-20'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'2016-8-20'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'16-08-20'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'2016/08/20'</span>));  // <span class="literal">false</span></span><br><span class="line">//若去掉^和$</span><br><span class="line">var pattern7 = /\d&#123;4&#125;-(1[0-2]|0?[1-9])-(0?[1-9]|[12]\d|3[01])/;</span><br><span class="line">console.log(pattern7.test(<span class="string">'ad2016-08-20ad'</span>));  // <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">//只匹配 日期格式：年-月-日 或 年.月.日 或 年/月/日</span><br><span class="line">var pattern7 = /^\d&#123;4&#125;(\/|\-|.)(0?[1-9]|1[0-2])\1(0?[1-9]|[12]\d|3[0-1])$/</span><br><span class="line">console.log(pattern7.test(<span class="string">'ad2016-08-20ad'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'2016-08-20'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'2016/08/20'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'2016.8.20'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'2016-08-9'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'2016/18/20'</span>));  // <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//只匹配  时间格式：小时:分钟, 24小时制</span><br><span class="line">var pattern8 = /^((0?|1)\d|2[0-3]):([0-5]\d)$/;</span><br><span class="line">console.log(pattern8.test(<span class="string">'13:45'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern8.test(<span class="string">'3:45'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern8.test(<span class="string">'13点45'</span>)); // <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="身份证号"><a href="#身份证号" class="headerlink" title="身份证号"></a>身份证号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//只匹配 中国大陆身份证号，15位或18位</span><br><span class="line">var pattern9 = /^\d&#123;15&#125;|\d&#123;17&#125;[\d|X]$/;</span><br><span class="line">//或   /^\d&#123;15&#125;(\d&#123;2&#125;[0-9X])?$/</span><br><span class="line">console.log(pattern9.test(<span class="string">'15020416803082111X'</span>));  //<span class="literal">true</span></span><br><span class="line">console.log(pattern9.test(<span class="string">'422322199901090033'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern9.test(<span class="string">'asdfasdfasfasdf123'</span>));  // <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="手机号-QQ-号-用户名"><a href="#手机号-QQ-号-用户名" class="headerlink" title="手机号 QQ 号 用户名"></a>手机号 QQ 号 用户名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//只匹配 用户名</span><br><span class="line">^[A-Za-z0-9_\/-\u4e00-\u9fa5]+$</span><br><span class="line"></span><br><span class="line">//只匹配 长度为8-10的用户密码（以字母开头、数字、下划线）</span><br><span class="line">^[A-z\_]\w&#123;7,9&#125;$</span><br><span class="line"></span><br><span class="line">//只匹配 QQ号</span><br><span class="line">^[1-9](\d&#123;5,11&#125;)$</span><br><span class="line"></span><br><span class="line">//只匹配 手机（国内）</span><br><span class="line">^0?(13|14|15|17|18|19)[0-9]&#123;9&#125;$</span><br></pre></td></tr></table></figure><p>注：<br>1、合并：<br><code>0?[0-9]|1[0-9]</code>可以合并为<code>(0?|1)[0-9]</code><br><code>\d{4}|\d{2}</code> 不能合并为<code>\d({2}|{4})</code>; //因为{N}代表次数<br>2、化简：<br><code>[0-9]</code> 化简写为 <code>\d</code><br><code>[A-Za-z0-9]</code>化简写为 <code>[A-z0-9]</code><br>3、. 是 <code>\w</code> 和<code>\s</code>效果的累加<br>如果要打印<code>. 、$、 /</code>等，都要加转义字符：<code>\.、\$、\/</code></p><h2 id="面试练习题"><a href="#面试练习题" class="headerlink" title="面试练习题"></a>面试练习题</h2><h3 id="匹配字符串中所有的-HTML（1）标签头部-或-尾部-（2）标签头部（3）完整标签"><a href="#匹配字符串中所有的-HTML（1）标签头部-或-尾部-（2）标签头部（3）完整标签" class="headerlink" title="匹配字符串中所有的 HTML（1）标签头部 或 尾部 （2）标签头部（3）完整标签"></a>匹配字符串中所有的 HTML（1）标签头部 或 尾部 （2）标签头部（3）完整标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'ada&lt;option value="hh"&gt;0&lt;/option&gt;54&lt;div id="as"&gt;adda&lt;/div&gt;ad'</span></span><br><span class="line">var result = str.match(/&lt;.*&gt;/g);</span><br><span class="line">console.log(result); //[<span class="string">"&lt;option value="</span>hh<span class="string">"&gt;0&lt;/option&gt;54&lt;div id="</span>as<span class="string">"&gt;adda&lt;/div&gt;"</span>]</span><br><span class="line"></span><br><span class="line">//（1）匹配 标签头部 或 尾部</span><br><span class="line">var result = str.match(/&lt;.*?&gt;/g);</span><br><span class="line">console.log(result); //[<span class="string">"&lt;option value="</span>hh<span class="string">"&gt;"</span>, <span class="string">"&lt;/option&gt;"</span>, <span class="string">"&lt;div id="</span>as<span class="string">"&gt;"</span>, <span class="string">"&lt;/div&gt;"</span>]</span><br><span class="line"></span><br><span class="line">//（2）匹配 标签头部</span><br><span class="line">var result2 = str.match(/&lt;[A-z].*?&gt;/g);</span><br><span class="line">console.log(result2);// [<span class="string">"&lt;option value="</span>hh<span class="string">"&gt;"</span>, <span class="string">"&lt;div id="</span>as<span class="string">"&gt;"</span>]</span><br><span class="line"></span><br><span class="line">//（3）匹配 完整标签</span><br><span class="line">var result3 = str.match(/&lt;[A-z].*?&gt;.*?&lt;\/.*?&gt;/g);</span><br><span class="line">console.log(result3);// [<span class="string">"&lt;option value="</span>hh<span class="string">"&gt;0&lt;/option&gt;"</span>, <span class="string">"&lt;div id="</span>as<span class="string">"&gt;adda&lt;/div&gt;"</span>]</span><br></pre></td></tr></table></figure><h3 id="写出正则表达式，-从一个字符串中提取所有链接地址。"><a href="#写出正则表达式，-从一个字符串中提取所有链接地址。" class="headerlink" title="写出正则表达式， 从一个字符串中提取所有链接地址。"></a>写出正则表达式， 从一个字符串中提取所有链接地址。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'IT面试题博客中包含很多&lt;a href="http://hi.baidu.com/mianshiti/blog/category/微软面试题"&gt;微软面试题&lt;/a&gt;'</span>;</span><br><span class="line">var exg = /&lt;a(?: [^&gt;]*)+href=<span class="string">"(.*)"</span>(?: [^&gt;]*)*&gt;/g;</span><br><span class="line">console.log(exg.exec(str)[1]);</span><br><span class="line">//http://hi.baidu.com/mianshiti/blog/category/微软面试题</span><br></pre></td></tr></table></figure><h3 id="如何获取一个字符串中的数字字符，并按数组形式输出"><a href="#如何获取一个字符串中的数字字符，并按数组形式输出" class="headerlink" title="如何获取一个字符串中的数字字符，并按数组形式输出"></a>如何获取一个字符串中的数字字符，并按数组形式输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'dgfhfgh254bhku289fgdhdy675gfh'</span>;</span><br><span class="line">console.log(str.match(/\d+/g)); //[<span class="string">"254"</span>, <span class="string">"289"</span>, <span class="string">"675"</span>]</span><br></pre></td></tr></table></figure><h3 id="敏感词过滤"><a href="#敏感词过滤" class="headerlink" title="敏感词过滤"></a>敏感词过滤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'我草你妈哈哈背景天胡景涛哪肉涯剪短发欲望'</span>;</span><br><span class="line">var result = str.replace(/草|肉|欲|胡|景|涛/g,<span class="string">'*'</span>);</span><br><span class="line">console.log(result); //我*你妈哈哈背*天***哪*涯剪短发*望</span><br></pre></td></tr></table></figure><h3 id="判断是否符合-USD-格式"><a href="#判断是否符合-USD-格式" class="headerlink" title="判断是否符合 USD 格式"></a>判断是否符合 USD 格式</h3><p><img src="https://img-blog.csdnimg.cn/20200903174748407.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var pattern7 = /^\$\d&#123;1,3&#125;(,\d&#123;3&#125;)*(\.\d&#123;2&#125;)$/;</span><br><span class="line">console.log(pattern7.test(<span class="string">'$1,023,032.03'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'$2.03'</span>));  // <span class="literal">true</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'$3,432,12.12'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'$34,344.3'</span>));  // <span class="literal">false</span></span><br><span class="line">console.log(pattern7.test(<span class="string">'da$2.03'</span>));  // <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="给定字符串-str，检查其是否以元音字母结尾。"><a href="#给定字符串-str，检查其是否以元音字母结尾。" class="headerlink" title="给定字符串 str，检查其是否以元音字母结尾。"></a>给定字符串 str，检查其是否以元音字母结尾。</h3><p>元音字母包括 a，e，i，o，u，以及对应的大写；若包含则返回 true，否则返回 false</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> endsWithVowel(str) &#123;</span><br><span class="line">    <span class="built_in">return</span> (/[a,e,i,o,u]$/i).<span class="built_in">test</span>(str);</span><br><span class="line">&#125;</span><br><span class="line">console.log(endsWithVowel(<span class="string">'gorilla'</span>));  //<span class="literal">true</span></span><br><span class="line">console.log(endsWithVowel(<span class="string">'gorillE'</span>));  //<span class="literal">true</span></span><br><span class="line">console.log(endsWithVowel(<span class="string">'gorillx'</span>));  //<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="驼峰式字符串-borderLeftColor-和-连字符式字符串-border-left-color-相互转换"><a href="#驼峰式字符串-borderLeftColor-和-连字符式字符串-border-left-color-相互转换" class="headerlink" title="驼峰式字符串 borderLeftColor 和 连字符式字符串 border-left-color 相互转换"></a>驼峰式字符串 borderLeftColor 和 连字符式字符串 border-left-color 相互转换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'borderLeftColor'</span>;</span><br><span class="line">var str2 = <span class="string">'border-left-color'</span>;</span><br><span class="line"></span><br><span class="line">///把str换成  连字符式</span><br><span class="line">console.log(str.replace(/[A-Z]/g, (item) =&gt; <span class="string">'-'</span> + item.toLowerCase()));   //border-left-color</span><br><span class="line">//把str换成  驼峰式</span><br><span class="line">console.log(str2.replace(/-([a-z])/g, (item, <span class="variable">$1</span>) =&gt; <span class="variable">$1</span>.toUpperCase())); //borderLeftColor</span><br></pre></td></tr></table></figure><h3 id="对人口数字的格式化处理，三位数字用一个’-’-逗号-隔开"><a href="#对人口数字的格式化处理，三位数字用一个’-’-逗号-隔开" class="headerlink" title="对人口数字的格式化处理，三位数字用一个’,’(逗号)隔开"></a>对人口数字的格式化处理，三位数字用一个’,’(逗号)隔开</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> numberWithCommas(x) &#123;</span><br><span class="line">    //对右侧人口数字的格式化处理，三位数字用一个<span class="string">','</span>(逗号)隔开</span><br><span class="line">    <span class="built_in">return</span> x.toString().replace(/\B(?=(\d&#123;3&#125;)+(?!\d))/g, <span class="string">','</span>);</span><br><span class="line">&#125;</span><br><span class="line">console.log(numberWithCommas(12345678))//12,345,678</span><br></pre></td></tr></table></figure><h3 id="去掉-http-协议的-jpg-文件的协议头"><a href="#去掉-http-协议的-jpg-文件的协议头" class="headerlink" title="去掉 http 协议的 jpg 文件的协议头"></a>去掉 http 协议的 jpg 文件的协议头</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var imgs = [</span><br><span class="line">  <span class="string">'http://img.host.com/images/fds.jpg'</span>,</span><br><span class="line">    <span class="string">'https://img.host.com/images/fjlj.jpg'</span>,</span><br><span class="line">    <span class="string">'http://img.host.com/images/djalsdf.png'</span>,</span><br><span class="line">    <span class="string">'https://img.host.com/images/adsjfl.png'</span>,</span><br><span class="line">    <span class="string">'http://img.host.com/image/jasdlf.jpg'</span></span><br><span class="line">];</span><br><span class="line">var result = imgs.map((img)=&gt;&#123;</span><br><span class="line">   <span class="built_in">return</span> img.replace(/http:(\/\/.+\.jpg)/,(item,<span class="variable">$1</span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="variable">$1</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">// [<span class="string">"//img.host.com/images/fds.jpg"</span>,</span><br><span class="line">//  <span class="string">"https://img.host.com/images/fjlj.jpg"</span>,</span><br><span class="line">//<span class="string">"http://img.host.com/images/djalsdf.png"</span>,</span><br><span class="line">//<span class="string">"https://img.host.com/images/adsjfl.png"</span>,</span><br><span class="line">//<span class="string">"//img.host.com/image/jasdlf.jpg"</span>]</span><br></pre></td></tr></table></figure><h3 id="找出数组中的表示日期的时间字符串，并修改格式为‘月-日-年’"><a href="#找出数组中的表示日期的时间字符串，并修改格式为‘月-日-年’" class="headerlink" title="找出数组中的表示日期的时间字符串，并修改格式为‘月-日-年’"></a>找出数组中的表示日期的时间字符串，并修改格式为‘月-日-年’</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">times</span>= [<span class="string">'2006/02/03'</span>,</span><br><span class="line">  <span class="string">'test/07/sd'</span>,</span><br><span class="line">  <span class="string">'2016/05/10'</span>,</span><br><span class="line">  <span class="string">'1998-03-07'</span>,</span><br><span class="line">  <span class="string">'12345/23/45678'</span>,</span><br><span class="line">  <span class="string">'1234/23/56789'</span>,</span><br><span class="line">  <span class="string">'12345/23/45'</span>]</span><br><span class="line"><span class="built_in">let</span> list = [];</span><br><span class="line">times.map(time =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> time.replace(/^(\d&#123;4&#125;)[/-](\d&#123;2&#125;)[/-](\d&#123;2&#125;)$/, (match, <span class="variable">$1</span>, <span class="variable">$2</span>, <span class="variable">$3</span>) =&gt; &#123;</span><br><span class="line">    list.push(`<span class="variable">$&#123;$1&#125;</span>-<span class="variable">$&#123;$2&#125;</span>-<span class="variable">$&#123;$3&#125;</span>`);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(list);</span><br><span class="line"></span><br><span class="line">// [ <span class="string">'2006-02-03'</span>, <span class="string">'2016-05-10'</span>, <span class="string">'1998-03-07'</span> ]</span><br></pre></td></tr></table></figure><h3 id="获取-url-中的参数"><a href="#获取-url-中的参数" class="headerlink" title="获取 url 中的参数"></a>获取 url 中的参数</h3><p>指定参数名称，返回该参数的值 或者 空字符串</p><p>不指定参数名称，返回全部的参数对象 或者 {}</p><p>如果存在多个同名参数，则返回数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//    获取 url 参数</span><br><span class="line"><span class="keyword">function</span> getUrlParam(sUrl, sKey) &#123;</span><br><span class="line">  var arr=&#123;&#125;;</span><br><span class="line">  sUrl.replace(/\??(\w+)=(\w+)&amp;?/g,<span class="keyword">function</span>(match,p1,p2)&#123;</span><br><span class="line">      //console.log(match,p1,p2);</span><br><span class="line">      <span class="keyword">if</span>(!arr[p1])&#123;</span><br><span class="line">          arr[p1]=p2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          var p=arr[p1];</span><br><span class="line">          arr[p1]=[].concat(p,p2);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span>(!sKey)<span class="built_in">return</span> arr;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(var ele <span class="keyword">in</span> arr)&#123;</span><br><span class="line">          <span class="keyword">if</span>(ele==sKey)&#123;<span class="built_in">return</span> arr[ele];&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="让字符串制定部分变色"><a href="#让字符串制定部分变色" class="headerlink" title="让字符串制定部分变色"></a>让字符串制定部分变色</h3><p>让页面中这段字符串 “我爱你哈哈爱你” 中的”爱“字全变为红色。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"as"</span> &gt;我爱你哈哈爱你&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var oDiv = document.getElementById(<span class="string">'as'</span>);</span><br><span class="line">var str = oDiv.innerHTML;</span><br><span class="line">var newStr = str.replace(/爱/g, m =&gt; <span class="string">"&lt;span style='color:red'&gt;"</span> + m + <span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">oDiv.innerHTML = newStr;</span><br></pre></td></tr></table></figure><p>常用正则</p><ol><li><p>email: <code>/^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/</code></p></li><li><p>url: <code>new RegExp(&#39;^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$&#39;, &#39;i&#39;)</code></p></li><li><p>hex: <code>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i</code></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crypto模块公钥加密私钥解密探索</title>
      <link href="crypto%E6%A8%A1%E5%9D%97%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%E6%8E%A2%E7%B4%A2/"/>
      <url>crypto%E6%A8%A1%E5%9D%97%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(<span class="string">'crypto'</span>)</span><br><span class="line">const fs = require(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">const publicKey = fs.readFileSync(<span class="string">'./rsa_public_key.pem'</span>).toString(<span class="string">'ascii'</span>);</span><br><span class="line">const privateKey = fs.readFileSync(<span class="string">'./rsa_private_key.pem'</span>).toString(<span class="string">'ascii'</span>);</span><br><span class="line">console.log(publicKey)</span><br><span class="line">console.log(privateKey)</span><br><span class="line">const data = <span class="string">"test"</span>;</span><br><span class="line">console.log(<span class="string">"content: "</span>, data)</span><br><span class="line">//公钥加密</span><br><span class="line">const encodeData = crypto.publicEncrypt(publicKey, Buffer.from(data)).toString(<span class="string">'base64'</span>);</span><br><span class="line">console.log(<span class="string">"encode: "</span>, encodeData)</span><br><span class="line">//私钥解密</span><br><span class="line">const decodeData = crypto.privateDecrypt(privateKey, Buffer.from(encodeData.toString(<span class="string">'base64'</span>), <span class="string">'base64'</span>));</span><br><span class="line">console.log(<span class="string">"decode: "</span>, decodeData.toString())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地电脑静态资源访问服务</title>
      <link href="%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>npm i serve -g</p></blockquote><p>##<br>启动服务</p><blockquote><p>serve</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\klover\Downloads&gt;serve</span><br><span class="line">   ┌───────────────────────────────────────────────────┐</span><br><span class="line">   │                                                   │</span><br><span class="line">   │   Serving!                                        │</span><br><span class="line">   │                                                   │</span><br><span class="line">   │   - Local:            http://localhost:5000       │</span><br><span class="line">   │   - On Your Network:  http://192.168.3.213:5000   │</span><br><span class="line">   │                                                   │</span><br><span class="line">   │   Copied <span class="built_in">local</span> address to clipboard!              │</span><br><span class="line">   │                                                   │</span><br><span class="line">   └───────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>出现的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\klover\Downloads&gt; serve</span><br><span class="line">serve : 无法加载文件 C:\Users\klover\AppData\Roaming\npm\serve.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https</span><br><span class="line">:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ serve</span><br><span class="line">+ ~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>出现上述问题<br>在命令窗口输入 <code>cmd</code> 出现下面输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Path</span><br><span class="line">----</span><br><span class="line">C:\Users\klover\Downloads</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS C:\Users\klover\Downloads&gt; cmd</span><br><span class="line">Microsoft Windows [版本 10.0.18362.1016]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br></pre></td></tr></table></figure><p>在 运行 <code>serve</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 启动静态访问服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oh-my-zsh</title>
      <link href="Oh-my-zsh/"/>
      <url>Oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<p>zsh 是一个虚拟终端，原先不同的终端有不同的命令，现在通过这个虚拟终端就可以执行所有的命令，如可以执行git命令、subline命令等。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">1. curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">2. cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置zsh为默认终端</span></span><br><span class="line">3. chsh -s /bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后会自带一些主题，也可以去下面的地址下载主题放到 ~/.oh-my-zsh/themes 下</span></span><br><span class="line"><span class="comment">#4. https://github.com/robbyrussell/oh-my-zsh/wiki/themes</span></span><br></pre></td></tr></table></figure><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 打开配置文件：open ~/.zshrc</span><br><span class="line">2. 修改配置文件：ZSH_THEME=你想要的主题，默认为robbyrussell(使用默认就可以)</span><br><span class="line">3. 主题推荐：ys，ys是安装时自带的，无需额外下载</span><br></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">让配置文件生效：<span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac上homebrew最新国内源安装方法</title>
      <link href="mac%E4%B8%8Ahomebrew%E6%9C%80%E6%96%B0%E5%9B%BD%E5%86%85%E6%BA%90%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/"/>
      <url>mac%E4%B8%8Ahomebrew%E6%9C%80%E6%96%B0%E5%9B%BD%E5%86%85%E6%BA%90%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="官网的安装方法"><a href="#官网的安装方法" class="headerlink" title="官网的安装方法"></a>官网的安装方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install &gt;&gt; brew_install</span><br></pre></td></tr></table></figure><h2 id="Homebrew国内源安装"><a href="#Homebrew国内源安装" class="headerlink" title="Homebrew国内源安装"></a>Homebrew国内源安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh &gt;&gt; brew_install</span><br></pre></td></tr></table></figure><p>由于访问<code>https://raw.githubusercontent.com/Homebrew/install/master/install.sh</code>需要翻墙 没有翻墙工具的可以访问我已经下载好的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">curl -fsSL https://gitee.com/w-klover/mac_software_package/blob/master/install.sh &gt;&gt; brew_install</span><br></pre></td></tr></table></figure><h3 id="在终端中用curl复制地址内容，或者直接从浏览器上输入地址后复制内容，然后修改BREW-REPO的值"><a href="#在终端中用curl复制地址内容，或者直接从浏览器上输入地址后复制内容，然后修改BREW-REPO的值" class="headerlink" title="在终端中用curl复制地址内容，或者直接从浏览器上输入地址后复制内容，然后修改BREW_REPO的值"></a>在终端中用curl复制地址内容，或者直接从浏览器上输入地址后复制内容，然后修改BREW_REPO的值</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#BREW_REPO="https://github.com/Homebrew/brew"</span></span><br><span class="line">BREW_REPO=<span class="string">"git://mirrors.ustc.edu.cn/brew.git"</span></span><br></pre></td></tr></table></figure><h3 id="修改保存后，执行以下命令后会快速进行安装"><a href="#修改保存后，执行以下命令后会快速进行安装" class="headerlink" title="修改保存后，执行以下命令后会快速进行安装"></a>修改保存后，执行以下命令后会快速进行安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash brew_install</span><br></pre></td></tr></table></figure><h3 id="安装的中间会卡在（或者github拉取失败）"><a href="#安装的中间会卡在（或者github拉取失败）" class="headerlink" title="安装的中间会卡在（或者github拉取失败）"></a>安装的中间会卡在（或者github拉取失败）</h3><blockquote><p>Cloning into ‘/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core’…</p></blockquote><h3 id="这时候直接Ctrl-C结束，通过ustc的源进行配置"><a href="#这时候直接Ctrl-C结束，通过ustc的源进行配置" class="headerlink" title="这时候直接Ctrl+C结束，通过ustc的源进行配置"></a>这时候直接Ctrl+C结束，通过ustc的源进行配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew</span><br><span class="line">git <span class="built_in">clone</span> https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><p>配置完成后终端输入<code>brew help</code>显示帮助信息则说明安装成功，如果提示失败请检查<code>/usr/local/bin</code>下是否有brew，有的话添加环境变量即可（在/usr/local下可以不配置）</p><h2 id="Homebrew-Cask安装"><a href="#Homebrew-Cask安装" class="headerlink" title="Homebrew Cask安装"></a>Homebrew Cask安装</h2><p>Homebrew Cask需要用homebrew进行安装，同样建议修改homebrew的镜像源为ustc源（或者国内其他源）。如果是按照上面的方法安装的homebrew，镜像源应该已经是ustc的源，用下面的命令查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看brew镜像源</span></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo)</span>"</span> remote -v</span><br><span class="line"><span class="comment"># 查看homebrew-core镜像源</span></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/core)</span>"</span> remote -v</span><br><span class="line"><span class="comment"># 查看homebrew-cask镜像源（需要安装后才能查看， 可以跳过）</span></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/cask)</span>"</span> remote -v</span><br></pre></td></tr></table></figure><p>如果是<code>https://github.com/Homebrew/brew.git</code>的源，需要进行修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改brew镜像源</span></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="comment"># 修改homebrew-core镜像源</span></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/core)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="comment"># 修改homebrew-cask镜像源（需要安装后才能修改，可以跳过）</span></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/cask)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>顺便附上恢复源的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo)</span>"</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/core)</span>"</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/cask)</span>"</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-cask.git</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>修改源之后，进行安装Homebrew Cask，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install brew-cask-completion</span><br></pre></td></tr></table></figure><p>安装完成后输入<code>brew cask help</code>测试，如果出现一下内容并卡住（可以跳过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cloning into <span class="string">'/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask'</span>...</span><br></pre></td></tr></table></figure><p>同样的方法，通过ustc的源进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew</span><br><span class="line">git <span class="built_in">clone</span> https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure><p>再输入<code>brew cask help</code>测试，应该就会显示帮助信息，接着按照上面的方法修改homebrew-cask镜像源即可。</p><p>参考：<br><a href="https://blog.csdn.net/WizardtoH/article/details/104744008?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf" target="_blank" rel="external nofollow noopener noreferrer">homebrew最新国内源安装方法（2020年3月）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>install时出现node-gyp错误时解决方法</title>
      <link href="install%E6%97%B6%E5%87%BA%E7%8E%B0node-gyp%E9%94%99%E8%AF%AF%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>install%E6%97%B6%E5%87%BA%E7%8E%B0node-gyp%E9%94%99%E8%AF%AF%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; fsevents@1.2.11 install /*...*/project/node_modules/chokidar/node_modules/fsevents</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">No receipt <span class="keyword">for</span> <span class="string">'com.apple.pkg.CLTools_Executables'</span> found at <span class="string">'/'</span>.</span><br><span class="line"></span><br><span class="line">No receipt <span class="keyword">for</span> <span class="string">'com.apple.pkg.DeveloperToolsCLILeo'</span> found at <span class="string">'/'</span>.</span><br><span class="line"></span><br><span class="line">No receipt <span class="keyword">for</span> <span class="string">'com.apple.pkg.DeveloperToolsCLI'</span> found at <span class="string">'/'</span>.</span><br><span class="line"></span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: `gyp` failed with <span class="built_in">exit</span> code: 1</span><br><span class="line">gyp ERR! stack     at ChildProcess.onCpExit (/usr/<span class="built_in">local</span>/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:351:16)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:210:5)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)</span><br><span class="line">gyp ERR! System Darwin 19.2.0</span><br><span class="line">gyp ERR! <span class="built_in">command</span> <span class="string">"/usr/local/bin/node"</span> <span class="string">"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"</span> <span class="string">"rebuild"</span></span><br><span class="line">gyp ERR! cwd /Users/guoguo/Sites/pufa100/react-admin/node_modules/chokidar/node_modules/fsevents</span><br><span class="line">gyp ERR! node -v v12.14.0</span><br><span class="line">gyp ERR! node-gyp -v v5.0.5</span><br><span class="line">gyp ERR! not ok</span><br></pre></td></tr></table></figure><ol><li>删除已经安装的CommandLineTools<br><code>sudo rm -rf $(xcode-select -p)</code></li><li>重新安装<br><code>sudo xcode-select --install</code></li></ol><p>同意条款选择同意，会提示系统更新一并同意。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用秘钥登录服务器</title>
      <link href="%E4%BD%BF%E7%94%A8%E7%A7%98%E9%92%A5%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>%E4%BD%BF%E7%94%A8%E7%A7%98%E9%92%A5%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先在根目录下创建一个隐藏文件mkdir .ssh/,然后设置权限chmod 700 .ssh/</p></blockquote><blockquote><p>在.ssh目录下创建文件authorized_keys 并赋予权限chmod 600 .ssh/authorized_keys</p></blockquote><p>创建秘钥</p><blockquote><p>在xshell菜单中点工具-&gt;新建用户秘钥生成向导<br><img src="https://img-blog.csdnimg.cn/2020011110235586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><blockquote><p>秘钥类型及长度根据你自己选择，我这里就默认下一步了<br>需要设置一个密码<br><img src="https://img-blog.csdnimg.cn/20200111102433758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><blockquote><p>复制生成的公钥<br><img src="https://img-blog.csdnimg.cn/20200111102527201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>vim authorized_keys 将复制的公钥写入这个文件</p></blockquote><p>就可以用秘钥登录了</p><a id="more"></a><blockquote><p>查看自己的秘钥<br>在xshell菜单中点工具-&gt;用户秘钥<br><img src="https://img-blog.csdnimg.cn/20200111102737110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><blockquote><p>这里可以导出秘钥<br>双击文件名称或者查看属性，可以更改密码和查看公钥<br><img src="https://img-blog.csdnimg.cn/20200111102831891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>或者使用命令生成公钥 密钥文件<br>ssh-keygen -t rsa -C ‘邮箱’<br>然后一路回车或者也可以设置密码(-C 参数是你的邮箱地址)</p><h2 id="配置服务器只允许密钥登陆禁用密码登陆（可以不配置）"><a href="#配置服务器只允许密钥登陆禁用密码登陆（可以不配置）" class="headerlink" title="配置服务器只允许密钥登陆禁用密码登陆（可以不配置）"></a>配置服务器只允许密钥登陆禁用密码登陆（可以不配置）</h2><p>vim /etc/ssh/sshd_config  (这里一定要注意！！！，不是ssh_config，是sshd_config)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AuthorizedKeysFile   .ssh/authorized_keys   <span class="comment">#公钥公钥认证文件</span></span><br><span class="line"></span><br><span class="line">PubkeyAuthentication yes   <span class="comment">#可以使用公钥登录</span></span><br><span class="line"></span><br><span class="line">PasswordAuthentication no  <span class="comment">#不允许使用密码登录</span></span><br><span class="line"></span><br><span class="line">PermitRootLogin yes <span class="comment">#是否允许root登陆 默认不禁用 除非使用其他用户登陆</span></span><br></pre></td></tr></table></figure><p>重启<br>service sshd restart</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客图片处理</title>
      <link href="hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
      <url>hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>hexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。</p><p>解决方式是使用CodeFalling/hexo-asset-image插件。</p><ol><li>post_asset_folder<br>首先确认_config.yml中有post_asset_folder:true。</li></ol><p>Hexo提供了一种更方便管理Asset的设定：post_asset_folder<br>当您设置post_asset_folder为true参数后，在建立文件时，Hexo<br>会自动建立一个与文章同名的文件夹；以前的文章也可以自己手动创建同名文件夹。</p><ol start="2"><li>安装 hexo-asset-image<br>在hexo的目录下执行</li></ol><blockquote><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p></blockquote><ol start="3"><li>使用hexo new hexo博客图片处理 创建博客<br>会生成 hexo博客图片处理.md文件 和 hexo博客图片处理文件夹</li></ol><p>如图:<br><img src="hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/316BE77F-D585-4170-84BC-720474E3E292.png" alt> </p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号授权登录网页获取code</title>
      <link href="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96code/"/>
      <url>%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96code/</url>
      
        <content type="html"><![CDATA[<p>配置回调函数<br>我们在微信客户端访问第三方网页（即我们自己的网页）的时候，我们可以通过微信网页授权机制，我们不仅要有前面获取到的appid和appsecret还需要有当用户授权之后，回调的域名设置，即用户授权后，页面会跳转到哪里。具体的配置如下：</p><p>在开发-&gt;接口权限中配置<br><img src="https://img-blog.csdnimg.cn/20200729150845785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>请求授权页面的构造方式：</p><blockquote><p><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="external nofollow noopener noreferrer">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p></blockquote><table><thead><tr><th>参数</th><th>必须</th><th>说明</th></tr></thead><tbody><tr><td>appid</td><td>是</td><td>公众号的唯一标识</td></tr><tr><td>redirect_uri</td><td>是</td><td>授权后重定向的回调链接地址</td></tr><tr><td>response_type</td><td>是</td><td>返回类型，请填写code</td></tr><tr><td>scope</td><td>是</td><td>应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且，即使在未关注的情况下，只要用户授权，也能获取其信息）</td></tr><tr><td>state</td><td>否</td><td>重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节，该值会被微信原样返回，我们可以将其进行比对，防止别人的攻击。</td></tr><tr><td>#wechat_redirect</td><td>否</td><td>直接在微信打开链接，可以不填此参数。做页面302重定向时候，必须带此参数</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">应用授权作用域：由于snsapi_base只能获取到openid，意义不大，所以我们使用snsapi_userinfo。</span><br><span class="line"></span><br><span class="line">参考链接如下：（域名是你配置的回调函数域名）</span><br><span class="line">&gt;https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx3d0b47a2e9037&amp;redirect_uri=https://域名/wechattransfer.html&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=https://域名/index.html<span class="comment">#wechat_redirect</span></span><br><span class="line"></span><br><span class="line">`https://域名/wechattransfer.html`是授权后会跳转的地址,在这个页面中会解析路径参入从而进入`https://域名/index.html`（[wechattransfer下载链接](https://github.com/klover2/wechattransfer)）</span><br><span class="line"></span><br><span class="line">下载wechattransfer.html之后配置在你的服务器上，在微信授权下的域名能够访问到</span><br><span class="line">`https://域名/index.html`是要进入的页面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用微信开发工具访问上面参考链接，最后会进入下面链接，同时带上code</span><br><span class="line">https://域名/index.html?code=0014rK302cHWcV0w7K502IhK3024rK3u</span><br></pre></td></tr></table></figure><p>把当前code发送给服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const got = require(<span class="string">'got'</span>);</span><br><span class="line">(async()=&gt;&#123;</span><br><span class="line">    <span class="built_in">let</span> appid= <span class="string">''</span>; // 公众号appid</span><br><span class="line">    <span class="built_in">let</span> appsecret=<span class="string">''</span>;// 公众号appsecret</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> WxLoginInfo = (await got.get(`https://api.weixin.qq.com/sns/oauth2/access_token?appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>&amp;code=<span class="variable">$&#123;code&#125;</span>&amp;grant_type=authorization_code`, &#123; <span class="string">'json'</span>: <span class="literal">true</span> &#125;)).body;</span><br><span class="line">        // 获取微信中的用户信息</span><br><span class="line"><span class="built_in">let</span> &#123; access_token, openid &#125; = WxLoginInfo || &#123;&#125;;</span><br><span class="line">        // 通过微信获取用户信息</span><br><span class="line"><span class="built_in">let</span> wxUserInfo = (await got.get(`https://api.weixin.qq.com/sns/userinfo?access_token=<span class="variable">$&#123;access_token&#125;</span>&amp;openid=<span class="variable">$&#123;openid&#125;</span>`, &#123; <span class="string">'json'</span>: <span class="literal">true</span> &#125;)).body;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>注意：</p><p>使用微信调试工具调试必须得有当前公众号开发者权限<br>在开发-&gt;开发者工具-&gt;点击web开发者工具<br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Web_Developer_Tools.html" target="_blank" rel="external nofollow noopener noreferrer">如何添加</a></p><p>UnionID机制的作用说明：如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的unionid来区分用户的唯一性，因为同一用户，对同一个微信开放平台下的不同应用（移动应用、网站应用和公众帐号），unionid是相同的。</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="external nofollow noopener noreferrer">微信网页授权文档</a></p><p>通过开发者ID及密码调用获取access_token接口时，需要设置访问来源IP为白名单<br>在开发-&gt;基本配置中配置</p><p>JS接口安全域名配置<br>在设置-&gt;公众号设置-&gt;功能设置</p><p>特别说下<br>有些功能在个人订阅号中是开通不了的，订阅号微信认证需要企业帮忙<br>服务号是必须是有营业执照才能注册,个人只能注册订阅号,但是个人如果想要服务号的话,可以先办一个营业执照,再申请服务号就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP与TCP/IP20连问</title>
      <link href="HTTP%E4%B8%8ETCP-IP20%E8%BF%9E%E9%97%AE/"/>
      <url>HTTP%E4%B8%8ETCP-IP20%E8%BF%9E%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Session-和-cookie-的区别"><a href="#Session-和-cookie-的区别" class="headerlink" title="Session 和 cookie 的区别"></a>Session 和 cookie 的区别</h2><ol><li>cookie保存在客户端，未设置存储时间的cookie,关闭浏览器会话cookie就会被删除；设置了存储时间的cookie会保存在用户设备的磁盘中直到过期，同时cookie在客户端可以伪造，不是十分安全，敏感数据不容易保存。session保存在服务器端，存在在IIS的进程开辟的内存中，而session会过多消耗服务器资源，所以尽量少使用session。</li><li>session是服务器用来跟踪用户的一种手段，每个session都有一个唯一标识sessionID。当服务器端生成一个session时就会向客户端发送一个cookie保存到客户端。这个cookie保存的是session的sessionID,这样才能保证客户端发起请求后，用户能够与服务器端成千上万的session进行匹配，同时也保证了不同的页面之间传值的正确性。</li><li>存储数据类型不同：session能够存储任意的java对象，cookie只能存储string类型的对象。</li><li>大于10k的数据，不要用到cookies</li></ol><a id="more"></a><h2 id="TCP三次握手和四次挥手的流程，断开连接如果只有两次握手，会出现什么。"><a href="#TCP三次握手和四次挥手的流程，断开连接如果只有两次握手，会出现什么。" class="headerlink" title="TCP三次握手和四次挥手的流程，断开连接如果只有两次握手，会出现什么。"></a>TCP三次握手和四次挥手的流程，断开连接如果只有两次握手，会出现什么。</h2><ol><li>TCP三次握手：为了对每次发送的数据量进行跟踪与协商，确保数据段的发送和接收同步，根据所接收到的数据量从而确认数据发送、接收完毕后何时撤销联系，并建立虚连接。<br><code>第一次握手：</code>建立连接时，客户端发送syn（synchronize sequence numbers:同步序列编号）包（seq=j）到服务器，并进入SYN_SEND(请求连接)状态，等待服务器确认。<br><code>第二次握手：</code>服务器接收到syn包，必须确认客户的SYN(ack =j+1)(ack:确认字符，表示发来的数据已确认接收无误)，同时自己也发送一个syn包（seq=k）,即SYN+Ack包，此时服务器进入SYN_RECV(发送ack)状态。<br><code>第三次握手：</code>客户端搜到服务器发送的SYN+ACK包，向服务器发送确认包ACK(ack=k+1),包发送完毕，客户端与服务器进入ESTABLISHED(TCP连接成功)状态，完成三次握手。<br><img src="https://img-blog.csdnimg.cn/20200728145354260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>TCP四次挥手（连接终止协议，性质为终止协议）：<br><code>第一次挥手：</code>TCP客户端发送一个FIN+ACK+SEQ,用来传输关闭客户端到服务器的数据。进入FIN_WAIT1状态。<br><code>第二次挥手：</code>服务器收到FIN,被动发送一个ACK(SEQ+1),进入CLOSE_WAIT状态，客户端收到服务器端发送的ack,进入FIN_WAIT2状态。<br><code>第三次挥手：</code>服务器关闭客户端连接，发送一个FIN+ACK+SEQ给客户端。进入LAST_ACK状态。<br><code>第四次挥手：</code>客户端发送ACK(ACK=SQE序号+1)报文确认，客户端今天TIME_WAIT状态。服务器收到ACK进入close状态。<br><img src="https://img-blog.csdnimg.cn/20200728150055240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>由于TCP连接时双向的，因此每个方向都需要单独进行关闭，原则是当一方完成它的数据发送任务后就能发一个FIN来终止这个方向的连接。收到一个FIN只意味着这一个方向没有数据流动，一个TCP连接到一个FIN后仍能发送数据。首次执行FIN的一方主动关闭，另外一方则执行被动关闭。当只握手两次时，就只会关闭主动发起的一端，另一个仍能发送数据<h2 id="TIME-WAIT-和-CLOSE-WAIT的区别"><a href="#TIME-WAIT-和-CLOSE-WAIT的区别" class="headerlink" title="TIME_WAIT 和 CLOSE_WAIT的区别"></a>TIME_WAIT 和 CLOSE_WAIT的区别</h2></li><li>CLOSE_WAIT:等待关闭，是被动关闭连接形成的，也是第二次挥手产生的状态。也就是当对方close一个socket后发送FIN报文给自己，系统会回应一个ACK报文给对方，此时进入close_wait状态。接着我们需要考虑的事情是查看是否还有数据发送给对方，如果没有就可以close这个连接，发送FIN给对方，也既关闭连接，所以在close_wait状态时，需要查看自己是否需要关闭连接。</li><li>TIME_WAIT:是主动关闭连接方式形成的，表示收到了对方的FIN报文，并发送ACK报文，等待2MSL(maximum segment lifetime:报文最大生存时间)约4分钟时间进入close状态。主要是防止最后一个ACK丢失，由于TIME_WAIT等待时间较长，因此server端尽量减少关闭。</li></ol><h2 id="为什么需要-TIME-WAIT-状态"><a href="#为什么需要-TIME-WAIT-状态" class="headerlink" title="为什么需要 TIME_WAIT 状态"></a>为什么需要 TIME_WAIT 状态</h2><p>假设最终的ACK丢失，服务器将重新发送FIN，客户端必须维护TCP状态信息以便可以重发最终的ACK,否则发送RST结果server认为发生错误。TCP实现必须靠的是终止两端的连接（双工关闭），client必须进入TIME_WAIT状态，因为最终的ACK可能发送失败。</p><h2 id="为什么-TIME-WAIT-状态要保持-2MSL-这么长时间"><a href="#为什么-TIME-WAIT-状态要保持-2MSL-这么长时间" class="headerlink" title="为什么 TIME_WAIT 状态要保持 2MSL 这么长时间"></a>为什么 TIME_WAIT 状态要保持 2MSL 这么长时间</h2><p>如果TIME_WAIT状态保存时间不足2MSL,第一个连接可以正常关闭，但是有相同的第二个连接出现，第一个连接重复报文到达，就会干扰第二个连接。TCP必须防止某个连接的重复报文在连接终止后出现，所以让TIME_WAIT状态等待时间大于2MSL,连接响应方向上的TCP报文要么完全响应完毕，要么被丢弃。建立第二次连接时，就不会混淆。</p><h2 id="说说你知道的几种-HTTP-响应吗"><a href="#说说你知道的几种-HTTP-响应吗" class="headerlink" title="说说你知道的几种 HTTP 响应吗"></a>说说你知道的几种 HTTP 响应吗</h2><ol><li>200 ok：表示客户端请求成功</li><li>400 Bad Request 语义错误：不能被当前服务器理解。</li><li>401 Unanthorized: 当前请求需要用户验证。</li><li>403 Forbidden: 服务器收到消息，但是拒绝提供服务器。（一般请求oss图片资源会出现，需要配置代理）</li><li>404 Not Found: 请求资源不存在。</li><li>408 Request Timeout:请求超时，客户端没有在服务器预备等待的时间内完成发送。</li><li>500 Internal server Error: 服务器发送不可预期的错误。</li><li>503 server Unavailable: 由于临时的服务器维护或过载，服务器当前不能出来请求，此状态是临时的，可恢复。</li></ol><h2 id="当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤"><a href="#当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤" class="headerlink" title="当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤"></a>当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤</h2><ol><li>解析域名</li><li>发起tcp的3次握手</li><li>建立TCP请求后发起HTTP请求</li><li>服务器响应HTTP请求</li><li>浏览器得到html代码，进行解析和处理json数据，并请求html代码中的静态资源（js, css,图片等）</li><li>浏览器对网页进行渲染</li></ol><h2 id="TCP-IP-如何保证可靠性，说说-TCP-头的结构"><a href="#TCP-IP-如何保证可靠性，说说-TCP-头的结构" class="headerlink" title="TCP/IP 如何保证可靠性，说说 TCP 头的结构"></a>TCP/IP 如何保证可靠性，说说 TCP 头的结构</h2><ol><li><p>三次握手</p></li><li><p>将数据截断为合理的长度。应用数据被分割成TCP认为最为合适发送的数据块</p></li><li><p>超时重发</p></li><li><p>对于收到的请求，给与确认响应</p></li><li><p>如果校验出现数据包错误，则丢弃报文段，不响应</p></li><li><p>对失序数据进行重新拍序，发送于客户端</p></li><li><p>能够丢弃重复数据</p></li><li><p>流量控制。TCP连接的两端都有缓存大小控制，接收端只允许发送自己缓存剩余大小的数据，有效防止缓存溢出</p></li><li><p>拥塞控制。当网络阻塞时，减少数据的发送<br><img src="https://img-blog.csdnimg.cn/20200728160415169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>【TCP头结构】：</p></li></ol><ul><li><code>源端口（source port）16位的字段</code>，定义了发送这个保文段的主机中应用程序的端口号。</li><li><code>目的端口（destination port）16位的字段</code>，定义了接收这个报文段的主机中应用程序的端口号。</li><li><code>序列号（sequence number）32位的字段</code>，定义了指派给本报文段第一个数据字节的编号。为了保证连接性，要发送的每一个字节都要编号，序号可以告诉终点，报文段中的第一个字节是这个序列中的哪一个字节。在建立连接时，双方使用各自的随机数生成器生产一个初始序号（inital squence number,ISN）,通常两个方向的ISN是不同的。</li><li><code>确认号（acknowledgment nimber） 32位字段</code>定义了报文段的接收方期望从对方接收的字节编码。如果报文段的接收方成功地接收了对方发来的编号为x的字节，那么它就返回x+ 1作为确认号。确认可以和数据捎带一起发送</li><li><code>头部长度（Hlen）这个4个字段</code>指出TCP段的头部长度，以32位字段来衡量，头部长度并不规定，也可以根据选项字段中设置的参数改变</li><li><code>保留（reserved）这个保留字段占用6位</code>，它可以保留提供将来使用</li><li><code>URG紧急数据</code>（urgent data） 这是一条紧急信息</li><li><code>ack</code> 确认已收到段</li><li><code>PSH请求</code>在缓冲区尚未填满时发生消息，注意TCP可以等待缓冲区填满之后在发送段，如果需要立即传送，应用程序必须利用push参数来通知协议</li><li><code>RET</code>申请重置连接</li><li><code>SYN</code>此消息用于建立连接时同步传输数据的计时器</li><li><code>FIN</code>改属性申明发送端以及发送别传输数据的最后一个字节</li><li><code>窗口大小（window）16位字段</code>，这个字段定义的是TCP的窗口大小，以字节为单位。窗口最大长度是65535字节，这个值通常被称为接收窗口（rwnd）,并由接收方来决定。这种情况下，发送方必须是服从接收方的指示</li><li><code>校验和（checksum）16为字段</code>包含的是检验和，检验和是差错控制的手动之一</li><li><code>紧急指针（urgent point）该字段占用2字节</code>，与URG代码位一起使用并且申明及时使存着缓冲区溢出也必须紧急接收的数据末端，因此，如果有些数据需要不按照顺序被送往目的应用程序，那么发送端的应用程序必须利用紧急数据参数通知TCP</li><li><code>选项（option）</code> 改字段会变长且可以忽略，他的最大长度为3个字节，用于解决一下辅助任务，比如选择最大段长，选项可以位于TCP头部的末端，最大长度是8的倍数</li><li><code>填充（padding）</code> 该字段长度不固定，这是一个用于补充头部字段使得它的长度为32位字节的整数倍的一个伪字段9</li></ul><h2 id="如何理解HTTP协议的无状态性"><a href="#如何理解HTTP协议的无状态性" class="headerlink" title="如何理解HTTP协议的无状态性"></a>如何理解HTTP协议的无状态性</h2><p>HTTP协议是无状态的，指的是http协议对于事务处理是没有记忆功能，服务器不知道客户端是什么状态。相当于打开一个服务器上的网页与上一次打开这个服务器上的网页之间没有任何联系。HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）</p><h2 id="简述-Http-请求-get-和-post-的区别以及数据包格式"><a href="#简述-Http-请求-get-和-post-的区别以及数据包格式" class="headerlink" title="简述 Http 请求 get 和 post 的区别以及数据包格式"></a>简述 Http 请求 get 和 post 的区别以及数据包格式</h2><ol><li>get 请求可以被缓存，post不行</li><li>get请求会被浏览器历史记录中保存，post不行</li><li>get请求可以收藏到书签中，post不行</li><li>get请求不应在处理敏感数据时候使用，post可以</li><li>get请求有长度限制，post没有</li><li>post不限制提交的数据类型，所有post可以提交文件到服务器</li></ol><p>数据包格式 == TCP头结构</p><table><thead><tr><th>IE</th><th>URL最大限制是2083个字节，Path长度最大是2048字节（Get请求）。</th></tr></thead><tbody><tr><td>Firefox</td><td>65536</td></tr><tr><td>Safari</td><td>80000以上</td></tr><tr><td>Opera</td><td>190000字节以上</td></tr><tr><td>Chrome</td><td>8182字节</td></tr><tr><td>Apache Server</td><td>8192字节</td></tr><tr><td>IIS</td><td>16384字节</td></tr><tr><td>Perl HTTP::Daemon</td><td>至少8000字节</td></tr></tbody></table><h2 id="HTTP-有哪些-method"><a href="#HTTP-有哪些-method" class="headerlink" title="HTTP 有哪些 method"></a>HTTP 有哪些 method</h2><ul><li>get:获取资源</li><li>post:表单提交</li><li>HEAD:获取报头信息，HEAD方法与get方法类似，但是并不会返回响应主体</li><li>put和patch:更新资源，put对于后台来说是一个完整的资源对象，他包含了对象的所有字段，patch对于后台来说patch方法的参数只包含我们需要修改的资源对象的字段</li><li>delete:删除资源</li><li>options:获取目标资源所支持的通信选项，使用options方法对服务器发起请求，以检查服务器支持哪些http方法</li></ul><h2 id="简述-HTTP-请求的报文格式"><a href="#简述-HTTP-请求的报文格式" class="headerlink" title="简述 HTTP 请求的报文格式"></a>简述 HTTP 请求的报文格式</h2><p>客户端与服务端通信时传输的内容我们称为报文<br>客户端发送给服务器的称为请求报文，服务器发送给客户端的称为响应报文<br><img src="https://img-blog.csdnimg.cn/20200728170029745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200728170125543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200728170114874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="HTTP-的长连接是什么意思"><a href="#HTTP-的长连接是什么意思" class="headerlink" title="HTTP 的长连接是什么意思"></a>HTTP 的长连接是什么意思</h2><p>长连接是指客户端与服务端建立连接后，不会因完成了一次请求后，它们之间的连接主动关闭。后续的读写操作会继续使,用这个链接。如果一个连接两小时内都没有任何动作，服务器会向客户端发送一个探测报文段、根据客户端主机相应探测4个客 户端状态，①、客户端正常时，且服务器可达。此时客户端TCP响应正常，服务器将定时器复位。②、客户端已经崩溃，并且关闭或正在重启，客户端不能响应TCP，服务器将无法收到客户端对探测器的响应。服务器总共发送10个这样的探测，每间隔75秒。如服务器没有收到任何响应，他就认为客户端已经关闭并终止连接。③客户端崩溃，但已重启。服务器将对其保持探测响应，这个响应是一个复位，使得服务器终止这个连接。④客户机正常运行，但是服务器,不可达。这种与②类似。<br>由上可以看出，长连接可以省去较多的TCP建立和关闭操作，减少浪费，节约时间。对于频繁请求资源的客户端适合使用,长连接。在长连接的应用场景下，client端一般不会主动关闭连接，当client与server之间的连接一直不关闭，随着客,户端连接越来越多，server会保持过多连接。这时候server端需要采取一些策略，如关闭一些长时间没有请求发生的连接，这样可以避免一些恶意连接导致server端服务受损；如果条件允许则可以限制每个客户端的最大长连接数，这样可以完全避免恶意的客户端拖垮整体后端服务，例如：数据库的连接用长连接。</p><h2 id="HTTPS-的加密方式是什么，讲讲整个加密解密流程"><a href="#HTTPS-的加密方式是什么，讲讲整个加密解密流程" class="headerlink" title="HTTPS 的加密方式是什么，讲讲整个加密解密流程"></a>HTTPS 的加密方式是什么，讲讲整个加密解密流程</h2><p>加密方式：<br>【1】<code>对称密码算法：</code>指加密和解密使用相同的密钥，速度高，可加密内容较大，用来加密会话过程中的消,息，典型算法DES、AES、RC5、IDEA（分组加密)RC4。<br>【2】<code>非对称密码算法：</code>又称为公钥加密算法，是指加密和解密使用不同的密钥，加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥（公开的密钥用于加密，私有的密钥用于解密）典型的法RSA、 DSA 、DH.<br>【3】<code>散列算法：</code>将文件内容通过此算法加密变成固定长度的值（散列值），这个过程可以使用密钥也可以不使用。这种散列变化是不可逆的，也就是说不能从散列值编程原文，因此散列变化通道常用语验证原文是否被篡改。典型的算法,MD5、SHA BASE64、CRC等<br>注意：SSL协议在建立链路时 ，SSL首先对对称加密的密钥进行对公加密，链路建立好之后，SSL对传输内容使用对称加密.SSL加密过程：参考15问题图7双向认证：单向认证作为了解加密过程简化流程<br><img src="https://img-blog.csdnimg.cn/20200728172805445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第三步：客户端使用服务端返回的信息验证服务器的合法性，包括：<br>1）、证书是否过期<br>2）、发布服务器证书的CA是否可靠。<br>3）、返回的公钥是否能正确解开返回证书中的数字签名。<br>4）、服务器证书上的域名是否和服务器实际域名相匹配。</p><h2 id="Http-和-Https-的三次握手有什么区别"><a href="#Http-和-Https-的三次握手有什么区别" class="headerlink" title="Http 和 Https 的三次握手有什么区别"></a>Http 和 Https 的三次握手有什么区别</h2><p>https在http的基础上加入了ssl/TSL协议，ssl依靠证书来验证服务器的身份，并为服务器域浏览器之间的通信加密。下图为https的握手流程<br><img src="https://img-blog.csdnimg.cn/20200728173039585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="什么是分块传送"><a href="#什么是分块传送" class="headerlink" title="什么是分块传送"></a>什么是分块传送</h2><ol><li>分块传送是超文本协议HTTP中的一种传输机制，允许HTTP由网页服务器发送给客户端应用（通常是网页浏览器）的数据可以分成多个部分。分块传送只在HTTP/1.1中提供。HTTP应答消息中发送的数据是整个发送的，Content-Length消息头字段表示数据的长度。数据的长度很重要，因为客户端需要知道哪里是应答消息的结束，以及后续应答消,息的开始。然而，使用分块传输编码，数据分解成一系列数据块，并以一个或多个块发送，这样服务器可以发送数据而不需要预先知道发送内容的总大小，通常数据块的大小是一致的，但也不总是这种情况。</li><li>对于在发送HTTP头部前，无法计算出Content-Length的HTTP请求及回复（例如WEB服务端产生的动态内,容），可以使用分块传输，使得不至于等待所有数据产<br>生后，再发送带有Content-Length的HTTP头部，而是将已经产生的数据一块一块发送出去。</li><li>HTTP BODY数据成连续的块传输，每块数据的最开始处，指明了该数据块的大小，随后则是CRLF，数据，及结尾,CRLF。可见每块数据<br>都是包含在两个CRLF之间，最后一块数据则是OCRLFCRLF，两个CRLF之间没有任何数据；数据大小以16进制字符串表示（不是二进制）。</li><li>客户端发送请求时，也可以使用分块传输，但是一般客户端发送请求前，不知道服务端是否支持分块传输，所以，客户端可以发送HTTP头部，表明使用分块传输，假如服务端不支持，将会回复411(Length Required）错误，中断请求</li></ol><h2 id="http-1-0、http-1-1和http2-0有什么区别"><a href="#http-1-0、http-1-1和http2-0有什么区别" class="headerlink" title="http/1.0、http/1.1和http2.0有什么区别"></a>http/1.0、http/1.1和http2.0有什么区别</h2><p>【1】http/1.0协议默认使用非持久连接，既在非持久连接下，服务器处理完客户端请求后立即断开TCP连接，服务器不跟踪每个客户，也不记录过去的请求。<br>【2】http/1.1协议默认使用持久连接，既一个TCP可以传输多个WEB对象。同时也可通过配置支持非持久连接。<br>【3】http/1.1增加了Host字段，因为目前一台计算机上有多个虚拟主机共享一个IP地址，请求和响应消息都应该支持Host头信息，且请求消息中没有Host头信息会报（400 Bad Request）。此外服务<br>器应该接受以绝对路径标记的资源请求，而http/1.0中每台服务器都绑定一个唯一的IP，因此，请求消息中的URL没有传递主机名（HostName）<br>【4】增加了新的状态码100（Continue).客户端事先发送一个只带头域的请求，如果服务因权限等拒绝请求，就回送401(Unauthorized）或403；如果服务器接受此请求就回送100，客户端就可以继续发送带实体的完成请求，状态码的使用，在request发送body之前，先发送header 试探一下server，如果接受body，再发送body。可以节省带宽。<br>【5】 http/1.0加入了分块编码（Chunked TransferCoding)，发送方将消息分割成若干个任意大小的数据块，每个数据块在发送时都会附上块的长度，最后一个零长度的块作为消息的结束标志。这种发送<br>允许发送方只缓存一个片段，避免缓存整个片段带来的过载。<br>【6】 http/1.1在http/1.0的基础上加入了一些Cache的新特性，当缓存对象Ag e超过Expire时变为stale对象，Cache不需要直接抛弃stale对象，而是与源服务器进行重新激活（revalidation）<br>【7】http/2.0支持多路复用技术，同一个连接并发处理多个请求（NIO），http/1.1可以通过建立多个TCP解决。<br>【8】 http/1.1不支持Header数据的压缩，http/2.0使用HPACK算法对数据压缩，降体积提速度。<br>【9】 http/2.0请求服务器，服务器推送数据时会额外推送客户需要的资源，客户下次调用不用请求直接调用。提升速度。</p><h2 id="DNS使用的协议（即使用-TCP-也使用-UDP）"><a href="#DNS使用的协议（即使用-TCP-也使用-UDP）" class="headerlink" title="DNS使用的协议（即使用 TCP 也使用 UDP）"></a>DNS使用的协议（即使用 TCP 也使用 UDP）</h2><p>【1】首先了解一下TCP与UDP传送字节的长度限制：UDP报文的最大长度为512字节，而TCP则允许报文长度超过512字节。当DNS查询超过512字节时，协议的TC标志出现删除标志，这时使用TCP发送通常传统的UDP报文一般不会大于512字节。<br>【2】区域传送时使用TCP，主要有一下两点考虑：辅域名服务器会定时（一般3个小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，则会执行一次区域传送， 进行数据同步。区域传送将使用TCP而不是UDP,因为数据同步传送的数据量比一个请求和应答的数据量要多得多。TCP是一种可靠的连接，保证了数据的准确性。<br>【3]域名解析时使用UDP协议：客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过TCP三次握手，这样DNS服务器负载更低，响应更快。虽然从理论上说，客户端也可以指向DNS服务器查询的时候使用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</p><h2 id="TCP-粘包和拆包产生的原因"><a href="#TCP-粘包和拆包产生的原因" class="headerlink" title="TCP 粘包和拆包产生的原因"></a>TCP 粘包和拆包产生的原因</h2><p>【1】应用程序写入数据的字节大小大于套接字发送缓冲区的大小,<br>【2】进行MSS大小的TCP分段。MSS是最大报文段长度的缩写。MSS是TCP报文段中的数据字段的最大长度，数据字段加上TCP首部才等于整个的TCP报文段。所以MSS并不是TCP报文段的最大长度，而是MSS=TCP报文段长度-TCP首部长度,<br>【3】以太网的payload大于MTU进行IP分片。MTU指：一种通信协议的某一层上面所能通过的最大数据包大小。如果IP层有一个数据包要传，而且数据的长度比链路层的MTU大，那么 IP<br>层就会进行分片，把数据包分成若干片，让每一片都不超过MTU。注意，IP分片可以发生在原始发送端主机上，也可以发生在中间路由器上。</p><p>【解决办法】:<br>【1】消息定长。例如100字节,<br>【2】在包尾部增加回车或者空格符等特殊字符进行分割，典型的如FTP协议,<br>【3】将消息分为消息头和消息尾。<br>【4】其它复杂的协议，如RTMP协议等。</p><h2 id="WEB开发中-Forward-和-Redirected的区别"><a href="#WEB开发中-Forward-和-Redirected的区别" class="headerlink" title="WEB开发中 Forward 和 Redirected的区别"></a>WEB开发中 Forward 和 Redirected的区别</h2><p>【1 】间接请求转发（Redirect)：实际是两次HTTP请求，服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。一般用于避免用户的非正常访问。例如：用户在没有登录的情况下访问后台资源 ,Servlet可以将该HTTP请求重定向到登录页面，让用户登录以后再访问。<br>【2】直接请求转发（Forward):客户端和浏览器只发出一次请求，Serlet、HTML、JSP或其它信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。</p><p>来源：<br><a href="https://mparticle.uc.cn/article.html?uc_param_str=frdnsnpfvecpntnwprdssskt&btifl=100&app=uc-iflow&title_type=1&wm_id=49d711aab7094af0a5ae5a2a7de44769&wm_cid=368657040576349184&pagetype=share&client=&uc_share_depth=1" target="_blank" rel="external nofollow noopener noreferrer">腾讯面试HTTP与TCP/IP20连问，你能答出多少？</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip和unzip命令</title>
      <link href="zip%E5%92%8Cunzip%E5%91%BD%E4%BB%A4/"/>
      <url>zip%E5%92%8Cunzip%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="zip命令"><a href="#zip命令" class="headerlink" title="zip命令"></a>zip命令</h2><ol><li><p>压缩一个文件，并且指定一个新的文件名。</p><blockquote><p>zip [new_name].zip [file_path]</p></blockquote></li><li><p>压缩一个目录下的所有文件，并且指定一个新的文件名。</p><blockquote><p>zip -r [new_name].zip [dir_path]</p></blockquote></li><li><p>加密压缩。</p><blockquote><p>zip -rP [password] [new_name].zip [file_path]</p></blockquote></li></ol><h2 id="unzip命令"><a href="#unzip命令" class="headerlink" title="unzip命令"></a>unzip命令</h2><ol><li><p>解压文件到当前文件夹。</p><blockquote><p>unzip [file_name].zip</p></blockquote></li><li><p>解压文件到指定目录下。</p><blockquote><p>unzip -d [dir_path] [file_name].zip</p></blockquote></li><li><p>解压加密文件。</p><blockquote><p>unzip -P [password] [file_name].zip</p></blockquote></li></ol><p>注：<br>-r 递归  -v 查看 -P  密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过rinetd实现端口转发来访问内网的服务</title>
      <link href="%E9%80%9A%E8%BF%87rinetd%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%9D%A5%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E7%9A%84%E6%9C%8D%E5%8A%A1/"/>
      <url>%E9%80%9A%E8%BF%87rinetd%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%9D%A5%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E7%9A%84%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>$ yum –enablerepo=nux-misc install rinetd</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置端口转发的配置文件在/etc/rinetd.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[bindaddress] [bindport] [connectaddress] [connectport]</span><br><span class="line">绑定的地址    绑定的端口  连接的地址      连接的端口</span><br><span class="line"></span><br><span class="line">[Source Address] [Source Port] [Destination Address] [Destination Port]</span><br><span class="line">源地址            源端口         目的地址               目的端口</span><br></pre></td></tr></table></figure><a id="more"></a><p>在每一单独的行中指定每个要转发的端口。源地址和目的地址都可以是主机名或IP地址，IP 地址0.0.0.0将rinetd绑定到任何可用的本地IP地址上。例如：0.0.0.0 8080 <a href="http://www.hi-linux.com" target="_blank" rel="external nofollow noopener noreferrer">www.hi-linux.com</a> 80<br>配置规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/rinetd.conf</span><br><span class="line"></span><br><span class="line">0.0.0.0 8080 172.19.94.3 8080</span><br><span class="line">0.0.0.0 2222 192.168.0.103 3389</span><br><span class="line">1.2.3.4 80 192.168.0.10 80</span><br><span class="line">allow *.*.*.*</span><br><span class="line">logfile /var/<span class="built_in">log</span>/rinetd.log</span><br></pre></td></tr></table></figure><p>说明</p><blockquote><p>0.0.0.0表示本机绑定所有可用地址<br>将所有发往本机8080端口的请求转发到172.19.94.3的8080端口<br>将所有发往本机2222端口的请求转发到192.168.0.103的3389端口<br>将所有发往1.2.3.4的80端口请求转发到192.168.0.10的80端口<br>allow设置允许访问的ip地址信息,..<em>.</em>表示所有IP地址<br>logfil设置打印的log的位置</p></blockquote><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>$ /usr/sbin/rinetd -c /etc/rinetd.conf</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><ol><li>rinetd.conf中绑定的本机端口必须没有被其它程序占用</li><li>运行rinetd的系统防火墙应该打开绑定的本机端口</li><li>不支持FTP的跳转</li></ol></blockquote><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查进程是否启动</span></span><br><span class="line"></span><br><span class="line">$ ps aux | grep -I rinetd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查监控的端口是否开启</span></span><br><span class="line"></span><br><span class="line">$ netstat -tanop | grep 4408</span><br></pre></td></tr></table></figure><p>来源：<br><a href="https://blog.csdn.net/BidCms1234/article/details/84582270?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="external nofollow noopener noreferrer">rinetd实现端口转发来访问内网的服务</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rinetd端口转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中（constructor属性）</title>
      <link href="JS%E4%B8%AD%EF%BC%88constructor%E5%B1%9E%E6%80%A7%EF%BC%89/"/>
      <url>JS%E4%B8%AD%EF%BC%88constructor%E5%B1%9E%E6%80%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在Javascript 语言中，constructor 属性是专门为 function 而设计的，它存在于每一个function 的prototype 属性中。这个constructor 保存了指向 function 的一个引用。 </p><p>在定义一个函数（代码如下所示）时，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">functionF() </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">// some code</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var f = new F();</span><br><span class="line">console(f.constructor === F);// output <span class="literal">true</span></span><br></pre></td></tr></table></figure><p> JavaScript 内部会执行如下几个动作：1</p><p>1.为该函数添加一个原形（即 prototype）属性<br>2. 为 prototype 对象额外添加一个 constructor 属性，并且该属性保存指向函数F 的一个引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 继承</span><br><span class="line">var f = new F();</span><br><span class="line"></span><br><span class="line">class Api extends f.constructor &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default new Api()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6类的使用</title>
      <link href="es6%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>es6%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">// 类的由来 原始js 方法声明</span><br><span class="line">// <span class="keyword">function</span> Book(title, pages, isbin) &#123;</span><br><span class="line">//     this.title = title;</span><br><span class="line">//     this.pages = pages;</span><br><span class="line">//     this.isbin = isbin;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// Book.prototype.init = <span class="function"><span class="title">function</span></span>() &#123; // 只能定义public 方法</span><br><span class="line">//     console.log(this.title);</span><br><span class="line">// &#125;;</span><br><span class="line"></span><br><span class="line">// <span class="built_in">let</span> book = new Book(<span class="string">'title'</span>, <span class="string">'page'</span>, <span class="string">'isbin'</span>);</span><br><span class="line"></span><br><span class="line">// book.init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// es6 类声明</span><br><span class="line">class Book &#123;</span><br><span class="line">    constructor(title, pages, isbin) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">        this.pages = pages;</span><br><span class="line">        this.isbin = isbin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">init</span></span>() &#123;</span><br><span class="line">        console.log(this.title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="built_in">let</span> book = new Book(<span class="string">'title'</span>, <span class="string">'page'</span>, <span class="string">'isbin'</span>);</span><br><span class="line">// console.log(book.title);// 输出 title</span><br><span class="line">// book.title = <span class="string">'new title'</span>;</span><br><span class="line">// console.log(book.title); // 输出 new title</span><br><span class="line">// book.init();// 输出 new title</span><br><span class="line"></span><br><span class="line">// 继承</span><br><span class="line">class IBook extends Book &#123;</span><br><span class="line">    constructor(title, pages, isbin, newBook) &#123;</span><br><span class="line">        super(title, pages, isbin);</span><br><span class="line">        this._newBook = newBook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 也可以使用get <span class="built_in">set</span>属性存储器 可以进行一些其他参数处理</span><br><span class="line">    get <span class="function"><span class="title">newBook</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> this._newBook;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span> newBook(value) &#123;</span><br><span class="line">        this._newBook = `aaaa<span class="variable">$&#123;value&#125;</span>`;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> iBook = new IBook(<span class="string">'title'</span>, <span class="string">'page'</span>, <span class="string">'isbin'</span>, <span class="string">'新参数'</span>);</span><br><span class="line"></span><br><span class="line">console.log(iBook.newBook); // 新参数</span><br><span class="line">iBook.newBook = <span class="string">'新参数2'</span>;</span><br><span class="line">console.log(iBook.newBook); // aaaa新参数2</span><br><span class="line"></span><br><span class="line">iBook.init(); // 输出 title</span><br></pre></td></tr></table></figure><p><a href="https://es6.ruanyifeng.com/#docs/class" target="_blank" rel="external nofollow noopener noreferrer">Class 的基本语法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux一些基本命令</title>
      <link href="linux%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>linux%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>查看历史命令(显示最近的一千条命令)<br>查看历史指令除了有history,还有方向键盘上的方向键上下键，或者家目录下的隐藏文件.bash_history查看</p><blockquote><p>cat .bash_history | more -10</p></blockquote><a id="more"></a><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况<br>常用 netstat -nlpt 显示端口号是否启动</p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>查看服务器的进程占用的资源（100%使用）<br>PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND</p><table>        <thead>            <tr>                <th>名称</th>                <th>说明</th>            </tr>        </thead>        <tbody>            <tr>                <td>PID</td>                <td>进程的ID（process id）</td>            </tr>            <tr>                <td>USER</td>                <td>该进程所属的用户。</td>            </tr>            <tr>                <td>PR</td>                <td>优先级，数值越小优先级越高。</td>            </tr>            <tr>                <td>NI</td>                <td>优先级，数值越小优先级越高。（nice值）</td>            </tr>            <tr>                <td>VIRT</td>                <td>该进程使用的虚拟内存的大小，单位为 KB。</td>            </tr>            <tr>                <td>RES</td>                <td>该进程使用的物理内存的大小，单位为 KB。</td>            </tr>            <tr>                <td>SHR</td>                <td>共享内存大小，单位为 KB。计算一个进程实际使用的内存 = 常驻内存（RES）- 共享内存（SHR）</td>            </tr>            <tr>                <td>S</td>                <td>进程状态。其中S 表示睡眠，R 表示运行</td>            </tr>            <tr>                <td>%CPU</td>                <td>该进程占用 CPU 的百分比。</td>            </tr>            <tr>                <td>%MEM</td>                <td>该进程占用内存的百分比。</td>            </tr>            <tr>                <td>TIME+</td>                <td>该进程共占用的 CPU 时间。</td>            </tr>            <tr>                <td>COMMAND</td>                <td>进程名</td>            </tr>        </tbody>    </table><p>查看指定进程 top -p进程id</p><p>调整进程优先级（了解）<br>使用top按”r”来调整<br>改变NICE—&gt;PR优先级的范围：-20——19数字越低，优先级越高，系统会按照更多的cpu时间给该进程注意：我们能够修改的只有 Ni 的优先级，而不能修改Pr的优先级。</p><p>步骤：</p><ul><li>运行top命令，按r，会提示输入希望修改优先级的进程的PID，这里输入1026</li><li>输入1026后回车，提示希望修改的具体数字，这个数字是从-20到19，这里输入10，数字越大，优先级别越低。</li></ul><p>或者命令行使用renice调整<br>renice -5 1206含义：将1206进程的NI优先级设置为-5，实际效果是提高了1206进程的优先级注意：这里的-5代表设置成-5，不是所谓加减的关系，如果当前NI的值是10，当设置成-5后，NI的值会变为-5.</p><h2 id="kill-杀死进程"><a href="#kill-杀死进程" class="headerlink" title="kill 杀死进程"></a>kill 杀死进程</h2><p>kill -g 进程id</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>检测当前主机与目标主机之间的连通性（目标主机没有禁ping）<br>ping -c 3 <a href="http://www.baidu.com" target="_blank" rel="external nofollow noopener noreferrer">www.baidu.com</a></p><h2 id="w"><a href="#w" class="headerlink" title="w"></a>w</h2><p>查看当前登录到系统的用户信息</p><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>在用户目录下使用 source .bashrc 安装参考配置</p><p>source .bashrc 或者. .bashrc 重新加载配置文件</p><p>注意点：</p><ul><li><p>该方式只针对当前用户自身生效，也就是说nets指令只有root用户自己可以用，linux123用户是使用不了；其他除了root用户也想用，需要去自身家目录中的.bashrc文件中自行设置。</p></li><li><p>别名配置文件有全局配置文件，如果说想把某个别名给所有用户用，可以在全局配置文件中设置“/etc/bashrc”；换言之，如果把刚才的nets别名配置放到了全局配置中，所有用户均可使用nets指令。</p></li><li><p>永久方式设置别名，需要用户重新登录才生效。</p></li></ul><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>chmod作用：修改文件、目录的权限<br>语法：chmod [对谁操作] [操作符] [赋予的权限] 文件名<br>操作对象：u    用户user，表现文件或目录的所有者</p><pre><code>g    用户组group，表现文件或目录所属的用户组o    其他用户othera    所有用户all</code></pre><p>操作符：+ 添加权限       -  减少权限         =直接给定一个权限</p><p>权限：1、r       2、w      3.x</p><p>查看 ll 或者 ls -l</p><p>使用：</p><p>1.chmod  755  文件或文件夹名字</p><p>2.chmod  a=rwx  1.txt=chmod  777  1.txt</p><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>修改文件拥有者<br>语法如下：<br>   chown [-R] 账号名称      文件/目录<br>   chown [-R] 账号名称:组群  文件/目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@redhat zgz]<span class="comment"># ls -l</span></span><br><span class="line">total 20</span><br><span class="line">-rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea</span><br><span class="line">-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb</span><br><span class="line">drwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir</span><br><span class="line">[root@redhat zgz]<span class="comment"># chown myy:groupa filea --修改filea的拥有者为myy，并且同</span></span><br><span class="line">[root@redhat zgz]<span class="comment"># ls -l时修改组群为groupa</span></span><br><span class="line">total 20</span><br><span class="line">-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea</span><br><span class="line">-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb</span><br><span class="line">drwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir</span><br><span class="line">[root@redhat zgz]<span class="comment"># chown -R myy  zgzdir                同时改变其下所有文件拥有者</span></span><br><span class="line">total 20</span><br><span class="line">-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea</span><br><span class="line">-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb</span><br><span class="line">drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir</span><br><span class="line">[root@redhat zgz]<span class="comment"># cd zgzdir/</span></span><br><span class="line">[root@redhat zgzdir]<span class="comment"># ls -l</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec</span><br><span class="line">-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed</span><br></pre></td></tr></table></figure><h2 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h2><p>  修改文件所属组群很简单-chgrp命令，就是change group的缩写（我们可以利用这些来记忆命令）<br>  语法：chgrp  组群  文件名/目录<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@redhat zgz]<span class="comment"># chgrp  groupb filea      --改变filea所属群组</span></span><br><span class="line">[root@redhat zgz]<span class="comment"># ls -l</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 zgz groupb 0 Sep 26 05:48 filea</span><br><span class="line">-rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb</span><br></pre></td></tr></table></figure></p><p>注意：chgrp，chown，chmod这些命令默认的情况下只有root有权限执行，大家有时可能会用普通账户去修改文件权限，linux会提示你没有这个权限</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTFUL简介（get和post区别）</title>
      <link href="RESTFUL%E7%AE%80%E4%BB%8B%EF%BC%88get%E5%92%8Cpost%E5%8C%BA%E5%88%AB%EF%BC%89/"/>
      <url>RESTFUL%E7%AE%80%E4%BB%8B%EF%BC%88get%E5%92%8Cpost%E5%8C%BA%E5%88%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="RESTFUL简介"><a href="#RESTFUL简介" class="headerlink" title="RESTFUL简介"></a>RESTFUL简介</h1><p>RESTful架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。</p><p>如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和幂等性的特性，例如GET和HEAD请求都是安全的， 无论请求多少次，都不会改变服务器状态。而GET、HEAD、PUT和DELETE请求都是幂等的，无论对资源操作多少次， 结果总是一样的，后面的请求并不会产生比第一次更多的影响</p><a id="more"></a><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>安全且幂等<br>获取表示<br>变更时获取表示（缓存）<br>200（OK） - 表示已在响应中发出<br>204（无内容） - 资源有空表示<br>301（Moved Permanently） - 资源的URI已被更新<br>303（See Other） - 其他（如，负载均衡）<br>304（not modified）- 资源未更改（缓存）<br>400 （bad request）- 指代坏请求（如，参数错误）<br>404 （not found）- 资源不存在<br>406 （not acceptable）- 服务端不支持所需表示<br>500 （internal server error）- 通用错误响应<br>503 （Service Unavailable）- 服务端当前无法处理请求</p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>不安全且不幂等<br>使用服务端管理的（自动产生）的实例号创建资源<br>创建子资源<br>部分更新资源<br>如果没有被修改，则不过更新资源（乐观锁）<br>200（OK）- 如果现有资源已被更改<br>201（created）- 如果新资源被创建<br>202（accepted）- 已接受处理请求但尚未完成（异步处理）<br>301（Moved Permanently）- 资源的URI被更新<br>303（See Other）- 其他（如，负载均衡）<br>400（bad request）- 指代坏请求<br>404 （not found）- 资源不存在<br>406 （not acceptable）- 服务端不支持所需表示<br>409 （conflict）- 通用冲突<br>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）<br>415 （unsupported media type）- 接受到的表示不受支持<br>500 （internal server error）- 通用错误响应<br>503 （Service Unavailable）- 服务当前无法处理请求</p><h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><p>不安全但幂等<br>用客户端管理的实例号创建一个资源<br>通过替换的方式更新资源<br>如果未被修改，则更新资源（乐观锁）<br>200 （OK）- 如果已存在资源被更改<br>201 （created）- 如果新资源被创建<br>301（Moved Permanently）- 资源的URI已更改<br>303 （See Other）- 其他（如，负载均衡）<br>400 （bad request）- 指代坏请求<br>404 （not found）- 资源不存在<br>406 （not acceptable）- 服务端不支持所需表示<br>409 （conflict）- 通用冲突<br>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）<br>415 （unsupported media type）- 接受到的表示不受支持<br>500 （internal server error）- 通用错误响应<br>503 （Service Unavailable）- 服务当前无法处理请求</p><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>不安全但幂等<br>删除资源<br>200 （OK）- 资源已被删除<br>301 （Moved Permanently）- 资源的URI已更改<br>303 （See Other）- 其他，如负载均衡<br>400 （bad request）- 指代坏请求<br>404 （not found）- 资源不存在<br>409 （conflict）- 通用冲突<br>500 （internal server error）- 通用错误响应<br>503 （Service Unavailable）- 服务端当前无法处理请求</p><h1 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h1><h2 id="POST和PUT用于创建资源时有什么区别"><a href="#POST和PUT用于创建资源时有什么区别" class="headerlink" title="POST和PUT用于创建资源时有什么区别?"></a>POST和PUT用于创建资源时有什么区别?</h2><p>POST和PUT在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。 例如为我的博文增加一个java的分类，生成的路径就是分类名/categories/java，那么就可以采用PUT方法。不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTful应用中就是这么做的</p><h2 id="客户端不一定都支持这些HTTP方法吧"><a href="#客户端不一定都支持这些HTTP方法吧" class="headerlink" title="客户端不一定都支持这些HTTP方法吧?"></a>客户端不一定都支持这些HTTP方法吧?</h2><p>一些比较古老的基于浏览器的客户端，只能支持GET和POST两种方法</p><h2 id="统一接口是否意味着不能扩展带特殊语义的方法"><a href="#统一接口是否意味着不能扩展带特殊语义的方法" class="headerlink" title="统一接口是否意味着不能扩展带特殊语义的方法?"></a>统一接口是否意味着不能扩展带特殊语义的方法?</h2><p>统一接口并不阻止你扩展方法，只要方法对资源的操作有着具体的、可识别的语义即可，并能够保持整个接口的统一性。<br>像WebDAV就对HTTP方法进行了扩展，增加了LOCK、UPLOCK等方法。而github的API则支持使用PATCH方法来进行issue的更新，例如:</p><blockquote><p>PATCH /repos/:owner/:repo/issues/:number<br>不过，需要注意的是，像PATCH这种不是HTTP标准方法的，服务端需要考虑客户端是否能够支持的问题。</p></blockquote><h2 id="get-请求和post请求的具体区别"><a href="#get-请求和post请求的具体区别" class="headerlink" title="get 请求和post请求的具体区别"></a>get 请求和post请求的具体区别</h2><ol><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在Request body中。</li><li>GET产生一个TCP数据包；POST产生两个TCP数据包, 对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。(也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。)</li><li>（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到。</li></ol><h2 id="因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。但是为什么不用？"><a href="#因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。但是为什么不用？" class="headerlink" title="因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。但是为什么不用？"></a>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。但是为什么不用？</h2><ol><li>GET与POST都有自己的语义，不能随便混用。</li><li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li><li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</li></ol><h2 id="重载（Overload）和重写（Override）的区别？"><a href="#重载（Overload）和重写（Override）的区别？" class="headerlink" title="重载（Overload）和重写（Override）的区别？"></a>重载（Overload）和重写（Override）的区别？</h2><p>答：方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求，不能根据返回类型进行区分。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【node使用】glob匹配模式</title>
      <link href="%E3%80%90node%E4%BD%BF%E7%94%A8%E3%80%91glob%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F/"/>
      <url>%E3%80%90node%E4%BD%BF%E7%94%A8%E3%80%91glob%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm install glob</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>const glob = require(‘glob’)</p><a id="more"></a><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><table>        <thead>            <tr>                <th>匹配符</th>                <th>说明</th>            </tr>        </thead>        <tbody>            <tr>                <td>*</td>                <td>匹配文件路径中的0个或多个字符，但不会匹配 / ，除非 / 出现在末尾</td>            </tr>            <tr>                <td>**</td>                <td>匹配路径中的0个或多个目录及其子目录</td>            </tr>            <tr>                <td>?</td>                <td>匹配文件路径中的一个字符，不匹配 /</td>            </tr>            <tr>                <td>!</td>                <td>出现在规则的开头，表示取反。即匹配不命中后面规则的文件</td>            </tr>            <tr>                <td>[]</td>                <td>匹配方括号中出现的字符中的任意一个,如果范围的第一个字符是!或，^则它匹配不在范围内的任何字符</td>            </tr>            <tr>                <td>{}</td>                <td>可以让多个规则用 , 逗号分隔，起到或者的作用</td>            </tr>            <tr>                <td>{n1..n3}</td>                <td>匹配n1到n3之间的整数</td>            </tr>            <tr>                <td>!(pattern|pattern|pattern)</td>                <td>匹配任何与括号中给定的任一模式都不匹配的</td>            </tr>            <tr>                <td>?(pattern|pattern|pattern)</td>                <td>匹配括号中给定的任一模式0次或1次</td>            </tr>            <tr>                <td>+(pattern|pattern|pattern)</td>                <td>匹配括号中给定的任一模式至少1次</td>            </tr>            <tr>                <td>*(pattern|pattern|pattern)</td>                <td>匹配括号中给定的任一模式0次或多次</td>            </tr>            <tr>                <td>@(pattern|pattern|pattern)</td>                <td>匹配括号中给定的任一模式1次</td>            </tr>        </tbody>    </table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">数据库导入</span><br><span class="line">const _ = require(<span class="string">'lodash'</span>);</span><br><span class="line">const glob = require(<span class="string">'glob'</span>);</span><br><span class="line">const &#123; resolve &#125; = require(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">glob.sync(resolve(__dirname, <span class="string">'./'</span>, <span class="string">'**/*.js'</span>))</span><br><span class="line">    .filter(value =&gt; (value.indexOf(<span class="string">'index.js'</span>) === -1))</span><br><span class="line">    .map(model =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">let</span> name = model.split(<span class="string">'/'</span>).pop();</span><br><span class="line">        name = name.replace(<span class="string">'.model.js'</span>, <span class="string">''</span>);</span><br><span class="line">        name = _.camelCase(name); // 驼峰</span><br><span class="line">        name = name.substring(0, 1).toUpperCase() + name.substring(1);// 首字母大写</span><br><span class="line">        db[name] = modelDefine(require(model));</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过管道链接远程服务器上面的数据库</title>
      <link href="%E9%80%9A%E8%BF%87%E7%AE%A1%E9%81%93%E9%93%BE%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%9D%A2%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>%E9%80%9A%E8%BF%87%E7%AE%A1%E9%81%93%E9%93%BE%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%9D%A2%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>服务器的数据库在linux上面不方便管理，又无开启数据库远程访问权限。只有ssh权限的情况下。本地通过ssh管道链接该数据库。。</p><p>首先保证服务器数据库开启，<br>本地链接服务器</p><p>ssh -L 20202:localhost:5432 <a href="mailto:root@12.54.654.77" rel="external nofollow noopener noreferrer" target="_blank">root@12.54.654.77</a> -p 22</p><p>通过ssh -L 管道链接 ：将地址为12.54.654.77服务器上面的 ，本地（localhost）服务端口5432（postgresql服务）映射到，客户端的本地端口20202.</p><p>至此，客户端的本地端口20202即为服务端的 5432端口服务。</p><p>20202：可配置的将服务端数据库端口映射过来的本地端口。<br>localhost：在服务器上面的本地服务。<br>5432：服务器上面的数据库服务端口。<br>root：服务器的ssh账号。<br>12.54.654.77：服务器地址。<br>22：服务器的ssh端口。</p><p>通过公钥文件连接 id_rsa_2048 是秘钥文件<br>ssh -L 5432:localhost:5432 <a href="mailto:root@12.54.654.77" rel="external nofollow noopener noreferrer" target="_blank">root@12.54.654.77</a> -p 22 -i id_rsa_2048</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux服务器内存不足排查</title>
      <link href="linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%8E%92%E6%9F%A5/"/>
      <url>linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>// 查找大于1G的文件 查找opt下大于1g的文件 输出日志保存在/dev/null中<br>// find /opt/ -size +1G 2&gt;/dev/null</p><ol><li>使用df -h发现磁盘占满99%</li></ol><p>看到是/var/lib/docker/containers/**里面占用了 超大的数据</p><p>怀疑是docker的镜像日志造成删除镜像日志<br>docker system prune <a href="http://localhost:4000/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/" target="_blank" rel="external nofollow noopener noreferrer">命令介绍</a><br>发现删除之后仍然占存很大</p><a id="more"></a><ol start="2"><li>通过 命令 lsof -n | grep deleted查找哪些删除进程在未被注销<br>kill -9 进程号</li></ol><p>再df -h就没问题了，这是因为当我们使用rm在linux上删除了大文件，但是如果有进程打开了这个大文件，却没有关闭这个文件的句柄，那么linux内核还是不会释放这个文件的磁盘空间</p><ol start="3"><li>在 /root占用空间过大但是又找不到大文件和大目录的问题<blockquote><p>du -sh /root<br><img src="https://img-blog.csdnimg.cn/20200721140556752.png" alt="在这里插入图片描述"></p></blockquote></li></ol><p>使用du -sh * 却找不到</p><blockquote><p>du -sh *<br><img src="https://img-blog.csdnimg.cn/20200721140742608.png" alt="在这里插入图片描述"></p></blockquote><p>最后换成</p><blockquote><p>du -sh .[!.]*<br><img src="https://img-blog.csdnimg.cn/20200721140759679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>找到对应的大文件，删除 在按照第二步查询一次</p><p>如果删除的是pm2的日志，重启pm2 也是可以的<br>pm2 restart all</p><p>或者 直接使用命令 <code>pm2 flush</code> 就不需要重启</p><p><code>du -h --max-depth=1</code> 查看文件大小 有点慢</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装与卸载</title>
      <link href="docker%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>docker%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我用的是centos8服务器</p><p>centos8 安装 docker</p><blockquote><ol><li>下载docker-ce的repo<br>curl <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="external nofollow noopener noreferrer">https://download.docker.com/linux/centos/docker-ce.repo</a> -o /etc/yum.repos.d/docker-ce.repo</li></ol></blockquote><blockquote><ol start="2"><li>安装依赖(七 不用这一步)<br>yum install <a href="https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm" target="_blank" rel="external nofollow noopener noreferrer">https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm</a></li></ol></blockquote><blockquote><ol start="3"><li>安装docker-ce<br>yum install docker-ce</li></ol></blockquote><blockquote><ol start="4"><li>启动docker<br>systemctl start docker</li></ol></blockquote><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><blockquote><ol><li>查询安装过的包<br>$:yum list installed | grep docker<br><img src="https://img-blog.csdnimg.cn/20191212161911517.png" alt="在这里插入图片描述"></li></ol></blockquote><blockquote><ol start="2"><li>删除安装的软件包<br>$:yum -y remove docker-ce.x86_64<br>$:yum -y remove docker-ce-cli.x86_64</li></ol></blockquote><blockquote><ol start="3"><li>删除镜像/容器等<br>$:rm -rf /var/lib/docker/</li></ol></blockquote><blockquote><ol start="4"><li>输入docker或docker –version验证是否卸载<br>$:<code>docker --version</code></li></ol><p>-bash: /usr/bin/docker: No such file or directory</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL中epoch的用法</title>
      <link href="PostgreSQL%E4%B8%ADepoch%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>PostgreSQL%E4%B8%ADepoch%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>epoch的含义官网上的原本解释如下：</p><p>For date and timestamp values, the number of seconds since 1970-01-01 00:00:00 UTC (can be negative);<br>for interval values, the total number of seconds in the interval.</p><p>翻译过来就是说，对于日期和时间戳类型的值，会获取到从1970-01-01 00:00:00 UTC这个Linux纪元年的开始时间到给定的日期或者时间戳参数的时间之间相隔的秒数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select extract(<span class="string">'epoch'</span> from <span class="string">'2020-02-20 11:11:11'</span>::timestamp)</span><br><span class="line">输出 1582168271</span><br></pre></td></tr></table></figure><p>而对于interval这种时间间隔类型，这会获取到这个时间间隔对应的秒数目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select extract(<span class="string">'epoch'</span> from interval <span class="string">'10 YEAR'</span>) <span class="comment"># 有year month days hour minute second</span></span><br><span class="line">输出 315576000 </span><br><span class="line"></span><br><span class="line">今天是 2020-7-21</span><br><span class="line">select extract(<span class="string">'epoch'</span> from age(cast(<span class="string">'2020-07-20 00:00:00'</span> as timestamp)))</span><br><span class="line">select extract(<span class="string">'epoch'</span> from age(<span class="string">'2020-07-20 00:00:00'</span>::timestamp))</span><br><span class="line">输出 86400</span><br></pre></td></tr></table></figure><h2 id="在sequelize-中的使用"><a href="#在sequelize-中的使用" class="headerlink" title="在sequelize 中的使用"></a>在sequelize 中的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// attributes:&#123;include: []&#125;选择所有模型属性并添加一些附加值</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> rooms = await RoomModel.findAndCountAll(&#123;</span><br><span class="line">            <span class="string">'attributes'</span>: &#123;</span><br><span class="line">                <span class="string">'include'</span>: [[ Sequelize.literal(<span class="string">'EXTRACT(epoch FROM CAST( "room"."msgAt" AS TIMESTAMP)) - EXTRACT(epoch FROM CAST( "lookInfo"."outAt" AS TIMESTAMP))'</span>), <span class="string">'siun'</span> ]],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'where'</span>: &#123;</span><br><span class="line">                <span class="string">'user_hashs'</span>: &#123;</span><br><span class="line">                    <span class="string">'$overlap'</span>: [ user_hash ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'limit'</span>: <span class="built_in">limit</span>,</span><br><span class="line">            <span class="string">'offset'</span>: offset,</span><br><span class="line">            <span class="string">'order'</span>: [[ <span class="string">'msgAt'</span>, <span class="string">'desc'</span> ], [ Sequelize.literal(<span class="string">'"siun" asc nulls last'</span>) ]],</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgreSQL之类型转换</title>
      <link href="postgreSQL%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>postgreSQL%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="通过格式化函数"><a href="#通过格式化函数" class="headerlink" title="通过格式化函数"></a>通过格式化函数</h2><p><img src="https://img-blog.csdnimg.cn/20200721104914459.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">把时间戳转成字符串：</span><br><span class="line">select to_char(current_timestamp, <span class="string">'HH12:MI:SS'</span>)</span><br><span class="line"> </span><br><span class="line">把整数转成字符串:</span><br><span class="line">select to_char(77777, <span class="string">'99999'</span>)</span><br><span class="line"> </span><br><span class="line">把实数或双精度转成字符串:</span><br><span class="line">select to_char(125.8::real, <span class="string">'999D9'</span>)</span><br><span class="line"> </span><br><span class="line">把字符串转成日期:</span><br><span class="line">select to_date(<span class="string">'2019-10-20'</span>, <span class="string">'YYYY-mm-dd'</span>)</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line"><span class="comment"># 999999.99 最多可以输出6位整数 和2位小数 总共8位 如果整数超出6位就会报错，小数多几位默认取两位</span></span><br><span class="line">select to_number(text,text2) //text2 = 999999.99 为保留两位有效数据，不然将不识别小数点，只认识数字类型</span><br><span class="line">select to_number(<span class="string">'2556.611111'</span>,<span class="string">'999999.99'</span>) 输出 2556.61</span><br><span class="line"></span><br><span class="line">有小数点的字符串转数字必须类型带上小数点 不然输出有误</span><br><span class="line">select to_number(<span class="string">'255611.611111'</span>,<span class="string">'99999999'</span>) 输出 2556116</span><br></pre></td></tr></table></figure><h2 id="cast函数"><a href="#cast函数" class="headerlink" title="cast函数"></a>cast函数</h2><p>一个类型造型指定从一种数据类型到另一种数据类型的转换。PostgreSQL接受两种等价的类型造型</p><p>语法：CAST ( expression AS type )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select cast(varchar<span class="string">'123'</span> as text)</span><br><span class="line"></span><br><span class="line">select cast(varchar<span class="string">'123'</span> as INTEGER)</span><br></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="::操作符"></a>::操作符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 1::INTEGER, 5/4::numeric</span><br><span class="line">----</span><br><span class="line">int4?column?</span><br><span class="line">11.25</span><br></pre></td></tr></table></figure><p>文档：<br><a href="http://www.postgres.cn/docs/10/functions-formatting.html" target="_blank" rel="external nofollow noopener noreferrer">postgresql数据类型格式化函数</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgreSQL日期函数Extract</title>
      <link href="postgreSQL%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0Extract/"/>
      <url>postgreSQL%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0Extract/</url>
      
        <content type="html"><![CDATA[<p>Extract 属于 SQL 的 DML（即数据库管理语言）函数，同样，InterBase 也支持 Extract，它主要用于从一个日期或时间型的字段内抽取年、月、日、时、分、秒数据，因此，它支持其关健字 YEAR、MONTH、DAY、HOUR、MINUTE、SECOND、WEEKDAY、YEARDAY。</p><h2 id="sql-例子"><a href="#sql-例子" class="headerlink" title="sql 例子"></a>sql 例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT EXTRACT(YEAR FROM INTIME) FROM RK 从INTIME字段中提取年份</span><br><span class="line"></span><br><span class="line">SELECT EXTRACT(MONTH FROM INTIME) FROM RK 从INTIME字段中提取月份</span><br><span class="line"></span><br><span class="line">SELECT EXTRACT(DAY FROM INTIME) FROM RK 从INTIME字段中提取日</span><br><span class="line"></span><br><span class="line">SELECT EXTRACT(HOUR FROM INTIME) FROM RK 从INTIME字段中提取时</span><br><span class="line"></span><br><span class="line">SELECT EXTRACT(MINUTE FROM INTIME) FROM RK 从INTIME字段中提取分</span><br><span class="line"></span><br><span class="line">SELECT EXTRACT(SECOND FROM INTIME) FROM RK 从INTIME字段中提取秒</span><br></pre></td></tr></table></figure><h2 id="在sequelize中写法"><a href="#在sequelize中写法" class="headerlink" title="在sequelize中写法"></a>在sequelize中写法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">const sequelize = require(<span class="string">'sequelize'</span>);</span><br><span class="line">const StudentModel = require(<span class="string">'./app/models'</span>).Student;</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> list = await StudentModel.findAll(&#123;</span><br><span class="line">        <span class="string">'attributes'</span>: [[ sequelize.literal(<span class="string">'EXTRACT (YEAR from "createdAt")'</span>), <span class="string">'year'</span> ]],</span><br><span class="line">        <span class="string">'raw'</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    console.log(list);</span><br><span class="line"></span><br><span class="line">    打印出===》 [ &#123; year: 2020 &#125;, &#123; year: 2020 &#125;, &#123; year: 2020 &#125;, &#123; year: 2020 &#125; ]</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>文档：<br><a href="http://www.postgres.cn/docs/10/index.html" target="_blank" rel="external nofollow noopener noreferrer">PostgreSQL 10.1 手册</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scp的用法</title>
      <link href="scp%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>scp%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="scp的上传下载文件"><a href="#scp的上传下载文件" class="headerlink" title="scp的上传下载文件"></a>scp的上传下载文件</h2><ol><li>scp命令参数</li></ol><p>-1 强制scp命令使用协议ssh1</p><p>-2 强制scp命令使用协议ssh2</p><p>-4 强制scp命令只使用IPv4寻址</p><p>-6 强制scp命令只使用IPv6寻址</p><p>-B 使用批处理模式（传输过程中不询问传输口令或短语）</p><p>-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</p><p>-p 留原文件的修改时间，访问时间和访问权限。</p><p>-q 不显示传输进度条。</p><a id="more"></a><p>-r 递归复制整个目录。</p><p>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</p><p>-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</p><p>-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。</p><p>-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</p><p>-l limit 限定用户所能使用的带宽，以Kbit/s为单位。</p><p>-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，</p><p>-P port 注意是大写的P, port是指定数据传输用到的端口号</p><p>-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p><ol start="2"><li>scp一般有六种使用方法:<br>本地复制远程文件：（把远程的文件复制到本地）</li></ol><p>scp root@ip:/root/alinode_config.json ../alinode_config.json</p><p>远程复制本地文件：（把本地的文件复制到远程主机上）</p><p>scp /root/alinode_config.json root@ip:/root/alinode_config.json</p><p>本地复制远程目录：（把远程的目录复制到本地）</p><p>scp -r root@ip:/root/test/ /root/test/</p><p>远程复制本地目录：（把本地的目录复制到远程主机上）</p><p>scp -r ./ubuntu_env/ root@ip:/home/pipi</p><p>本地复制远程文件到指定目录：（把远程的文件复制到本地）</p><p>scp root@ip:/root/test/alinode_config.json /root/test/</p><p>远程复制本地文件到指定目录：（把本地的文件复制到远程主机上）</p><p>scp /root/alinode_config.json root@ip:/root/</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH命令行使用方法</title>
      <link href="SSH%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>SSH%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h2><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p><p>连接过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p><h2 id="登陆远程服务器"><a href="#登陆远程服务器" class="headerlink" title="登陆远程服务器"></a>登陆远程服务器</h2><p>ssh -p 22 root@ip</p><p>设置免密登录<br>ssh-copy-id root@ip</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sftp的使用</title>
      <link href="sftp%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>sftp%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="SFTP的概念"><a href="#SFTP的概念" class="headerlink" title="SFTP的概念"></a>SFTP的概念</h2><p>sftp是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的网络的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的其中一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件信息传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接和答复操作，所以从某种意义上来说，SFTP并不像一个服务器程序，而更像是一个客户端程序。SFTP同样是使用加密传输认证信息和传输的数据，所以，使用SFTP是非常安全的。但是，由于这种传输方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。（来自百度百科）</p><p>这里我们用sftp来对远程服务器和本地电脑上文件进行上传，下载操作。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>连接远程服务器</p><ol><li><p>用户名加ip 会提示输入密码</p><blockquote><p>sftp -oPort=22 username@ip </p></blockquote><a id="more"></a></li><li><p>通过公钥文件登录 /root/id_rsa_2048秘钥文件地址</p><blockquote><p>sftp -oIdentityFile=/root/id_rsa_2048 -oPort=22 username@ip</p></blockquote></li><li><p>如果你使用了vscode 配置如下图<br><img src="https://img-blog.csdnimg.cn/20200720145631247.png" alt="在这里插入图片描述"><br>直接使用 sftp alias</p></li></ol><h2 id="上传和下载文件"><a href="#上传和下载文件" class="headerlink" title="上传和下载文件"></a>上传和下载文件</h2><p>将文件上传到服务器上</p><blockquote><p>put [本地文件的地址] [服务器上文件存储的位置]</p></blockquote><p>将服务器上的文件下载到本地</p><blockquote><p>get [服务器上文件存储的位置] [本地要存储的位置]</p></blockquote><h2 id="连接服务器后命令操作区别"><a href="#连接服务器后命令操作区别" class="headerlink" title="连接服务器后命令操作区别"></a>连接服务器后命令操作区别</h2><p>查询服务器文件 ls<br>查询本地文件 lls<br>本地和服务器区别是在命令前面加上 l</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置普通链接二维码规则（小程序）</title>
      <link href="%E9%85%8D%E7%BD%AE%E6%99%AE%E9%80%9A%E9%93%BE%E6%8E%A5%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A7%84%E5%88%99%EF%BC%88%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%89/"/>
      <url>%E9%85%8D%E7%BD%AE%E6%99%AE%E9%80%9A%E9%93%BE%E6%8E%A5%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A7%84%E5%88%99%EF%BC%88%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在配置之前先要确保你使用的<code>当前域名有没有被微信封禁</code>，（使用微信浏览器访问你的域名，能访问则正常），不然一直会报<br><img src="https://img-blog.csdnimg.cn/20200720094626674.png" alt="在这里插入图片描述"><br>在开发 &gt; 开发设置 &gt;扫普通链接二维码打开小程序 中配置</p><a id="more"></a><p>配置如下（二维码规则看文档）<br><img src="https://img-blog.csdnimg.cn/20200720094835378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对应nginx 配置如下<br>wxapp 看上图配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /wxapp &#123;</span><br><span class="line">        default_type text/html;</span><br><span class="line">        <span class="built_in">return</span> 200 <span class="string">"5b07a056b7e971a0260f726363dd"</span>; <span class="comment"># 是检验文件中的内容</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>保存就好</p><p><img src="https://img-blog.csdnimg.cn/20200720095044867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>注意：必须生成二维码通过微信扫一扫才能进入小程序，直接访问链接是不允许的</p><p>参考：<br><a href="https://developers.weixin.qq.com/miniprogram/introduction/qrcode.html#%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A7%84%E5%88%99" target="_blank" rel="external nofollow noopener noreferrer">二维码规则配置</a><br><a href="https://blog.csdn.net/qq_39207066/article/details/79957112" target="_blank" rel="external nofollow noopener noreferrer">扫普通链接二维码打开小程序</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode断点启动无效</title>
      <link href="vscode%E6%96%AD%E7%82%B9%E5%90%AF%E5%8A%A8%E6%97%A0%E6%95%88/"/>
      <url>vscode%E6%96%AD%E7%82%B9%E5%90%AF%E5%8A%A8%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>之前调试一直好好的，前天突然有一次vscode 调试node,启动成功了，但是postman访问不了了，显示访问超时<br>但是在launch.json文件中的配置是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Launch Program"</span>,</span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"<span class="variable">$&#123;workspaceFolder&#125;</span>\\app.js"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>后来找了一些资料,原来还需要在终端启动服务，发现需要增加配置，如下，这个会在终端和调试控制台都启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">"configurations"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">                <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"nodemon"</span>,</span><br><span class="line">                <span class="string">"runtimeExecutable"</span>: <span class="string">"nodemon"</span>,</span><br><span class="line">                <span class="string">"program"</span>: <span class="string">"<span class="variable">$&#123;workspaceFolder&#125;</span>/app.js"</span>,</span><br><span class="line">                <span class="string">"restart"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">                <span class="string">"internalConsoleOptions"</span>: <span class="string">"neverOpen"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本命令</title>
      <link href="docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="为啥使用docker"><a href="#为啥使用docker" class="headerlink" title="为啥使用docker"></a>为啥使用docker</h2><p>Docker五大优势：持续集成、版本控制、可移植性、隔离性和安全性</p><h2 id="docker基本命令"><a href="#docker基本命令" class="headerlink" title="docker基本命令"></a>docker基本命令</h2><ol><li>查看已有的镜像<blockquote><p>docker images</p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/20200706143508883.png" alt="在这里插入图片描述"></p><ol start="2"><li>动态查看容器日志</li></ol><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs containerName/containerId</span><br><span class="line"></span><br><span class="line">eg: </span><br><span class="line">docker logs -f redis</span><br><span class="line"></span><br><span class="line">docker logs -f a390dc72efe4</span><br></pre></td></tr></table></figure><ol start="3"><li><p>关闭容器<br>docker stop containerName/containerId<br>eg: docker stop redis</p></li><li><p>启动容器<br>docker start containerName/containerId</p></li><li><p>重启容器<br>docker restart containerName/containerId</p></li><li><p>删除容器<br>docker rm –f containerName/containerId</p></li><li><p>删除镜像<br>docker rmi -f f104cf54406b</p></li><li><p>查看镜像列表<br>docker search redis</p></li><li><p>从公网拉取一个镜像<br>docker pull redis:latest</p></li><li><p>看容器的端口映射情况<br>docker port 51d58caec77d</p></li><li><p>查看正在运行的容器<br>docker ps</p></li><li><p>查看所有的容器<br>docker ps -a</p></li><li><p>进入容器<br>docker exec -it 容器ID bash<br>docker attach containerId #不推荐使用(退出容器的时候，容器会停止)</p></li><li><p>查看docker网络<br>docker network ls</p></li><li><p>查看docker系统内部存储<br>docker system df<br><img src="https://img-blog.csdnimg.cn/20200706145220877.png" alt="在这里插入图片描述"><br>可知，Docker 镜像占用了324.7mb磁盘，Docker 容器占用了68b磁盘，Docker 数据卷占用了0b磁盘。<br><code>docker system prune</code>命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及 dangling 镜像(即无 tag 的镜像)。<code>docker system prune -a</code>命令清理得更加彻底，可以将没有容器使用 Docker 镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的 Docker 镜像都删掉了</p></li></ol><p>16.手动清理 Docker 镜像/容器/数据卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除所有关闭的容器</span><br><span class="line">docker ps -a | grep Exit | cut -d <span class="string">' '</span> -f 1 | xargs docker rm</span><br><span class="line">删除所有 dangling 镜像(即无 tag 的镜像)：</span><br><span class="line">docker rmi $(docker images | grep <span class="string">"^&lt;none&gt;"</span> | awk <span class="string">"&#123;print <span class="variable">$3</span>&#125;"</span>)</span><br><span class="line">删除所有 dangling 数据卷(即无用的 volume)：</span><br><span class="line">docker volume rm $(docker volume ls -qf dangling=<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>17.docker启动关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="查询系统硬盘使用"><a href="#查询系统硬盘使用" class="headerlink" title="查询系统硬盘使用"></a>查询系统硬盘使用</h2><p>df -h<br>du -h</p><h2 id="查看-docker-文件夹磁盘使用情况"><a href="#查看-docker-文件夹磁盘使用情况" class="headerlink" title="查看 docker 文件夹磁盘使用情况"></a>查看 docker 文件夹磁盘使用情况</h2><p>du -hs /var/lib/docker/</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2</title>
      <link href="pm2/"/>
      <url>pm2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>npm install pm2 -g</p></blockquote><p>pm2 的两种方式：<br>fork 模式，单实例多进程，常用于多语言混编，比如 php、python 等，不支持端口复用，需要自己做应用的端口分配和负载均衡的子进程业务代码。<br>缺点就是单服务器实例容易由于异常会导致服务器实例崩溃。</p><p>cluster 模式，多实例多进程，但是只支持 node，端口可以复用，不需要额外的端口配置，0 代码实现负载均衡。<br>优点就是由于多实例机制，可以保证服务器的容错性，就算出现异常也不会使多个服务器实例同时崩溃。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>初始化创建 ecosystem.config.js<br>pm2 init<br>会在/root/下创建<br>编辑文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">'apps'</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'Auth'</span>, // 项目名</span><br><span class="line">            <span class="string">'script'</span>: <span class="string">'/data/www/Auth/app.js'</span>, // 执行文件</span><br><span class="line">            <span class="string">'cwd'</span>: <span class="string">'./'</span>, // 根目录</span><br><span class="line">            <span class="string">'exec_mode'</span>: <span class="string">'cluster'</span>, // 应用启动模式，支持fork和cluster模式</span><br><span class="line">            <span class="string">'instances'</span>: 1, // 应用启动实例个数，仅在cluster模式有效 默认为fork；或者 max</span><br><span class="line">            <span class="string">'max_memory_restart'</span>: <span class="string">'300M'</span>, // 最大内存限制数，超出自动重启</span><br><span class="line">            <span class="string">'min_uptime'</span>: <span class="string">'60s'</span>, // 应用运行少于时间被认为是异常启动</span><br><span class="line">            <span class="string">'max_restarts'</span>: 3, // 最大异常重启次数，即小于min_uptime运行时间重启次数；</span><br><span class="line">            <span class="string">'env_tri'</span>: &#123; // 环境参数，当前指定为测试环境</span><br><span class="line">                <span class="string">'NODE_ENV'</span>: <span class="string">'tri'</span>, // alinode配置</span><br><span class="line">                // <span class="string">'ENABLE_NODE_LOG'</span>: <span class="string">'YES'</span>, // process.env.REMOTE_ADDR // alinode配置</span><br><span class="line">                // <span class="string">'NODE_LOG_DIR'</span>: <span class="string">'/root/.alinode/logs/'</span>, // alinode配置</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'env_api'</span>: &#123; // 环境参数，当前指定为测试环境</span><br><span class="line">                <span class="string">'NODE_ENV'</span>: <span class="string">'api'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// <span class="string">'autorestart'</span>: <span class="literal">true</span>, // 默认为<span class="literal">true</span>, 发生异常的情况下自动重启</span><br><span class="line">// <span class="string">'cron_restart'</span>: <span class="string">''</span>, // crontab时间格式重启应用，目前只支持cluster模式;</span><br><span class="line">// <span class="string">'error_file'</span>: <span class="string">'~/.pm2/logs/Auth-error.log'</span>, // 错误日志文件</span><br><span class="line">// <span class="string">'out_file'</span>: <span class="string">'~/.pm2/logs/Auth-out.log'</span>, // 正常日志文件 可以设置输出到 /dev/null</span><br><span class="line">// <span class="string">'merge_logs'</span>: <span class="literal">true</span>, // 设置追加日志而不是新建日志</span><br><span class="line">// <span class="string">'log_date_format'</span>: <span class="string">'YYYY-MM-DD HH:mm:ss'</span>, // 指定日志文件的时间格式</span><br><span class="line">// <span class="string">'args'</span>: <span class="string">''</span>, // 传递给脚本的参数</span><br><span class="line">// <span class="string">'interpreter'</span>: <span class="string">''</span>, // 指定的脚本解释器</span><br><span class="line">// <span class="string">'interpreter_args'</span>: <span class="string">''</span>, // 传递给解释器的参数</span><br><span class="line">// <span class="string">'watch'</span>: <span class="literal">true</span>, // 是否监听文件变动然后重启</span><br><span class="line">// <span class="string">'ignore_watch'</span>: [ // 不用监听的文件</span><br><span class="line">//     <span class="string">'node_modules'</span>,</span><br><span class="line">//     <span class="string">'logs'</span>,</span><br><span class="line">// ],</span><br><span class="line">// <span class="string">'restart_delay'</span>: <span class="string">'60s'</span>, // 异常重启情况下，延时重启时间</span><br></pre></td></tr></table></figure><h2 id="文件启动方式（可以启动多个项目）"><a href="#文件启动方式（可以启动多个项目）" class="headerlink" title="文件启动方式（可以启动多个项目）"></a>文件启动方式（可以启动多个项目）</h2><blockquote><p><code>pm2 start ecosystem.config.js --env tri</code></p></blockquote><h2 id="进入到项目中单个启动"><a href="#进入到项目中单个启动" class="headerlink" title="进入到项目中单个启动"></a>进入到项目中单个启动</h2><blockquote><p><code>pm2 start /root/pm2.config.js --only Auth --env tri</code></p></blockquote><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm2 start &lt;js|json&gt;  // 启动并添加一个进程</span><br><span class="line">pm2 ls  // 显示所有进程</span><br><span class="line">pm2 delete &lt;name|id|script|all|json|stdin&gt;  // 停止并删除指定的进程</span><br><span class="line">// 此进程使用<span class="built_in">kill</span> 无效，因为存在守护进程，所以手动<span class="built_in">kill</span>掉某个进程后会自动重启</span><br><span class="line">pm2 stop &lt;id|name|all|json|stdin&gt;  // 停止进程</span><br><span class="line">pm2 start &lt;id|name|all|json|stdin&gt;  // 启动指定进程</span><br><span class="line">pm2 restart &lt;id|name|all|json|stdin&gt;  // 重启指定进程 也可使用正则匹配多个进程</span><br><span class="line">pm2 monit 查看内存 cpu使用</span><br></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 1 实时查看某进程日志</span><br><span class="line">pm2 logs &lt;id|name|all&gt;</span><br><span class="line">// 2 当没有指定日志目录时，默认在~/.pm2/logs中存放这所有进程日志历史</span><br><span class="line"></span><br><span class="line">pm2 flush 清空所有历史应用日志</span><br></pre></td></tr></table></figure><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote><p>pm2 start app.js -i &lt;number | max&gt; // 启动指定数量的子进程</p></blockquote><p><a href="https://pm2.io/docs/plus/guide/server-apps-overview/" target="_blank" rel="external nofollow noopener noreferrer">pm2 文档</a><br><a href="https://www.jianshu.com/p/7b10123c8b88" target="_blank" rel="external nofollow noopener noreferrer">pm2 进程管理工具使用总结</a><br><a href="https://blog.wjc66.cn/%E6%8E%A5%E5%85%A5%E9%98%BF%E9%87%8C%E4%BA%91Node-js%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0/">alinode 监控配置</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> pm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义微信公众号菜单栏</title>
      <link href="%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E8%8F%9C%E5%8D%95%E6%A0%8F/"/>
      <url>%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E8%8F%9C%E5%8D%95%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(<span class="string">'fs'</span>);</span><br><span class="line">const superagent = require(<span class="string">'superagent'</span>);</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> accessTokenInfo = await superagent.get(`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="variable">$&#123;web_appid&#125;</span>&amp;secret=<span class="variable">$&#123;web_appsecret&#125;</span>`).<span class="built_in">set</span>(<span class="string">'accept'</span>, <span class="string">'json'</span>);</span><br><span class="line">    <span class="built_in">let</span> &#123; access_token = <span class="string">''</span>, errcode, errmsg &#125; = accessTokenInfo.body || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    console.log(<span class="string">'access_token========&gt;'</span>, access_token);</span><br><span class="line"></span><br><span class="line">    // // 配置菜单</span><br><span class="line">    <span class="built_in">let</span> button = [&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'我是老师'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'miniprogram'</span>,</span><br><span class="line">        <span class="string">'url'</span>: <span class="string">'http://mp.weixin.qq.com'</span>,</span><br><span class="line">        <span class="string">'appid'</span>: <span class="string">''</span>,// 小程序appid</span><br><span class="line">        <span class="string">'pagepath'</span>: <span class="string">'pages/course/course'</span>,// 打开小程序页面</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'更多服务'</span>,</span><br><span class="line">        <span class="string">'sub_button'</span>: [&#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'新手教程'</span>,</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'view'</span>,// 打开网页 必须是公众号网页</span><br><span class="line">            <span class="string">'url'</span>: <span class="string">'https://mp.weixin.qq.com/s?__biz=MzIzNjYzNjU2Ng==&amp;mid=2247484035&amp;idx=1&amp;sn=4722bd94c29971726601fa963d3f9ec5&amp;chksm=e8d5927adfa21b6c16d4139d255460fc2ddd19289637ac93f5bf1027bd9266c7d3586965ced2&amp;token=1327323395&amp;lang=zh_CN#rd'</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'人工客服'</span>,</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'media_id'</span>,// 发送素材图片</span><br><span class="line">            <span class="string">'media_id'</span>: <span class="string">'fxh1-aKLF1mBk4FWP4OgCdhRNZsck96l_rRaPN-SB08'</span>,</span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="built_in">let</span> url = `https://api.weixin.qq.com/cgi-bin/menu/create?access_token=<span class="variable">$&#123;access_token&#125;</span>`;</span><br><span class="line">    <span class="built_in">let</span> result = await superagent.post(url).send(&#123; button &#125;).<span class="built_in">set</span>(<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip,sdch'</span>);</span><br><span class="line"></span><br><span class="line">    console.log(<span class="string">'result==========&gt;'</span>, result.body);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>文档：<br><a href="https://developers.weixin.qq.com/doc/offiaccount/Custom_Menus/Creating_Custom-Defined_Menu.html" target="_blank" rel="external nofollow noopener noreferrer">自定义菜单栏</a><br><a href="https://blog.wjc66.cn/nodejs%E6%96%B0%E5%A2%9E%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E6%B0%B8%E4%B9%85%E7%B4%A0%E6%9D%90%EF%BC%88%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%89/">自定义上传素材获取 media_id</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs新增其他类型永久素材（微信公众号）</title>
      <link href="nodejs%E6%96%B0%E5%A2%9E%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E6%B0%B8%E4%B9%85%E7%B4%A0%E6%9D%90%EF%BC%88%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%89/"/>
      <url>nodejs%E6%96%B0%E5%A2%9E%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E6%B0%B8%E4%B9%85%E7%B4%A0%E6%9D%90%EF%BC%88%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>上传方式有两种：</p><ol><li>curl 上传<br>注： access_token是获取的公众号token<br>/e/workspace/workspace_koa/bobo/Applets/boboTeacher/lADPD4PvKHkueE_NBTXNA3o_890_1333.jpg 是当前图片所在的位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=access_token&amp;type=image"</span> -F media=@/e/workspace/workspace_koa/bobo/Applets/boboTeacher/lADPD4PvKHkueE_NBTXNA3o_890_1333.jpg</span><br></pre></td></tr></table></figure><ol start="2"><li>使用代码上传<br>如下图： 需要上传的格式是form-data,就是要像前端一样使用form 表单上传图片，格式multipart/form-data，由于superagent  的attach会自动设置，所以这里就不用了<br><img src="https://img-blog.csdnimg.cn/20200702164705863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const superagent = require(<span class="string">'superagent'</span>);</span><br><span class="line">const fs = require(<span class="string">'fs'</span>);</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> appid = <span class="string">''</span>, // 公众号appid</span><br><span class="line">        appsecret = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> accessTokenInfo = await superagent.get(`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>`).<span class="built_in">set</span>(<span class="string">'accept'</span>, <span class="string">'json'</span>);</span><br><span class="line">    <span class="built_in">let</span> &#123; access_token = <span class="string">''</span>, errcode, errmsg &#125; = accessTokenInfo.body || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    console.log(<span class="string">'access_token========&gt;'</span>, access_token);</span><br><span class="line">    // 上传素材</span><br><span class="line">    <span class="built_in">let</span> uploadUrl = `https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=<span class="variable">$&#123;access_token&#125;</span>&amp;<span class="built_in">type</span>=image`;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> result = await superagent.post(uploadUrl).attach(<span class="string">'media'</span>, fs.createReadStream(<span class="string">'./lADPD4PvKHkueE_NBTXNA3o_890_1333.jpg'</span>));</span><br><span class="line"></span><br><span class="line">    console.log(<span class="string">'result======&gt;'</span>, result.text);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 获取素材列表</span><br><span class="line">// <span class="built_in">let</span> xcUrl = `https://api.weixin.qq.com/cgi-bin/material/batchget_material?access_token=<span class="variable">$&#123;access_token&#125;</span>`;</span><br><span class="line">// <span class="built_in">let</span> result = await superagent.post(xcUrl).send(&#123;</span><br><span class="line">//     <span class="string">'type'</span>: <span class="string">'image'</span>,</span><br><span class="line">//     <span class="string">'offset'</span>: 0,</span><br><span class="line">//     <span class="string">'count'</span>: 20,</span><br><span class="line">// &#125;).<span class="built_in">set</span>(<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip,sdch'</span>);</span><br><span class="line"></span><br><span class="line">// console.log(result);</span><br></pre></td></tr></table></figure><p>我图片的位置：<br><img src="https://img-blog.csdnimg.cn/20200702165059501.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200702165600227.png" alt="在这里插入图片描述"></p><p>文档：<br><a href="http://visionmedia.github.io/superagent/#retrying-requests" target="_blank" rel="external nofollow noopener noreferrer">superagent</a><br><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/Adding_Permanent_Assets.html" target="_blank" rel="external nofollow noopener noreferrer">新增其他类型永久素材</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接入阿里云Node.js性能平台</title>
      <link href="%E6%8E%A5%E5%85%A5%E9%98%BF%E9%87%8C%E4%BA%91Node-js%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0/"/>
      <url>%E6%8E%A5%E5%85%A5%E9%98%BF%E9%87%8C%E4%BA%91Node-js%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://node.console.aliyun.com/dashboard/apps/82930/agents/#!/aliyun:bobo-sort/processes" target="_blank" rel="external nofollow noopener noreferrer">阿里云性能平台</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>阿里云账号，在这里 <a href="https://www.aliyun.com/product/nodejs" target="_blank" rel="external nofollow noopener noreferrer">https://www.aliyun.com/product/nodejs </a>开通服务</p><p>一台可以连接到互联网的服务器，或者开发机器</p><a id="more"></a><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p><img src="https://img-blog.csdnimg.cn/20200527173655807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>记录下 App ID 和 App Secret</p><h2 id="安装-Node-js-性能平台所需组件"><a href="#安装-Node-js-性能平台所需组件" class="headerlink" title="安装 Node.js 性能平台所需组件"></a>安装 Node.js 性能平台所需组件</h2><p>Node.js 性能平台使用 tnvm 进行版本维护，采用如下命令安装 tnvm。</p><blockquote><p>wget -O- <a href="https://raw.githubusercontent.com/aliyun-node/tnvm/master/install.sh" target="_blank" rel="external nofollow noopener noreferrer">https://raw.githubusercontent.com/aliyun-node/tnvm/master/install.sh</a> | bash</p></blockquote><p>将 tnvm 添加到系统命令。根据上面命令最后的提示，针对不同操作系统，进行手工操作。例如 linux 系统下</p><blockquote><p>source ~/.bashrc</p></blockquote><p>//查看自己服务器node 版本 node -v<br><img src="https://img-blog.csdnimg.cn/20200527174507101.png" alt="在这里插入图片描述"><br>查看<a href="https://help.aliyun.com/document_detail/60811.html?spm=a2c4g.11186623.2.15.f84176bf3x1v3q" target="_blank" rel="external nofollow noopener noreferrer">Node.js 性能平台运行时版本和官方版本对应关系</a><br><img src="https://img-blog.csdnimg.cn/20200527174124520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我的node 版本 是12.16.2 在这个对照表中没有，就安装差不多版本的就可以，最后他会重置你的node 版本号</p><p>我选择是v5.15.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tnvm ls-remote alinode 查看需要的版本</span></span><br><span class="line">tnvm install alinode-v5.15.0 <span class="comment"># 安装需要的版本</span></span><br><span class="line"><span class="comment">#tnvm uninstall alinode-v5.15.0 卸载</span></span><br><span class="line">tnvm use alinode-v5.15.0<span class="comment"># 使用需要的版本 </span></span><br><span class="line">npm install @alicloud/agenthub -g <span class="comment"># 安装 agenthub</span></span><br></pre></td></tr></table></figure><p>验证安装是否成功,需要确保which node 和which agenthub的路径中包括.tnvm即可。</p><p>root@iZbp1gqe9a9t5d246bp7vqZ:<del># <code>which node</code><br>/root/.tnvm/versions/alinode/v3.11.4/bin/node<br>root@iZbp1gqe9a9t5d246bp7vqZ:</del># <code>which agenthub</code><br>/root/.tnvm/versions/alinode/v3.11.4/bin/agenthub</p><p>查询node 版本<br><img src="https://img-blog.csdnimg.cn/20200527175134505.png" alt="在这里插入图片描述"><br>会安装对应alinode 需要对应的nodejs 版本</p><p>新增文件<br>touch alinode_config.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"appid"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"secret"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"logdir"</span>: <span class="string">"/home/klover/.alinode/logs/"</span> // 用于放日志的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-agenthub"><a href="#启动-agenthub" class="headerlink" title="启动 agenthub"></a>启动 agenthub</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 agenthub list 查看 agenthub 是否启动成功</span></span><br><span class="line"><span class="comment"># 如果没有 agenthub 实例，通过调试模式启动 agenthub：</span></span><br><span class="line"><span class="comment"># DEBUG=* agenthub start yourconfig.json</span></span><br><span class="line"><span class="comment"># ~/.agenthub.log 查看 agenthub 日志。</span></span><br><span class="line"></span><br><span class="line">停止所有进程</span><br><span class="line">agenthub stop all</span><br><span class="line">停止其中一个</span><br><span class="line">agenthub stop appid(通过agenthub  list查询出来的)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200527181735884.png" alt="在这里插入图片描述"></p><h2 id="pm2启动项目"><a href="#pm2启动项目" class="headerlink" title="pm2启动项目"></a>pm2启动项目</h2><blockquote><p><code>export NODE_ENV=api &amp;&amp; ENABLE_NODE_LOG=YES NODE_LOG_DIR=/home/klover/.alinode/logs/ pm2 start app.js --name ShortLink</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200527182216406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>yarn run start-api<br>启动成功查看<br>就会有反应<br><img src="https://img-blog.csdnimg.cn/20200527182402530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的一些方法使用</title>
      <link href="vue%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
      <url>vue%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ol><li>this.$nextTick()的使用</li></ol><p>this.$nextTick()将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。<br>假设我们更改了某个dom元素内部的文本，而这时候我们想直接打印出这个被改变后的文本是需要dom更新之后才会实现的，也就好比我们将打印输出的代码放在setTimeout(fn, 0)中；</p><p>通过this.$nextTick()获取到的值为dom更新之后的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section&gt;</span><br><span class="line">    &lt;h1 ref=<span class="string">"hello"</span>&gt;&#123;&#123; value &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;el-button <span class="built_in">type</span>=<span class="string">"danger"</span> @click=<span class="string">"get"</span>&gt;点击&lt;/el-button&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        value: <span class="string">'Hello World ~'</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">        this.value = <span class="string">'你好啊'</span>;</span><br><span class="line">        console.log(this.<span class="variable">$refs</span>[<span class="string">'hello'</span>].innerText);</span><br><span class="line">        this.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">          console.log(this.<span class="variable">$refs</span>[<span class="string">'hello'</span>].innerText);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span></span>() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>this.$set的用法</li></ol><p>当你发现你给对象加了一个属性，在控制台能打印出来，但是却没有更新到视图上时，也许这个时候就需要用到this.$set（）这个方法了，简单来说this.$set的功能就是解决这个问题的啦。官方解释：向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 Vue 无法探测普通的新增属性 (比如 this.myObject.newProperty = ‘hi’)</p><p>调用方法：this.$set( target, key, value )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> &#123;</span><br><span class="line">        list: [&#123;value: 1&#125;]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">        this.<span class="variable">$set</span>(this.list, 0, &#123;value: 2&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span></span>() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web-view业务域名配置</title>
      <link href="web-view%E4%B8%9A%E5%8A%A1%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/"/>
      <url>web-view%E4%B8%9A%E5%8A%A1%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在小程序中使用网页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-view src=<span class="string">"https://127.0.0.1/boboteacher/user/page/7c87568acd8488467df1592377030008"</span>&gt;&lt;/web-view&gt;</span><br></pre></td></tr></table></figure><p>需要在小程序中业务页面中配置当前域名127.0.0.1</p><p>在 开发-&gt; 开发设置 -&gt; 业务域名中配置</p><p><img src="https://img-blog.csdnimg.cn/20200624110335335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样需要下载那个校验文件，并且放在服务器上，通过访问127.0.0.1能够读取到当前文件内容</p><p>我是通过nginx 配置的<br>两种方式 </p><ol><li>通过nginx 指向文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">      <span class="built_in">alias</span> /data/www/html/; <span class="comment"># 文件放在的位置</span></span><br><span class="line">      index P7Rckhx9o2.txt; <span class="comment"># 文件的名称</span></span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>nginx返回字符串内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        default_type text/html;</span><br><span class="line">       <span class="built_in">return</span> 200 <span class="string">"11111"</span>; <span class="comment"># P7Rckhx9o2.txt 文件中的内容</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置好重启nginx </p><blockquote><p>nginx -s reload</p></blockquote><p>就可以把域名写在业务域名中 配置好提交</p><p>注意: 配置web-view 跳转路径 最好不用#<a href="https://www.cnblogs.com/it-xiong/p/13529817.html" target="_blank" rel="external nofollow noopener noreferrer">问题介绍</a></p><p>或者 在网页中加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta HTTP-EQUIV=<span class="string">"pragma"</span> CONTENT=<span class="string">"no-cache"</span>&gt;</span><br><span class="line">&lt;meta HTTP-EQUIV=<span class="string">"Cache-Control"</span> CONTENT=<span class="string">"no-cache, must-revalidate"</span>&gt;</span><br><span class="line">&lt;meta HTTP-EQUIV=<span class="string">"expires"</span> CONTENT=<span class="string">"0"</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信客服消息或者事件推送或者公众号消息推送到服务器配置</title>
      <link href="%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%9C%8D%E6%B6%88%E6%81%AF%E6%88%96%E8%80%85%E4%BA%8B%E4%BB%B6%E6%8E%A8%E9%80%81%E6%88%96%E8%80%85%E5%85%AC%E4%BC%97%E5%8F%B7%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
      <url>%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%9C%8D%E6%B6%88%E6%81%AF%E6%88%96%E8%80%85%E4%BA%8B%E4%BB%B6%E6%8E%A8%E9%80%81%E6%88%96%E8%80%85%E5%85%AC%E4%BC%97%E5%8F%B7%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p> nodejs + koa</p><p> // 使用此功能 需要配置ip白名单 和 开启开发者密码 才有效果</p><p> <img src="https://img-blog.csdnimg.cn/20200624105154809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>token是自己随便定义的字符串，url 是服务器接口</p><p>先要写好接口，能够访问，不然token一直会报无效</p><p>代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">async wechat(ctx, next) &#123;</span><br><span class="line">        const &#123; signature, timestamp, nonce, echostr &#125; = ctx.query;</span><br><span class="line">        const message = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        // 服务器的token</span><br><span class="line">        const token = <span class="string">'f379eaf3c831b04de153469d1bec345e'</span>;</span><br><span class="line"></span><br><span class="line">        // 将token、timestamp、nonce三个参数进行字典序排序</span><br><span class="line">        const arrSort = [ token, timestamp, nonce ];</span><br><span class="line">        arrSort.sort();</span><br><span class="line"></span><br><span class="line">        // 将三个参数字符串拼接成一个字符串进行sha1加密,npm install --save sha1</span><br><span class="line">        const str = arrSort.join(<span class="string">''</span>);</span><br><span class="line">        const shaStr = crypto.createHash(<span class="string">'sha1'</span>).update(str).digest(<span class="string">'hex'</span>)</span><br><span class="line">            .toUpperCase();</span><br><span class="line"></span><br><span class="line">        // 获得加密后的字符串可与signature对比，验证标识该请求来源于微信服务器</span><br><span class="line">        <span class="keyword">if</span> (shaStr === signature.toUpperCase()) &#123;</span><br><span class="line">        // 确认此次GET请求来自微信服务器，请原样返回echostr参数内容，则接入生效</span><br><span class="line">        // ctx.body = echostr;</span><br><span class="line">        // <span class="built_in">return</span></span><br><span class="line">            // const now = Date.parse(new Date()) / 1000;</span><br><span class="line">            // ctx.type = <span class="string">'application/xml'</span>;</span><br><span class="line">            // const reply = `&lt;xml&gt;</span><br><span class="line">            //                       &lt;ToUserName&gt;&lt;![CDATA[<span class="variable">$&#123;message.FromUserName&#125;</span>]]&gt;&lt;/ToUserName&gt;</span><br><span class="line">            //                       &lt;FromUserName&gt;&lt;![CDATA[<span class="variable">$&#123;message.ToUserName&#125;</span>]]&gt;&lt;/FromUserName&gt;</span><br><span class="line">            //                       &lt;CreateTime&gt;<span class="variable">$&#123;now&#125;</span>&lt;/CreateTime&gt;</span><br><span class="line">            //                       &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</span><br><span class="line">            //                       &lt;Content&gt;&lt;![CDATA[正在为你联系管理员,请稍后]]&gt;&lt;/Content&gt;</span><br><span class="line">            //                   &lt;/xml&gt;`;</span><br><span class="line">            // ctx.body = reply;</span><br><span class="line">            </span><br><span class="line">            ctx.body = <span class="string">'success'</span>;</span><br><span class="line"></span><br><span class="line">            // 由于微信消息要5秒内回复 所以使用异步 先返回后处理消息 自定义处理</span><br><span class="line">            // WXService.wxMessage(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 否则接入失败。</span><br><span class="line">            ctx.body = <span class="string">'no'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>// 消息中增加打开小程序（必须是公众号关联的小程序）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// data-miniprogram-appid 是小程序appid</span><br><span class="line">// data-miniprogram-path 是小程序页面路径</span><br><span class="line"> ctx.type = <span class="string">'application/xml'</span>;</span><br><span class="line">                const reply = `&lt;xml&gt;</span><br><span class="line">                                    &lt;ToUserName&gt;&lt;![CDATA[<span class="variable">$&#123;message.FromUserName&#125;</span>]]&gt;&lt;/ToUserName&gt;</span><br><span class="line">                                    &lt;FromUserName&gt;&lt;![CDATA[<span class="variable">$&#123;message.ToUserName&#125;</span>]]&gt;&lt;/FromUserName&gt;</span><br><span class="line">                                    &lt;CreateTime&gt;<span class="variable">$&#123;now&#125;</span>&lt;/CreateTime&gt;</span><br><span class="line">                                    &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</span><br><span class="line">                                    &lt;Content&gt;&lt;![CDATA[hi，亲爱的老师，终于等到你~</span><br><span class="line">  </span><br><span class="line">欢迎加入bobo老师大家庭！在这里，您可以和众多有趣又靠谱的老师一起快乐成长！</span><br><span class="line">  </span><br><span class="line">作为专业的老师线上兼职创业平台，bobo老师将为您提供全方位的包装和优质的服务。赶紧加入吧，再晚连“知识付费的末班车”都赶不上喽！</span><br><span class="line">  </span><br><span class="line">点击下方菜单栏“我是老师”，马上进入小程序</span><br><span class="line">&lt;a data-miniprogram-appid=<span class="string">""</span> data-miniprogram-path=<span class="string">"pages/course/course"</span> href=<span class="string">"http://www.qq.com"</span>&gt;“bobo老师服务中心”&lt;/a&gt;，</span><br><span class="line">注册成功后，就可以上传课程的视频啦。</span><br><span class="line">                                    ]]&gt;&lt;/Content&gt;</span><br><span class="line">                                &lt;/xml&gt;`;</span><br><span class="line">                ctx.body = reply;</span><br></pre></td></tr></table></figure><p>第一次默认返回echostr 使得消息推送提交成功</p><p>之后如果没有其他可用默认返回 success字符串</p><ul><li>注意：</li></ul><ol><li>最好不用使用http</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>form表单中在input内回车关闭自动触发button</title>
      <link href="form%E8%A1%A8%E5%8D%95%E4%B8%AD%E5%9C%A8input%E5%86%85%E5%9B%9E%E8%BD%A6%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91button/"/>
      <url>form%E8%A1%A8%E5%8D%95%E4%B8%AD%E5%9C%A8input%E5%86%85%E5%9B%9E%E8%BD%A6%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91button/</url>
      
        <content type="html"><![CDATA[<ol><li>在IE中有一个现象，当你在input内敲回车时，IE会自动寻找第一个button标签并且触发它</li></ol><p>解决方法：</p><p>以上代码在input回车仍然会找到button1并执行onclick事件，如果要隐藏它，但又能保持劫持input回车事件的功能，可以在form表单中最上面加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button style=<span class="string">"display:none"</span> /&gt;</span><br></pre></td></tr></table></figure><p>这样就相当于把button隐藏了，并且还保住了功能，如果嫌麻烦可以直接把button改成input[type=button]或者使用a标签代替！</p><p><a href="https://www.qttc.net/393-ie-enter-trigger-button-click.html" target="_blank" rel="external nofollow noopener noreferrer">IE在input内回车关闭自动触发button</a></p><ol start="2"><li>input按enter键 刷新form表单</li></ol><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;i-Form</span><br><span class="line">    class=<span class="string">"face-creat-form"</span></span><br><span class="line">    onsubmit=<span class="string">"return false;"</span></span><br><span class="line">  &gt;</span><br><span class="line">&lt;/i-Form&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> iviewui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js下载视频到本地</title>
      <link href="js%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
      <url>js%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 在vue 中可以直接使用</span><br><span class="line">handleDownLoad(&#123; url &#125;) &#123;</span><br><span class="line">      fetch(url).<span class="keyword">then</span>(res =&gt; res.blob().<span class="keyword">then</span>(blob =&gt; &#123;</span><br><span class="line">        var a = document.createElement(<span class="string">'a'</span>)</span><br><span class="line">        var blobUrl = window.URL.createObjectURL(blob)</span><br><span class="line">        var filename = url</span><br><span class="line">        a.href = blobUrl</span><br><span class="line">        a.download = filename</span><br><span class="line">        a.click()</span><br><span class="line">        window.URL.revokeObjectURL(blobUrl)</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node防xss攻击插件,用于富文本过滤脚本</title>
      <link href="node%E9%98%B2xss%E6%94%BB%E5%87%BB%E6%8F%92%E4%BB%B6-%E7%94%A8%E4%BA%8E%E5%AF%8C%E6%96%87%E6%9C%AC%E8%BF%87%E6%BB%A4%E8%84%9A%E6%9C%AC/"/>
      <url>node%E9%98%B2xss%E6%94%BB%E5%87%BB%E6%8F%92%E4%BB%B6-%E7%94%A8%E4%BA%8E%E5%AF%8C%E6%96%87%E6%9C%AC%E8%BF%87%E6%BB%A4%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"><span class="built_in">let</span> xss = require(<span class="string">'node-xss'</span>).clean;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> html = <span class="string">"&lt;script&gt;alert('弹弹弹')&lt;/script&gt;&lt;p&gt;123&lt;/p&gt;"</span>;</span><br><span class="line">(() =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> params = xss(html);</span><br><span class="line"></span><br><span class="line">    console.log(params); // [removed]alert&amp;<span class="comment">#40;'弹弹弹'&amp;#41;[removed]&lt;p&gt;123&lt;/p&gt;</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode连接不了服务器</title>
      <link href="VSCode%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%BA%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>VSCode%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%BA%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>VSCode连接服务器提示“could not establish connection to “xxx”.Connecting was canceled.”解决办法</p><p>解决办法：</p><p>1.更新本地以及服务器端VSCode至最新版本</p><p>2.删除服务器上的.vscode-server文件夹 (ls -la)</p><p><img src="https://img-blog.csdnimg.cn/20200604151821920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka消息队列</title>
      <link href="kafka%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>kafka%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消息。</p><h2 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull mesoscloud/zookeeper:3.4.8</span><br><span class="line"></span><br><span class="line">docker run -p 2181:2181 \</span><br><span class="line">--name zookeeper \</span><br><span class="line">-v /data/docker/zookeeper/conf:/opt/zookeeper/conf \</span><br><span class="line">-v /data/docker/zookeeper/data:/tmp/zookeeper \</span><br><span class="line">-d mesoscloud/zookeeper:3.4.8</span><br></pre></td></tr></table></figure><h2 id="kafka安装"><a href="#kafka安装" class="headerlink" title="kafka安装"></a>kafka安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker pull wurstmeister/kafka:2.11-2.0.0</span><br><span class="line"></span><br><span class="line">192.168.10.160 dev服务器ip</span><br><span class="line"></span><br><span class="line">docker run  -d --name kafka \</span><br><span class="line">-p 9092:9092 \</span><br><span class="line">-e KAFKA_BROKER_ID=0 \</span><br><span class="line">-v /data/docker/kafka/logs:/opt/kafka_2.11-2.0.0/logs \</span><br><span class="line">-e KAFKA_ZOOKEEPER_CONNECT=192.168.10.160:2181 \</span><br><span class="line">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.10.160:9092 \</span><br><span class="line">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \</span><br><span class="line">-d wurstmeister/kafka:2.11-2.0.0</span><br></pre></td></tr></table></figure><h2 id="nodejs-使用"><a href="#nodejs-使用" class="headerlink" title="nodejs 使用"></a>nodejs 使用</h2><p>yarn add kafka-node</p><h2 id="Kafka的优势"><a href="#Kafka的优势" class="headerlink" title="Kafka的优势"></a>Kafka的优势</h2><p>   <strong>高吞吐量、低延迟</strong>：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒；</p><p>   <strong>可扩展性</strong>：kafka集群支持热扩展；</p><p>   <strong>持久性</strong>、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失；</p><p>   <strong>容错性</strong>：允许集群中节点故障（若副本数量为n,则允许n-1个节点故障）；</p><p>   <strong>高并发</strong>：支持数千个客户端同时读写。</p><h2 id="Kafka适合以下应用场景"><a href="#Kafka适合以下应用场景" class="headerlink" title="Kafka适合以下应用场景"></a>Kafka适合以下应用场景</h2><p><strong>日志收集</strong>：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer；</p><p> <strong>消息系统</strong>：解耦生产者和消费者、缓存消息等；</p><p> <strong>用户活动跟踪</strong>：kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后消费者通过订阅这些topic来做实时的监控分析，亦可保存到数据库；</p><p><strong>运营指标</strong>：kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告；</p><p><strong>流式处理</strong>：比如spark streaming和storm。</p><h2 id="与常用Message-Queue对比"><a href="#与常用Message-Queue对比" class="headerlink" title="与常用Message Queue对比"></a>与常用Message Queue对比</h2><p>1.<strong>RabbitMQ</strong></p><p>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</p><p>2.<strong>Redis</strong></p><p>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p><p>3.<strong>ZeroMQ</strong></p><p>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZeroMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演这个服务器角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</p><p>4.<strong>ActiveMQ</strong></p><p>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</p><p>5.<strong>Kafka/Jafka</strong></p><p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现负载均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。</p><h2 id="Kafka-缺点"><a href="#Kafka-缺点" class="headerlink" title="Kafka 缺点"></a>Kafka 缺点</h2><ol><li>由于是批量发送，数据并非真正的实时；</li><li>对于mqtt协议不支持；</li><li>不支持物联网传感数据直接接入；</li><li>仅支持统一分区内消息有序，无法实现全局消息有序；</li><li>监控不完善，需要安装插件；</li><li>依赖zookeeper进行元数据管理；</li></ol><h2 id="配置日志自动删除"><a href="#配置日志自动删除" class="headerlink" title="配置日志自动删除"></a>配置日志自动删除</h2><p>docker exec -it kafka bash<br>cd /opt/kafka_2.11-2.0.0/config<br>vi server.properties</p><p>修改时间</p><blockquote><p>log.retention.hours=1</p></blockquote><p>修改大小</p><blockquote><p>log.retention.bytes=1048576</p></blockquote><p>设置</p><blockquote><p>log.segment.bytes=10240</p></blockquote><p>添加设置</p><blockquote><p>log.cleanup.policy=delete</p></blockquote><p>按照这个配置文件，只保存一小时的日志和大小不超过1M，当有一个条件满足，就触发删除日志操作。log.segment.bytes=10240表示每个文件的大小不超过10K。</p><p>目前只是设置了时间3天删除日志</p><p><img src="https://img-blog.csdnimg.cn/20200526143713472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>发送者<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"><span class="built_in">let</span> kafka = require(<span class="string">'kafka-node'</span>),</span><br><span class="line">    Producer = kafka.Producer,</span><br><span class="line">    // KeyedMessage = kafka.KeyedMessage,</span><br><span class="line">    client = new kafka.KafkaClient(&#123; <span class="string">'kafkaHost'</span>: <span class="string">'127.0.0.1:9092'</span> &#125;),</span><br><span class="line">    producer = new Producer(client),</span><br><span class="line">    // km = new KeyedMessage(<span class="string">'key'</span>, <span class="string">'message'</span>),</span><br><span class="line">    payloads = [</span><br><span class="line">        &#123; <span class="string">'topic'</span>: <span class="string">'topic2'</span>, <span class="string">'messages'</span>: JSON.stringify(&#123;</span><br><span class="line">            <span class="string">'key'</span>: <span class="string">'test'</span>,</span><br><span class="line">        &#125;), <span class="string">'partition'</span>: 0 &#125;, // 发送一条消息</span><br><span class="line">    // &#123; <span class="string">'topic'</span>: <span class="string">'topic2'</span>, <span class="string">'messages'</span>: [ <span class="string">'hello'</span>, <span class="string">'world'</span>, km ] &#125;, // 同时发送多条消息</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    // 生产者</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    producer.on(<span class="string">'ready'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        producer.send(payloads, <span class="keyword">function</span>(err, data) &#123;</span><br><span class="line">            console.log(<span class="string">'data===============&gt;'</span>, data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    producer.on(<span class="string">'error'</span>, <span class="keyword">function</span>(err) &#123; &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li>接收者<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"><span class="built_in">let</span> kafka = require(<span class="string">'kafka-node'</span>),</span><br><span class="line">    Consumer = kafka.Consumer,</span><br><span class="line">    client = new kafka.KafkaClient(&#123; <span class="string">'kafkaHost'</span>: <span class="string">'127.0.0.1:9092'</span> &#125;);</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> options = &#123;</span><br><span class="line">        <span class="string">'groupId'</span>: <span class="string">'kafka-node-group'</span>, // 消费者组ID，默认为`kafka-node-group`</span><br><span class="line">        <span class="string">'autoCommit'</span>: <span class="literal">true</span>, // 自动提交配置</span><br><span class="line">        <span class="string">'autoCommitIntervalMs'</span>: 5000,</span><br><span class="line">        // 最大等待时间是发出请求时没有足够数据时阻止等待的最长时间（以毫秒为单位），默认为100ms</span><br><span class="line">        <span class="string">'fetchMaxWaitMs'</span>: 100,</span><br><span class="line">        // 这是给出响应所必需的消息的最小字节数，默认为1字节</span><br><span class="line">        <span class="string">'fetchMinBytes'</span>: 1,</span><br><span class="line">        // 要包含在此分区的消息集中的最大字节。这有助于限制响应的大小。</span><br><span class="line">        <span class="string">'fetchMaxBytes'</span>: 1024 * 1024,</span><br><span class="line">        // 如果设置为<span class="literal">true</span>，则消费者将从有效负载中的给定偏移量获取消息</span><br><span class="line">        <span class="string">'fromOffset'</span>: <span class="literal">false</span>,</span><br><span class="line">        // 如果设置为<span class="string">'buffer'</span>，则值将作为原始缓冲区对象返回。</span><br><span class="line">        <span class="string">'encoding'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">        <span class="string">'keyEncoding'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">let</span> consumer = new Consumer(</span><br><span class="line">        client,</span><br><span class="line">        [</span><br><span class="line">            &#123; <span class="string">'topic'</span>: <span class="string">'topic2'</span>, <span class="string">'partition'</span>: 0 &#125;,</span><br><span class="line">        ],</span><br><span class="line">        &#123;</span><br><span class="line">            //  自动提交配置   (<span class="literal">false</span> 不会提交偏移量，每次都从头开始读取)</span><br><span class="line">            <span class="string">'autoCommit'</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">'autoCommitIntervalMs'</span>: 5000,</span><br><span class="line">            //  如果设置为<span class="literal">true</span>，则consumer将从有效负载中的给定偏移量中获取消息</span><br><span class="line">            <span class="string">'fromOffset'</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    consumer.on(<span class="string">'message'</span>, <span class="keyword">function</span>(message) &#123;</span><br><span class="line">        console.log(message);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 关闭接收订阅消息</span><br><span class="line">    // consumer.close(<span class="literal">true</span>, <span class="keyword">function</span>(e) &#123;</span><br><span class="line">    //     console.log(e);</span><br><span class="line">    // &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ol><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="http://kafka.apache.org/project" target="_blank" rel="external nofollow noopener noreferrer">kafka</a></p><p><a href="https://www.npmjs.com/package/kafka-node" target="_blank" rel="external nofollow noopener noreferrer">kafka-node</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> kafka-node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa-ratelimit访问频率限制</title>
      <link href="koa-ratelimit%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87%E9%99%90%E5%88%B6/"/>
      <url>koa-ratelimit%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">const ratelimit = require(<span class="string">'koa-ratelimit'</span>);</span><br><span class="line">const Redis = require(<span class="string">'ioredis'</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(ratelimit(&#123;</span><br><span class="line">    <span class="string">'driver'</span>: <span class="string">'redis'</span>,</span><br><span class="line">    <span class="string">'db'</span>: new Redis(&#123;</span><br><span class="line">        <span class="string">'max_clients'</span>: 10,</span><br><span class="line">        <span class="string">'min_clients'</span>: 1,</span><br><span class="line">        <span class="string">'port'</span>: 6379,</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'1234567'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">'duration'</span>: 60000,</span><br><span class="line">    <span class="string">'errorMessage'</span>: <span class="string">'Sometimes You Just Have to Slow Down.'</span>,</span><br><span class="line">    <span class="string">'id'</span>: ctx =&gt; ctx.ip,</span><br><span class="line">    <span class="string">'headers'</span>: &#123;</span><br><span class="line">        <span class="string">'remaining'</span>: <span class="string">'Rate-Limit-Remaining'</span>,</span><br><span class="line">        <span class="string">'reset'</span>: <span class="string">'Rate-Limit-Reset'</span>,</span><br><span class="line">        <span class="string">'total'</span>: <span class="string">'Rate-Limit-Total'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'max'</span>: 5, // 60秒内最大访问次数5</span><br><span class="line">    <span class="string">'disableHeader'</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">'whitelist'</span>: ctx =&gt; &#123;</span><br><span class="line">        // console.log(<span class="string">'whitelist===========&gt;'</span>, ctx);</span><br><span class="line">    // some logic that returns a boolean</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'blacklist'</span>: ctx =&gt; &#123;</span><br><span class="line">        // console.log(<span class="string">'blacklist===========&gt;'</span>, ctx);</span><br><span class="line">    // some logic that returns a boolean</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'Stuff!'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br><span class="line">console.log(<span class="string">'listening on port 3000'</span>);</span><br><span class="line"></span><br><span class="line">访问 http://127.0.0.1:3000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> koa-ratelimit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT数据加密</title>
      <link href="JWT%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/"/>
      <url>JWT%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 登录加密</span><br><span class="line">const jwt = require(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    // 加密</span><br><span class="line">    const token = jwt.sign(&#123; <span class="string">'foo'</span>: <span class="string">'bar'</span> &#125;, <span class="string">'test_123'</span>, &#123; <span class="string">'expiresIn'</span>: <span class="string">'2 days'</span> &#125;);</span><br><span class="line">    console.log(token);</span><br><span class="line">    const token1 = jwt.sign(&#123; <span class="string">'foo'</span>: <span class="string">'bar'</span> &#125;, <span class="string">'test_123'</span>, &#123; <span class="string">'expiresIn'</span>: <span class="string">'1h'</span> &#125;);</span><br><span class="line">    console.log(token1);</span><br><span class="line">    console.log(token1 === token);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        const data = jwt.verify(token, <span class="string">'test_123'</span>);</span><br><span class="line">        console.log(data);</span><br><span class="line">        <span class="built_in">let</span> &#123; exp, iat &#125; = data;</span><br><span class="line">        console.log(exp - iat);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(<span class="string">'error=============&gt;'</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="JWT-简介"><a href="#JWT-简介" class="headerlink" title="JWT 简介"></a>JWT 简介</h2><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p><p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p><p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p><p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p><p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p><p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的发布订阅</title>
      <link href="redis%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>redis%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是发布订阅"><a href="#什么是发布订阅" class="headerlink" title="什么是发布订阅"></a>什么是发布订阅</h2><p>所谓发布订阅，就是消息发布者发布消息及消息订阅者接收消息，二者通过某种媒介关联起来。这类似以前的『订报』，当我们订阅了某种报纸后（比如财经报），每当报纸有新的期刊出版后，就会有邮递员给我们送过来。即，只有定了这种报纸才会收到出版社发布的这种新报纸。</p><p>上述的『某种报纸』就抽象为频道channel，客户端订阅了某channel后，当发布者通过此channel发布消息时，所有订阅者就会收到该频道发布的消息。</p><blockquote><p>发布和订阅机制</p><p>当一个客户端通过 PUBLISH 命令向订阅者发送信息的时候，我们称这个客户端为发布者(publisher)。</p><p>而当一个客户端使用 SUBSCRIBE 或者 PSUBSCRIBE命令接收信息的时候，我们称这个客户端为订阅者(subscriber)。</p><p>为了解耦发布者(publisher)和订阅者(subscriber)之间的关系，Redis 使用了 channel (频道)作为两者的中介<br>—— 发布者将信息直接发布给 channel ，而 channel<br>负责将信息发送给适当的订阅者，发布者和订阅者之间没有相互关系，也不知道对方的存在。</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解。</p><p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p><p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 channel ，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定 channel 的订阅链表中。</p><p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm install ioredis</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">const Redis = require(<span class="string">'ioredis'</span>);</span><br><span class="line">const conf = &#123;</span><br><span class="line">    <span class="string">'max_clients'</span>: 10,</span><br><span class="line">    <span class="string">'min_clients'</span>: 1,</span><br><span class="line">    <span class="string">'port'</span>: 6379,</span><br><span class="line">    <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'123'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">//</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    const sub = new Redis(conf);</span><br><span class="line">    const pub = new Redis(conf);</span><br><span class="line"></span><br><span class="line">    // 消息推送</span><br><span class="line">    pub.publish(<span class="string">'modules'</span>, JSON.stringify(&#123;</span><br><span class="line">        <span class="string">'key'</span>: <span class="string">'ShortLink2'</span>,</span><br><span class="line">        <span class="string">'message'</span>: <span class="string">'測試'</span>,</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    // 消息接收</span><br><span class="line">    sub.subscribe([ <span class="string">'modules'</span> ], <span class="keyword">function</span>(err, count) &#123;</span><br><span class="line">        sub.on(<span class="string">'message'</span>, <span class="keyword">function</span>(channel, message) &#123;</span><br><span class="line">            console.log(<span class="string">'channel'</span>, channel);</span><br><span class="line">            console.log(<span class="string">'message'</span>, message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/ioredis" target="_blank" rel="external nofollow noopener noreferrer">ioredis</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-schedule定时器</title>
      <link href="node-schedule%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>node-schedule%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>定时导出某些数据、定时发送消息或邮件给用户、定时备份什么类型的文件等等</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm install node-schedule</p><h2 id="Cron风格定时器"><a href="#Cron风格定时器" class="headerlink" title="Cron风格定时器"></a>Cron风格定时器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">通配符解释</span><br><span class="line">*  *  *  *  *  *</span><br><span class="line">┬ ┬ ┬ ┬ ┬ ┬</span><br><span class="line">│ │ │ │ │  |</span><br><span class="line">│ │ │ │ │ └ day of week (0 - 7) (0 or 7 is Sun)</span><br><span class="line">│ │ │ │ └───── month (1 - 12)</span><br><span class="line">│ │ │ └────────── day of month (1 - 31)</span><br><span class="line">│ │ └─────────────── hour (0 - 23)</span><br><span class="line">│ └──────────────────── minute (0 - 59)</span><br><span class="line">└───────────────────────── second (0 - 59, OPTIONAL)</span><br><span class="line"></span><br><span class="line">6个占位符从左到右分别代表：秒、分、时、日、月、周几</span><br><span class="line"></span><br><span class="line"><span class="string">'*'</span>表示通配符，匹配任意，当秒是<span class="string">'*'</span>时，表示任意秒数都触发，其它类推</span><br><span class="line"></span><br><span class="line">下面可以看看以下传入参数分别代表的意思</span><br><span class="line">每分钟的第30秒触发： <span class="string">'30 * * * * *'</span></span><br><span class="line"></span><br><span class="line">每小时的1分30秒触发 ：<span class="string">'30 1 * * * *'</span></span><br><span class="line"></span><br><span class="line">每天的凌晨1点1分30秒触发 ：<span class="string">'30 1 1 * * *'</span></span><br><span class="line"></span><br><span class="line">每月的1日1点1分30秒触发 ：<span class="string">'30 1 1 1 * *'</span></span><br><span class="line"></span><br><span class="line">2016年的1月1日1点1分30秒触发 ：<span class="string">'30 1 1 1 2016 *'</span></span><br><span class="line"></span><br><span class="line">每周1的1点1分30秒触发 ：<span class="string">'30 1 1 * * 1'</span></span><br><span class="line"></span><br><span class="line">    schedule.scheduleJob(<span class="string">'30 * * * * *'</span>, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">'scheduleCronstyle:'</span> + new Date());</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="Cron风格定时器-范围触发"><a href="#Cron风格定时器-范围触发" class="headerlink" title="Cron风格定时器-范围触发"></a>Cron风格定时器-范围触发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">schedule.scheduleJob(<span class="string">'1-10 * * * * *'</span>, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">'scheduleCronstyle:'</span> + new Date());</span><br><span class="line">&#125;); </span><br><span class="line">每分钟的1-10秒都会触发</span><br></pre></td></tr></table></figure><h2 id="递归规则定时器"><a href="#递归规则定时器" class="headerlink" title="递归规则定时器"></a>递归规则定时器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> rule = new schedule.RecurrenceRule();</span><br><span class="line">// rule.dayOfWeek = 2;</span><br><span class="line">// rule.month = 3;</span><br><span class="line">// rule.dayOfMonth = 1;</span><br><span class="line">// rule.hour = 1;</span><br><span class="line">// rule.minute = 42;</span><br><span class="line">rule.second = 0;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> j = schedule.scheduleJob(rule, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">   console.log(<span class="string">'scheduleRecurrenceRule:'</span> + new Date());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>每十分钟执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> rule = new schedule.RecurrenceRule();</span><br><span class="line">rule.minute = [ 0, 10, 20, 30, 40, 59 ];</span><br><span class="line"><span class="built_in">let</span> j = schedule.scheduleJob(rule, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  console.log(<span class="string">'scheduleRecurrenceRule:'</span> + new Date());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><p><code>rule</code>支持设置的值有<code>second</code>、<code>minute</code>、<code>hour</code>、<code>date</code>、<code>dayOfWeek</code>、<code>month</code>、<code>year</code>等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const schedule = require(<span class="string">'node-schedule'</span>);</span><br><span class="line"> </span><br><span class="line">// 定义规则</span><br><span class="line"><span class="built_in">let</span> rule = new schedule.RecurrenceRule();</span><br><span class="line">rule.minute = [0, 10, 20, 30, 40, 50]; // 每隔 10 分钟执行一次</span><br><span class="line"> rule.second = 0;</span><br><span class="line"></span><br><span class="line">// 启动任务</span><br><span class="line"><span class="built_in">let</span> job = schedule.scheduleJob(rule, () =&gt; &#123;</span><br><span class="line"> console.log(new Date());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>每小时 30 分执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rule.minute = 30;</span><br><span class="line">rule.second = 0;</span><br></pre></td></tr></table></figure><p>每天 0 点执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rule.hour =0;</span><br><span class="line">rule.minute =0;</span><br><span class="line">rule.second =0;</span><br></pre></td></tr></table></figure><p>每月 1 号的 10 点执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rule.date = 1;</span><br><span class="line">rule.hour = 10;</span><br><span class="line">rule.minute = 0;</span><br><span class="line">rule.second = 0;</span><br></pre></td></tr></table></figure><p>每周一、周三、周五的 0 点和 12 点执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rule.dayOfWeek = [1,3,5];</span><br><span class="line">rule.hour = [0,12];</span><br><span class="line">rule.minute = 0;</span><br><span class="line">rule.second = 0;</span><br></pre></td></tr></table></figure><h2 id="取消定时器"><a href="#取消定时器" class="headerlink" title="取消定时器"></a>取消定时器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j.cancel();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node-schedule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsCode开发常用配置</title>
      <link href="VSCode%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>VSCode%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在 settings.json 中写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Program Files\\Git\\bin\\bash.exe"</span>, <span class="comment">#把控制界面设置成git命令输入界面</span></span><br><span class="line">    <span class="string">"git.path"</span>: <span class="string">"C:\\Program Files\\Git\\bin\\git.exe"</span>, <span class="comment"># vscode 集成git</span></span><br><span class="line">    <span class="string">"gitlens.advanced.messages"</span>: &#123;</span><br><span class="line">        <span class="string">"suppressGitVersionWarning"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"editor.codeActionsOnSave"</span>: &#123;<span class="comment"># eslint 保存自动格式化</span></span><br><span class="line">        <span class="string">"source.fixAll.eslint"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"explorer.confirmDelete"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"remote.SSH.remotePlatform"</span>: &#123;</span><br><span class="line">        <span class="string">"tri"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="string">"klover"</span>: <span class="string">"linux"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"workbench.list.openMode"</span>: <span class="string">"doubleClick"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1. 好用的vscode 插件</span><br><span class="line">eslint</span><br><span class="line">Git supercharged <span class="comment">#git日志显示</span></span><br><span class="line">Remote Development <span class="comment">#vscode远程操作</span></span><br><span class="line">Code Spell Checker <span class="comment"># 驼峰命名错误 提示</span></span><br><span class="line">Chinese (Simplified) (简体中文) Language Pack <span class="keyword">for</span> Visual Studio Code</span><br><span class="line">Prettier - Code formatter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue</span><br><span class="line">Vetur</span><br></pre></td></tr></table></figure><ol start="2"><li><p>jest 的使用<br>安装 vscode 插件 Jest Runner</p><p>在 package.json 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jest"</span>: &#123;</span><br><span class="line"> <span class="string">"moduleFileExtensions"</span>: [</span><br><span class="line">   <span class="string">"js"</span>,</span><br><span class="line">   <span class="string">"json"</span>,</span><br><span class="line">   <span class="string">"ts"</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="string">"rootDir"</span>: <span class="string">"."</span>,</span><br><span class="line"> <span class="string">"testRegex"</span>: <span class="string">".spec.ts$"</span>,</span><br><span class="line"> <span class="string">"transform"</span>: &#123;</span><br><span class="line">   <span class="string">"^.+\\.(t|j)s$"</span>: <span class="string">"ts-jest"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"coverageDirectory"</span>: <span class="string">"./coverage"</span>,</span><br><span class="line"> <span class="string">"testEnvironment"</span>: <span class="string">"node"</span>,</span><br><span class="line"> <span class="string">"roots"</span>: [</span><br><span class="line">   <span class="string">"&lt;rootDir&gt;/test/"</span>,</span><br><span class="line">   <span class="string">"&lt;rootDir&gt;/libs/"</span></span><br><span class="line"> ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>注意：</code>“roots” 下配置你 spec.ts 文件所在的位置 不然无效</p><p>配置好 就会如下显示<br><img src="https://img-blog.csdnimg.cn/951b9ab1fddf47f69f4df611587f21e5.png" alt="在这里插入图片描述"></p></li></ol><h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><ol><li>由于服务器出现问题 更换了服务器但是 ip 没有更换 导致 vscode 连接远程报</li></ol><p>(1)ssh hostname 或报下面错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-<span class="keyword">in</span>-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:sl+TVt6TNVzIBfCBuTEP/ylD9VmnVTjYncZjnDaMUSU.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key <span class="keyword">in</span> /c/Users/edz/.ssh/known_hosts to <span class="keyword">get</span> rid of this message.</span><br><span class="line">Offending ECDSA key in /c/Users/edz/.ssh/known_hosts:9</span><br><span class="line">ECDSA host key for 39.108.155.220 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure><p>(2) vscode 直接连接报<br><code>vscode could not establish connection to: XXXX.</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10鼠标右键拓展（使用vsCode打开文件）</title>
      <link href="win10%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%8B%93%E5%B1%95%EF%BC%88%E4%BD%BF%E7%94%A8vsCode%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%EF%BC%89/"/>
      <url>win10%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%8B%93%E5%B1%95%EF%BC%88%E4%BD%BF%E7%94%A8vsCode%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>打开一个文件夹的时候发现居然没有使用vs Code打开的选项<br>查找一番之后终于知道了原因：</p><p>软件安装的时候没有勾选相关的选项，具体见下图<br><img src="https://img-blog.csdnimg.cn/20200523172401944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>把以下代码复制到记事本，然后另存为后缀名为”.reg”的文件</li><li>双击执行刚刚保存的文件，会提示是否导入注册表，选择是，这是去资源管理器中邮件就会出现vs Code的相关选项啦</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode]</span><br><span class="line">@&#x3D;&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;&#x3D;&quot;D:\\local\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode\command]</span><br><span class="line">@&#x3D;&quot;\&quot;D:\\local\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode]</span><br><span class="line">@&#x3D;&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;&#x3D;&quot;D:\\local\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]</span><br><span class="line">@&#x3D;&quot;\&quot;D:\\local\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]</span><br><span class="line">@&#x3D;&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;&#x3D;&quot;D:\\local\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]</span><br><span class="line">@&#x3D;&quot;\&quot;D:\\local\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure><p> 注意：<br>“Icon” 代表菜单选项前面的ico图标<br>“@=” 后面的路径代表vs Code安装的路径，具体的路径需要根据自己的实际情况修改</p>]]></content>
      
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用postgreSQL计算距离</title>
      <link href="%E7%94%A8postgreSQL%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB/"/>
      <url>%E7%94%A8postgreSQL%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="选择–Cube-and-EarthDistance架构"><a href="#选择–Cube-and-EarthDistance架构" class="headerlink" title="选择–Cube and EarthDistance架构"></a>选择–Cube and EarthDistance架构</h2><p>CREATE EXTENSION cube;<br>CREATE EXTENSION earthdistance;  </p><h2 id="基于立方体的地球距离函数"><a href="#基于立方体的地球距离函数" class="headerlink" title="基于立方体的地球距离函数"></a>基于立方体的地球距离函数</h2><p><a href="https://www.postgresql.org/docs/8.3/earthdistance.html" target="_blank" rel="external nofollow noopener noreferrer">文档</a><br><img src="https://img-blog.csdnimg.cn/2020052114474460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li>计算2个坐标之间的距离</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT events.id events.name, eaerthdiatance(ll_to_earth(&#123;currentuserlat&#125;, &#123;currentuserlng&#125;), llto_earth(events.lat, events.lng))   </span><br><span class="line">as distancefromcurrentlocation FROM events   </span><br><span class="line">ORDER BY distancefromcurretnlocation ASC;</span><br></pre></td></tr></table></figure><ol start="2"><li>找到某个半径范围内的记录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT events.id, events.name FROM events   </span><br><span class="line">WHERE earth_box(&#123;currentuserlat&#125;, &#123;currentuserlng&#125;, &#123;radiusinmetres&#125;) @&gt; ll_to_earth(events.lat, events.lng);</span><br></pre></td></tr></table></figure><h2 id="提高查询速度"><a href="#提高查询速度" class="headerlink" title="提高查询速度"></a>提高查询速度</h2><p>你可能会发现上面的查询有不小的开销。最好对一些字段建立索引。 （下面这条语句假定你又events表， 同时events表有字段lat和lng）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX <span class="variable">$&#123;nameofindex&#125;</span> on events USING gits(lltoearth(lat, lng));</span><br></pre></td></tr></table></figure><p>以下代码来源：<a href="https://blog.csdn.net/wusuopubupt/article/details/21621477" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/wusuopubupt/article/details/21621477</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* postgreSQL之earthdistance学习笔记</span><br><span class="line">* author: wusuopubupt</span><br><span class="line">* date: 2013-03-31</span><br><span class="line">*/</span><br><span class="line"> </span><br><span class="line">/*创建表*/</span><br><span class="line">CREATE TABLE picture (</span><br><span class="line">  id serial PRIMARY KEY ,</span><br><span class="line">  p_uid char(12) NOT NULL,</span><br><span class="line">  p_key char(23) NOT NULL,</span><br><span class="line">  lat real not null,</span><br><span class="line">  lng real NOT NULL,</span><br><span class="line">  up int NOT NULL,</span><br><span class="line">  down int NOT NULL,</span><br><span class="line">  ip varchar(15) DEFAULT NULL,</span><br><span class="line">  address varchar(256) DEFAULT NULL</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">/*插入记录*/</span><br><span class="line">INSERT INTO picture(p_uid, p_key, lat, lng, up, down, ip, address) </span><br><span class="line">VALUES(<span class="string">'aaaabbbbcccc'</span>, <span class="string">'2014032008164023279.png'</span>, 40.043945, 116.413668, 0, 0, <span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line"> </span><br><span class="line">/*插入记录*/</span><br><span class="line">INSERT INTO picture(p_uid, p_key, lat, lng, up, down, ip, address) </span><br><span class="line">VALUES(<span class="string">'xxxxccccmmmm'</span>, <span class="string">'2014032008164023111.png'</span>, 40.067183, 116.415230, 0, 0, <span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line"> </span><br><span class="line">/*选择记录*/</span><br><span class="line">SELECT * FROM picture;</span><br><span class="line"> </span><br><span class="line">/*更新记录*/</span><br><span class="line">UPDATE picture SET address=<span class="string">'LiShuiqiao'</span> WHERE id=1;</span><br><span class="line">UPDATE picture SET address=<span class="string">'TianTongyuan'</span> WHERE id=2;</span><br><span class="line"> </span><br><span class="line">/*对经纬度列创建索引*/</span><br><span class="line">CREATE INDEX ll_idx on picture USING gist(ll_to_earth(lat, lng));</span><br><span class="line"> </span><br><span class="line">/*根据半径（1000米）选择记录*/</span><br><span class="line">SELECT * FROM picture <span class="built_in">where</span> earth_box(ll_to_earth(40.059286,116.418773),1000) @&gt; ll_to_earth(picture.lat, picture.lng); </span><br><span class="line"> </span><br><span class="line">/*选择距离当前用户的距离*/</span><br><span class="line">SELECT picture.id, earth_distance(ll_to_earth(picture.lat, picture.lng), ll_to_earth(40.059286,116.418773)) </span><br><span class="line">AS dis FROM picture </span><br><span class="line">ORDER BY dis ASC;</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line"> * 以下内容是网上的一篇教程</span><br><span class="line"> * 地址：http://www.cse.iitb.ac.in/dbms/Data/Courses/CS631/PostgreSQL-Resources/postgresql-9.2.4/contrib/earthdistance/expected/earthdistance.out</span><br><span class="line"> */</span><br><span class="line">--</span><br><span class="line">--  Test earthdistance extension</span><br><span class="line">--</span><br><span class="line">-- In this file we also <span class="keyword">do</span> some testing of extension create/drop scenarios.</span><br><span class="line">-- That<span class="string">'s really exercising the core database'</span>s dependency logic, so ideally</span><br><span class="line">-- we<span class="string">'d do it in the core regression tests, but we can'</span>t <span class="keyword">for</span> lack of suitable</span><br><span class="line">-- guaranteed-available extensions.  earthdistance is a good <span class="built_in">test</span> <span class="keyword">case</span> because</span><br><span class="line">-- it has a dependency on the cube extension.</span><br><span class="line">--</span><br><span class="line">CREATE EXTENSION earthdistance;  -- fail, must install cube first</span><br><span class="line">ERROR:  required extension <span class="string">"cube"</span> is not installed</span><br><span class="line">CREATE EXTENSION cube;</span><br><span class="line">CREATE EXTENSION earthdistance;</span><br><span class="line">--</span><br><span class="line">-- The radius of the Earth we are using.</span><br><span class="line">--</span><br><span class="line">SELECT earth()::numeric(20,5);</span><br><span class="line">     earth     </span><br><span class="line">---------------</span><br><span class="line"> 6378168.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Convert straight line distances to great circle distances.把直线距离转成大圆距离</span><br><span class="line">--</span><br><span class="line">SELECT (pi()*earth())::numeric(20,5);</span><br><span class="line">    numeric     </span><br><span class="line">----------------</span><br><span class="line"> 20037605.73216</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT sec_to_gc(0)::numeric(20,5);</span><br><span class="line"> sec_to_gc </span><br><span class="line">-----------</span><br><span class="line">   0.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Convert great circle distances to straight line distances.</span><br><span class="line">--</span><br><span class="line">SELECT gc_to_sec(0)::numeric(20,5);</span><br><span class="line"> gc_to_sec </span><br><span class="line">-----------</span><br><span class="line">   0.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT gc_to_sec(sec_to_gc(2*earth()))::numeric(20,5);</span><br><span class="line">   gc_to_sec    </span><br><span class="line">----------------</span><br><span class="line"> 12756336.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Set coordinates using latitude and longitude.</span><br><span class="line">-- Extract each coordinate separately so we can round them.</span><br><span class="line">--</span><br><span class="line">SELECT cube_ll_coord(ll_to_earth(0,0),1)::numeric(20,5),</span><br><span class="line"> cube_ll_coord(ll_to_earth(0,0),2)::numeric(20,5),</span><br><span class="line"> cube_ll_coord(ll_to_earth(0,0),3)::numeric(20,5);</span><br><span class="line"> cube_ll_coord | cube_ll_coord | cube_ll_coord </span><br><span class="line">---------------+---------------+---------------</span><br><span class="line"> 6378168.00000 |       0.00000 |       0.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT cube_ll_coord(ll_to_earth(360,360),1)::numeric(20,5),</span><br><span class="line"> cube_ll_coord(ll_to_earth(360,360),2)::numeric(20,5),</span><br><span class="line"> cube_ll_coord(ll_to_earth(360,360),3)::numeric(20,5);</span><br><span class="line"> cube_ll_coord | cube_ll_coord | cube_ll_coord </span><br><span class="line">---------------+---------------+---------------</span><br><span class="line"> 6378168.00000 |       0.00000 |       0.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Test getting the latitude of a location.</span><br><span class="line">--</span><br><span class="line">SELECT latitude(ll_to_earth(0,0))::numeric(20,10);</span><br><span class="line">   latitude   </span><br><span class="line">--------------</span><br><span class="line"> 0.0000000000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT latitude(ll_to_earth(45,0))::numeric(20,10);</span><br><span class="line">   latitude    </span><br><span class="line">---------------</span><br><span class="line"> 45.0000000000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Test getting the longitude of a location.</span><br><span class="line">--</span><br><span class="line">SELECT longitude(ll_to_earth(0,0))::numeric(20,10);</span><br><span class="line">  longitude   </span><br><span class="line">--------------</span><br><span class="line"> 0.0000000000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT longitude(ll_to_earth(45,0))::numeric(20,10);</span><br><span class="line">  longitude   </span><br><span class="line">--------------</span><br><span class="line"> 0.0000000000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- For the distance tests the following is some real life data.</span><br><span class="line">--</span><br><span class="line">-- Chicago has a latitude of 41.8 and a longitude of 87.6.</span><br><span class="line">-- Albuquerque has a latitude of 35.1 and a longitude of 106.7.</span><br><span class="line">-- (Note that latitude and longitude are specified differently</span><br><span class="line">-- <span class="keyword">in</span> the cube based <span class="built_in">functions</span> than <span class="keyword">for</span> the point based <span class="built_in">functions</span>.)</span><br><span class="line">--</span><br><span class="line">--</span><br><span class="line">-- Test getting the distance between two points using earth_distance.</span><br><span class="line">--</span><br><span class="line">SELECT earth_distance(ll_to_earth(0,0),ll_to_earth(0,0))::numeric(20,5);</span><br><span class="line"> earth_distance </span><br><span class="line">----------------</span><br><span class="line">        0.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT earth_distance(ll_to_earth(0,0),ll_to_earth(0,180))::numeric(20,5);</span><br><span class="line"> earth_distance </span><br><span class="line">----------------</span><br><span class="line"> 20037605.73216</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Test getting the distance between two points using geo_distance.</span><br><span class="line">--</span><br><span class="line">SELECT geo_distance(<span class="string">'(0,0)'</span>::point,<span class="string">'(0,0)'</span>::point)::numeric(20,5);</span><br><span class="line"> geo_distance </span><br><span class="line">--------------</span><br><span class="line">      0.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT geo_distance(<span class="string">'(0,0)'</span>::point,<span class="string">'(180,0)'</span>::point)::numeric(20,5);</span><br><span class="line"> geo_distance </span><br><span class="line">--------------</span><br><span class="line">  12436.77274</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Test getting the distance between two points using the &lt;@&gt; operator.</span><br><span class="line">--</span><br><span class="line">SELECT (<span class="string">'(0,0)'</span>::point &lt;@&gt; <span class="string">'(0,0)'</span>::point)::numeric(20,5);</span><br><span class="line"> numeric </span><br><span class="line">---------</span><br><span class="line"> 0.00000</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT (<span class="string">'(0,0)'</span>::point &lt;@&gt; <span class="string">'(180,0)'</span>::point)::numeric(20,5);</span><br><span class="line">   numeric   </span><br><span class="line">-------------</span><br><span class="line"> 12436.77274</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Test <span class="keyword">for</span> points that should be <span class="keyword">in</span> bounding boxes.</span><br><span class="line">--</span><br><span class="line">SELECT earth_box(ll_to_earth(0,0),</span><br><span class="line">       earth_distance(ll_to_earth(0,0),ll_to_earth(0,1))*1.00001) @&gt;</span><br><span class="line">       ll_to_earth(0,1);</span><br><span class="line"> ?column? </span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line">SELECT earth_box(ll_to_earth(0,0),</span><br><span class="line">       earth_distance(ll_to_earth(0,0),ll_to_earth(0,0.1))*1.00001) @&gt;</span><br><span class="line">       ll_to_earth(0,0.1);</span><br><span class="line"> ?column? </span><br><span class="line">----------</span><br><span class="line"> t</span><br><span class="line">(1 row)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--</span><br><span class="line">-- Test <span class="keyword">for</span> points that shouldn<span class="string">'t be in bounding boxes. Note that we need</span></span><br><span class="line"><span class="string">-- to make points way outside, since some points close may be in the box</span></span><br><span class="line"><span class="string">-- but further away than the distance we are testing.</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="string">SELECT earth_box(ll_to_earth(0,0),</span></span><br><span class="line"><span class="string">       earth_distance(ll_to_earth(0,0),ll_to_earth(0,1))*.57735) @&gt;</span></span><br><span class="line"><span class="string">       ll_to_earth(0,1);</span></span><br><span class="line"><span class="string"> ?column? </span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string"> f</span></span><br><span class="line"><span class="string">(1 row)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">SELECT earth_box(ll_to_earth(0,0),</span></span><br><span class="line"><span class="string">       earth_distance(ll_to_earth(0,0),ll_to_earth(0,0.1))*.57735) @&gt;</span></span><br><span class="line"><span class="string">       ll_to_earth(0,0.1);</span></span><br><span class="line"><span class="string"> ?column? </span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string"> f</span></span><br><span class="line"><span class="string">(1 row)</span></span><br></pre></td></tr></table></figure><h2 id="在sequelize-中的使用实例"><a href="#在sequelize-中的使用实例" class="headerlink" title="在sequelize 中的使用实例"></a>在sequelize 中的使用实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">let</span> <span class="built_in">where</span> = `(<span class="string">"orgs"</span>.<span class="string">"deletedAt"</span> &gt; now() OR <span class="string">"orgs"</span>.<span class="string">"deletedAt"</span> IS NULL)  AND  <span class="string">"orgs"</span>.<span class="string">"id"</span> IN (<span class="variable">$&#123;org_ids&#125;</span>) AND <span class="string">"orgs"</span>.<span class="string">"ncb"</span> = <span class="literal">true</span>  `;</span><br><span class="line">           </span><br><span class="line"><span class="built_in">let</span> teacherOrgList = await ctx.Models.query(`</span><br><span class="line">            SELECT <span class="string">"id"</span>, <span class="string">"hash"</span>, <span class="string">"logo"</span>, <span class="string">"city"</span>, <span class="string">"province"</span>, <span class="string">"area"</span>, <span class="string">"name"</span>, <span class="string">"address"</span>,<span class="string">"address_lat"</span>, <span class="string">"address_lng"</span>, earth_distance(ll_to_earth(orgs.address_lat, orgs.address_lng), ll_to_earth(<span class="variable">$&#123;lat&#125;</span>,<span class="variable">$&#123;lng&#125;</span>)) AS dis</span><br><span class="line">            FROM orgs</span><br><span class="line">            WHERE <span class="variable">$&#123;where&#125;</span></span><br><span class="line">            `, &#123;</span><br><span class="line">                <span class="string">'raw'</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'SELECT'</span>,</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>文档：<br><a href="http://www.postgres.cn/docs/10/index.html" target="_blank" rel="external nofollow noopener noreferrer">PostgreSQL 10.1 手册</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用__wxConfig.envVersion区分小程序体验版，开发板，正式版</title>
      <link href="%E7%94%A8-wxConfig-envVersion%E5%8C%BA%E5%88%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%93%E9%AA%8C%E7%89%88%EF%BC%8C%E5%BC%80%E5%8F%91%E6%9D%BF%EF%BC%8C%E6%AD%A3%E5%BC%8F%E7%89%88/"/>
      <url>%E7%94%A8-wxConfig-envVersion%E5%8C%BA%E5%88%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%93%E9%AA%8C%E7%89%88%EF%BC%8C%E5%BC%80%E5%8F%91%E6%9D%BF%EF%BC%8C%E6%AD%A3%E5%BC%8F%E7%89%88/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const envVersion = __wxConfig.envVersion</span><br><span class="line"></span><br><span class="line">envVersion 类型为字符串</span><br><span class="line"></span><br><span class="line">envVersion: <span class="string">'develop'</span>,    //开发版</span><br><span class="line"></span><br><span class="line">envVersion: <span class="string">'trial'</span>,      //体验版</span><br><span class="line"></span><br><span class="line">envVersion: <span class="string">'release'</span>,     //正式版</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub配置密钥</title>
      <link href="GitHub%E9%85%8D%E7%BD%AE%E5%AF%86%E9%92%A5/"/>
      <url>GitHub%E9%85%8D%E7%BD%AE%E5%AF%86%E9%92%A5/</url>
      
        <content type="html"><![CDATA[<p>在windows 电脑下生产公钥文件<br>ssh-keygen -t rsa -C MAIL，一路回车就行<br>(MAIL 处输入自己的邮箱号）</p><p>生产之后在用户.ssh目录下 打开 id_rsa.pub,复制里面的内容</p><ol><li>所有项目配置同一个公钥<br>登陆到自己的gitbub,点击右上角的倒立小三角形。选择 settings<br><img src="https://img-blog.csdnimg.cn/2020031716054754.png" alt="在这里插入图片描述"><br>选择SSH and GPG keys<br><img src="https://img-blog.csdnimg.cn/20200317160619158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p>点击右边的New SSH key 把复制的公钥文件复制进入</p><p>2.给其中一个项目添加公钥文件<br>点击自己其中一个项目，选择setting<br><img src="https://img-blog.csdnimg.cn/20200317161029478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择deploy key 点击add deploy key<br>复制公钥 名称随便起<br>保存就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置免密登陆自己的服务器</title>
      <link href="%E8%AE%BE%E7%BD%AE%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>%E8%AE%BE%E7%BD%AE%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<ol><li>使用密码登陆服务器<br>// root 是服务器名称 192.168.3.20是服务器ip</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i root@192.168.3.20</span><br></pre></td></tr></table></figure><p>//会提示你输入密码，成功之后 登陆服务器就不用在输入密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 免密登陆服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async.mapLimit控制并发数量</title>
      <link href="async-mapLimit%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91%E6%95%B0%E9%87%8F/"/>
      <url>async-mapLimit%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>async无论我们在哪里接受Node样式的回调函数，异步都接受函数。但是，我们不向它们传递回调，而是使用返回值并处理所有的Promise拒绝或引发的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const async = require(<span class="string">'async'</span>);</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    // 支持数组格式</span><br><span class="line">    <span class="built_in">let</span> list = [&#123;</span><br><span class="line">        <span class="string">'url'</span>: <span class="string">'1'</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">'url'</span>: <span class="string">'2'</span>,</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    //数字10是并发数量</span><br><span class="line">    async.mapLimit(list, 10, async item =&gt; &#123; // &lt;- no callback!</span><br><span class="line">        <span class="built_in">let</span> data = await toUrl(item);</span><br><span class="line">        <span class="built_in">return</span> data; // &lt;- <span class="built_in">return</span> a value!</span><br><span class="line">    &#125;, (err, contents) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) throw err;</span><br><span class="line">        console.log(contents);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">async <span class="keyword">function</span> toUrl(item) &#123;</span><br><span class="line"></span><br><span class="line">    // 。。。 写处理逻辑</span><br><span class="line">    console.log(item);</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'处理完成'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档来源：<a href="https://caolan.github.io/async/v3/" target="_blank" rel="external nofollow noopener noreferrer">https://caolan.github.io/async/v3/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装puppeteer缺少浏览器插件</title>
      <link href="centos%E5%AE%89%E8%A3%85puppeteer%E7%BC%BA%E5%B0%91%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
      <url>centos%E5%AE%89%E8%A3%85puppeteer%E7%BC%BA%E5%B0%91%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>当你启动chromeium时（推荐在服务器上测试的时候先进入到node_modules/puppeteer/.local-chromium/linux-496140/chrome-linux/chrome目录下执行./chrome进行测试，能成功运行代表通过puppeteer的api调用也能成功）你如果遇到例如：</p><p>error while loading shared libraries: libpangocairo-1.0.so.0: cannot open shared object file: No such file or directory</p><p>出现过运行Puppeteer时，报error while loading shared libraries:libpangocairo-1.0.so.0等依赖错误，可通过执行如下命令安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libX11 libXcomposite libXcursor libXdamage libXext libXi libXtst cups-libs libXScrnSaver libXrandr alsa-lib pango atk at-spi2-atk gtk3</span><br></pre></td></tr></table></figure><p>推荐看下：<a href="https://www.jianshu.com/p/ea8a557f6407" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/ea8a557f6407</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用yarn安装puppeteer等问题</title>
      <link href="%E4%BD%BF%E7%94%A8yarn%E5%AE%89%E8%A3%85puppeteer%E7%AD%89%E9%97%AE%E9%A2%98/"/>
      <url>%E4%BD%BF%E7%94%A8yarn%E5%AE%89%E8%A3%85puppeteer%E7%AD%89%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200303092537934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>处理方式 设置成淘宝镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> PUPPETEER_DOWNLOAD_HOST=https://npm.taobao.org/mirrors</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7防火墙常用命令</title>
      <link href="centos7%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>centos7%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>查看防火墙状态<br>firewall-cmd –state<br>没有就安装一个<br>yum install firewalld systemd -y<br>开启防火墙，命令：service firewalld  start<br>重启防火墙sudo systemctl reload firewalld</p></blockquote><blockquote><p>开放端口<br><code>firewall-cmd --zone=public --add-port=5672/tcp --permanent</code>   # 开放5672端口<br><code>firewall-cmd --reload</code>   # 配置立即生效</p></blockquote><blockquote><p>查看防火墙所有开放的端口<br><code>firewall-cmd --zone=public --list-ports</code></p></blockquote><blockquote><p>关闭防火墙<br>如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估<br>systemctl stop firewalld.service</p></blockquote><blockquote><p>添加http,https服务到firewalld,pemmanent表示永久生效，若不加–permanent系统下次启动后就会失效<br><code>sudo firewall-cmd --permanent --add-service=http</code><br><code>sudo firewall-cmd --permanent --add-service=https</code><br><code>firewall-cmd --reload</code>   # 配置立即生效</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS6,CentOS7防火墙的使用与配置</title>
      <link href="CentOS6-CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>CentOS6-CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><strong><em>Centos 7 firewall ：</em></strong></p><p>1.firewalld的基本使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动： systemctl start firewalld</span><br><span class="line">关闭： systemctl stop firewalld</span><br><span class="line">查看状态： systemctl status firewalld </span><br><span class="line">开机禁用  ： systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">开机启用  ： systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure><p>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">启动一个服务：systemctl start firewalld.service</span><br><span class="line">关闭一个服务：systemctl stop firewalld.service</span><br><span class="line">重启一个服务：systemctl restart firewalld.service</span><br><span class="line">显示一个服务的状态：systemctl status firewalld.service</span><br><span class="line">在开机时启用一个服务：systemctl <span class="built_in">enable</span> firewalld.service</span><br><span class="line">在开机时禁用一个服务：systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line">查看服务是否开机启动：systemctl is-enabled firewalld.service</span><br><span class="line">查看已启动的服务列表：systemctl list-unit-files|grep enabled</span><br><span class="line">查看启动失败的服务列表：systemctl --failed</span><br></pre></td></tr></table></figure><p>3.配置firewalld-cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">查看版本： firewall-cmd --version</span><br><span class="line">查看帮助： firewall-cmd --<span class="built_in">help</span></span><br><span class="line">显示状态： firewall-cmd --state</span><br><span class="line">查看所有打开的端口： firewall-cmd --zone=public --list-ports</span><br><span class="line">更新防火墙规则： firewall-cmd --reload</span><br><span class="line">查看区域信息:  firewall-cmd --get-active-zones</span><br><span class="line">查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0</span><br><span class="line">拒绝所有包：firewall-cmd --panic-on</span><br><span class="line">取消拒绝状态： firewall-cmd --panic-off</span><br><span class="line">查看是否拒绝： firewall-cmd --query-panic</span><br><span class="line"> </span><br><span class="line">那怎么开启一个端口呢</span><br><span class="line">添加</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</span><br><span class="line">重新载入</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">查看</span><br><span class="line">firewall-cmd --zone= public --query-port=80/tcp</span><br><span class="line">删除</span><br><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br><span class="line"> </span><br><span class="line">调整默认策略（默认拒绝所有访问，改成允许所有访问）：</span><br><span class="line">firewall-cmd --permanent --zone=public --<span class="built_in">set</span>-target=ACCEPT</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">对某个IP开放多个端口：</span><br><span class="line">firewall-cmd --permanent --add-rich-rule=<span class="string">"rule family="</span>ipv4<span class="string">" source address="</span>10.159.60.29<span class="string">" port protocol="</span>tcp<span class="string">" port="</span>1:65535<span class="string">" accept"</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong><em>CentOS6<br>CentOS 6 iptable：</em></strong><br>1.iptables的基本使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动： service iptables start</span><br><span class="line">关闭： service iptables stop</span><br><span class="line">查看状态： service iptables status</span><br><span class="line">开机禁用  ： chkconfig iptables off</span><br><span class="line">开机启用  ： chkconfig iptables on</span><br></pre></td></tr></table></figure><p>2.开放指定的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-A和-I参数分别为添加到规则末尾和规则最前面。</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许本地回环接口(即运行本机访问本机)</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="comment">#允许已建立的或相关连的通行</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"><span class="comment">#允许所有本机向外的访问</span></span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -A OUTPUT -j ACCEPT</span><br><span class="line"><span class="comment">#允许访问22端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp -s 10.159.1.0/24 --dport 22 -j ACCEPT   </span><br><span class="line">注：-s后可以跟IP段或指定IP地址</span><br><span class="line"><span class="comment">#允许访问80端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#允许FTP服务的21和20端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 20 -j ACCEPT</span><br><span class="line"><span class="comment">#如果有其他端口的话，规则也类似，稍微修改上述语句就行</span></span><br><span class="line"><span class="comment">#允许ping</span></span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"><span class="comment">#禁止其他未允许的规则访问</span></span><br><span class="line">iptables -A INPUT -j REJECT  <span class="comment">#（注意：如果22端口未加入允许规则，SSH链接会直接断开。）</span></span><br><span class="line">iptables -A FORWARD -j REJECT</span><br></pre></td></tr></table></figure><p>3.屏蔽IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果只是想屏蔽IP的话 “3、开放指定的端口” 可以直接跳过。</span></span><br><span class="line"><span class="comment">#屏蔽单个IP的命令是</span></span><br><span class="line">iptables -I INPUT -s 123.45.6.7 -j DROP</span><br><span class="line"><span class="comment">#封整个段即从123.0.0.1到123.255.255.254的命令</span></span><br><span class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP</span><br><span class="line"><span class="comment">#封IP段即从123.45.0.1到123.45.255.254的命令</span></span><br><span class="line">iptables -I INPUT -s 124.45.0.0/16 -j DROP</span><br><span class="line"><span class="comment">#封IP段即从123.45.6.1到123.45.6.254的命令是</span></span><br><span class="line">iptables -I INPUT -s 123.45.6.0/24 -j DROP</span><br></pre></td></tr></table></figure><p>4.查看已经添加的iptables的规则ptables -L -n</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">N：只显示IP地址和端口号，不将IP解析为域名</span><br><span class="line">删除已添加的iptables的规则</span><br><span class="line">将所有iptables以序号标记显示，执行：</span><br><span class="line"></span><br><span class="line">iptables -L -n --line-numbers</span><br><span class="line"></span><br><span class="line">比如要删除INPUT里序号为8的规则，执行：</span><br><span class="line"></span><br><span class="line">iptables -D INPUT 8</span><br><span class="line">5.也可以直接 编辑配置文件，添加iptables防火墙规则：</span><br><span class="line">iptables的配置文件为/ etc / sysconfig / iptables</span><br><span class="line"></span><br><span class="line">编辑配置文件：</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">文件中的配置规则与通过的iptables命令配置，语法相似：</span><br><span class="line"></span><br><span class="line">如，通过iptables的命令配置，允许访问80端口：</span><br><span class="line"></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line">那么，在文件中配置，只需要去掉句首的iptables，添加如下内容：</span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line">保存退出。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">有两种方式添加规则</span><br><span class="line"></span><br><span class="line">iptables -A 和iptables -I</span><br><span class="line"></span><br><span class="line">iptables -A 添加的规则是添加在最后面。如针对INPUT链增加一条规则，接收从eth0口进入且源地址为192.168.0.0/16网段发往本机的数据。</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># iptables -A INPUT -i eth0 -s 192.168.0.0/16 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line">iptables -I 添加的规则默认添加至第一条。</span><br><span class="line"></span><br><span class="line">如果要指定插入规则的位置，则使用iptables -I 时指定位置序号即可。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">删除规则</span><br><span class="line"></span><br><span class="line">如果删除指定则，使用iptables -D命令，命令后可接序号。效果请对比上图。</span><br><span class="line"></span><br><span class="line">或iptables -D 接详细定义；</span><br><span class="line"></span><br><span class="line">如果想把所有规则都清除掉，可使用iptables -F。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">备份iptabes rules</span><br><span class="line"></span><br><span class="line">使用iptables-save命令，如：</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># iptables-save &gt; /etc/sysconfig/iptables.save</span></span><br><span class="line"></span><br><span class="line">恢复iptables rules</span><br><span class="line"></span><br><span class="line">使用iptables命令，如：</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># iptables-restore &lt; /etc/sysconfig/iptables.save</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">iptables 配置保存</span><br><span class="line"></span><br><span class="line">以上做的配置修改，在设备重启后，配置将丢失。可使用service iptables save进行保存。</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># service iptables save</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">重启iptables的服务使其生效：</span><br><span class="line"></span><br><span class="line">service iptables save   添加规则后保存重启生效。</span><br><span class="line"></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装的nodejs更新npm</title>
      <link href="centos%E5%AE%89%E8%A3%85%E7%9A%84nodejs%E6%9B%B4%E6%96%B0npm/"/>
      <url>centos%E5%AE%89%E8%A3%85%E7%9A%84nodejs%E6%9B%B4%E6%96%B0npm/</url>
      
        <content type="html"><![CDATA[<p>npm 官网 ：<a href="https://docs.npmjs.com/getting-started/installing-node" target="_blank" rel="external nofollow noopener noreferrer">https://docs.npmjs.com/getting-started/installing-node</a><br>安装 nodejs  [官方介绍请看这里：<a href="https://github.com/nodesource/distributions]" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/nodesource/distributions]</a></p><blockquote><ol><li>安装 nodejs：<br>下载包 我这里下载是版本10的包<br>curl -sL <a href="https://rpm.nodesource.com/setup_10.x" target="_blank" rel="external nofollow noopener noreferrer">https://rpm.nodesource.com/setup_10.x</a>  |  bash  -<br>安装<br>yum install -y nodejs<br>查看node版本<br>node -v </li></ol></blockquote><blockquote><ol start="2"><li>更新 npm<br>npm install npm@latest -g<br>查看npm版本<br>npm -v </li></ol></blockquote><blockquote><p>如果你发现nodejs和你的程序不对，我就碰上了，我刚开始下载了11的包，版本太高，程序报错，后来改成10。<br>1.卸载npm：sudo npm uninstall npm -g<br>2.卸载nodejs包：yum remove nodejs<br>3. cd 到yum源配置文件夹：cd /etc/yum.repo.d ，删除以 node 开头的源<br>4. 清除 yum 缓存 yum clean all</p></blockquote><p>sudo yum install -y git</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装和配置nginx</title>
      <link href="centos7%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEnginx/"/>
      <url>centos7%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEnginx/</url>
      
        <content type="html"><![CDATA[<p> <strong><em>安装</em></strong></p><blockquote><p>1:添加Nginx存储库<br>  sudo yum -y install epel-release</p></blockquote><blockquote><p>2.安装nginx<br>  sudo yum -y install nginx</p></blockquote><blockquote><p>3.启动Nginx<br>  sudo systemctl start nginx</p></blockquote><blockquote><p>4.如果想在系统启动时启用Nginx，也可以不设置<br>  sudo systemctl enable nginx</p></blockquote><blockquote><p>5.设置防火墙<br>  允许http通信<br>  <code>sudo firewall-cmd --permanent --zone=public --add-service=http</code><br>  允许https通信<br>  <code>sudo firewall-cmd --permanent --zone=public --add-service=https</code></p></blockquote><p>  开发80 443<br>  <code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code><br>  <code>firewall-cmd --zone=public --add-port=443/tcp --permanent</code></p><blockquote><p>6.重启防火墙<br>  <code>sudo firewall-cmd --reload</code><br>  注（如果你是在阿里云买的服务器，还要进入控制台开放80 和443端口，不然还是访问不了）</p></blockquote><p><strong><em>测试</em></strong><br>在浏览器输入你服务器的ip出现下图，说明成功了<br><img src="https://img-blog.csdnimg.cn/20191217160758840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong><em>域名配置</em></strong><br>我是在阿里云买的域名，5块一年，用来测试还挺好(这个域名要在阿里云上配置，映射到服务器的ip)</p><p>进入<br>cd /etc/nginx<br>ls<br>下图所有文件都会自动生成，处理cert文件夹，是自己创建的用于放ssl证书的（下面会说怎么配置ssl）<br><img src="https://img-blog.csdnimg.cn/20191217161008843.png" alt="在这里插入图片描述"><br>一般服务器都是80 22 443这个三个端口开放，我这里的配置也是一样，其他的端口请求都是通过80，和443端口来转发。</p><p>先修改nginx.conf 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    <span class="comment"># 开启gzip</span></span><br><span class="line">    gzip on;</span><br><span class="line">    <span class="comment"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span><br><span class="line">    gzip_min_length 256k;</span><br><span class="line">    <span class="comment"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明</span></span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/nginx/conf/include/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入conf.d文件夹<br>创建一文件 xxx.conf<br>没有ssl证书的配置如下 这个是通过代理方式把4080端口弄到80端口上，这样4080端口就不对外开放，也访问不了。<br>在服务器中请求接口 比如是===&gt; ip:4080/user<br>在浏览器 要写成===&gt; 域名/test/user 就可以访问了<br>多个端口同理 多增加upstream，和下面名字对应的location 就可以了，这样你就不用购买多个域名了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">upstream <span class="built_in">test</span>&#123;</span><br><span class="line">    server 127.0.0.1:4080;</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line">upstream test2&#123;</span><br><span class="line">    server 127.0.0.1:4081;</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    location /output/ &#123;</span><br><span class="line">    <span class="built_in">alias</span>    /data/www/html/;</span><br><span class="line">    index <span class="literal">false</span>;</span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">    location /<span class="built_in">test</span>/ &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;   </span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host  <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">"Upgrade"</span>;</span><br><span class="line">        proxy_pass      http://<span class="built_in">test</span>/;</span><br><span class="line">    &#125; </span><br><span class="line">     location /test2/ &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;   </span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host  <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">"Upgrade"</span>;</span><br><span class="line">        proxy_pass      http://test2/;</span><br><span class="line">    &#125; </span><br><span class="line">   error_page  404     /404.json; </span><br><span class="line">   location = /404.json &#123;</span><br><span class="line">        default_type application/json;</span><br><span class="line">        root /usr/share/nginx/html/404.json;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 500 502 503 504 /50x.json;</span><br><span class="line">    location = /50x.json &#123;</span><br><span class="line">default_type application/json;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你有ssl证书时（可以在阿里云上购买一个免费的）</p><blockquote><p>购买流程 点击你购买的域名<br><img src="https://img-blog.csdnimg.cn/20191217162833834.png" alt="在这里插入图片描述"><br>在点击ssl证书<br><img src="https://img-blog.csdnimg.cn/20191217162926557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接申请 选择个人免费版<br><img src="https://img-blog.csdnimg.cn/20191217163007343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>买好之后进入ssl证书管理<br><img src="https://img-blog.csdnimg.cn/20191217163120308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>审核过了，点击下载，下载nginx版本的证书，解压会有两个文件，一个.key和.pem,把这两个文件放到/etc/nginx/cert下</p></blockquote><p>现在来说ssl 和nginx怎么配置 这个和上面那个配置有冲突，请选择一种<br>进入conf.d文件夹<br>创建一文件 xxx.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">upstream <span class="built_in">test</span>&#123;</span><br><span class="line">    server 127.0.0.1:4080;</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    <span class="comment">#http请求指向https</span></span><br><span class="line">    rewrite ^(.*) https://<span class="variable">$server_name</span><span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    listen       [::]:443 ssl http2;</span><br><span class="line">    server_name  域名;</span><br><span class="line">    ssl_certificate <span class="string">"/etc/nginx/cert/.pem文件"</span>;</span><br><span class="line">    ssl_certificate_key <span class="string">"/etc/nginx/cert/.key文件"</span>;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line">    location /output/ &#123;</span><br><span class="line">    <span class="built_in">alias</span>    /data/www/html/;</span><br><span class="line">    index <span class="literal">false</span>;</span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">    location /<span class="built_in">test</span>/ &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;   </span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host  <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">"Upgrade"</span>;</span><br><span class="line">        proxy_pass      http://<span class="built_in">test</span>/;</span><br><span class="line">    &#125; </span><br><span class="line">   error_page  404     /404.json; </span><br><span class="line">   location = /404.json &#123;</span><br><span class="line">        default_type application/json;</span><br><span class="line">        root /usr/share/nginx/html/404.json;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 500 502 503 504 /50x.json;</span><br><span class="line">    location = /50x.json &#123;</span><br><span class="line">default_type application/json;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重启nginx<br>nginx -s reload<br>查看nginx配置是否有问题<br>nginx -t</p></blockquote><p>检查nginx是否启动</p><blockquote><p>netstat -anput | grep nginx<br>ps -ef | grep nginx<br><img src="https://img-blog.csdnimg.cn/20200320104600587.png" alt="在这里插入图片描述"><br>查询80端口是否绑定nginx<br>netstat -ntlp<br><img src="https://img-blog.csdnimg.cn/20200320104744712.png" alt="在这里插入图片描述"></p></blockquote><p>停止nginx</p><blockquote><p>nginx pkill -9 nginx</p></blockquote><p>查看nginx 运行日志</p><blockquote><p>tail -f /var/log/nginx/error.log -n 100</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装GitLab</title>
      <link href="centos7%E5%AE%89%E8%A3%85GitLab/"/>
      <url>centos7%E5%AE%89%E8%A3%85GitLab/</url>
      
        <content type="html"><![CDATA[<p><strong><em>一、 安装并配置必要的依赖关系</em></strong></p><blockquote><p>1.在CentOS系统上安装所需的依赖：ssh，防火墙,postfix(用于邮件通知) ，wget，以下这些命令也会打开系统防火墙中的HTTP和SSH端口访问<br>sudo yum install -y curl policycoreutils-pythonopenssh-server</p></blockquote><blockquote><p>2.将SSH服务设置成开机自启动，安装命令：sudo systemctl enable sshd  </p></blockquote><blockquote><p>3.启动SSH服务，安装命令：sudo systemctl start sshd</p></blockquote><blockquote><p>4.添加http服务到firewalld,pemmanent表示永久生效，若不加–permanent系统下次启动后就会失效<br>sudo firewall-cmd –permanent –add-service=http<br>(<br>如果系统没有firewall防火墙就安装一个<br>查看防火墙状态<br>firewall-cmd –state<br>安装<br>yum install firewalld systemd -y<br>开启防火墙，命令：service firewalld  start<br>)</p></blockquote><blockquote><p>5.重启防火墙，安装命令：sudo systemctl reload firewalld</p></blockquote><blockquote><p>6.接下来，安装Postfix以发送通知邮件，安装命令：sudo yum install postfix</p></blockquote><blockquote><p>7.将postfix服务设置成开机自启动，安装命令：sudo systemctl enable postfix</p></blockquote><blockquote><p>8.启动postfix，安装命令：sudo systemctl start postfix<br>（在安装Postfix期间，可能会出现配置屏幕。选择“Internet Site”并按enter键。使用您的服务器的外部DNS以“mail name”并按enter。如果出现额外的屏幕，继续按enter键接受默认值。）</p></blockquote><p><strong><em>二、添加GitLab镜像源并安装gitlab服务器</em></strong></p><blockquote><p>1.添加gitlab镜像<br>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm" target="_blank" rel="external nofollow noopener noreferrer">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</a><br>（wget 没有就安装一个yum -y install wget）</p></blockquote><blockquote><p>2.yum install policycoreutils-python（不然会提示 error: Failed dependencies:<br>        policycoreutils-python is needed by gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm）</p></blockquote><blockquote><p>3.安装gitlab 安装命令：rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm（出现下图表示成功）<br><img src="https://img-blog.csdnimg.cn/20191216145903219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><blockquote><p>4.修改gitlab配置文件指定服务器ip和自定义端口：<a href="http://localhost:8090" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8090</a><br>vim  /etc/gitlab/gitlab.rb（最好不要用8080端口，容易被占用, 没有vim:yum install vim -y）<br><img src="https://img-blog.csdnimg.cn/2019121614594215.png" alt="在这里插入图片描述"><br>:wq 保存</p></blockquote><blockquote><p>5.重置并启动GitLab<br>执行：<br>gitlab-ctl reconfigure<br>gitlab-ctl restart （出现ok: run: 表示执行成功）</p></blockquote><blockquote><p>6.在服务器上测试 curl <a href="http://127.0.0.1:8090" target="_blank" rel="external nofollow noopener noreferrer">http://127.0.0.1:8090</a> (出现下面一样就表示成功，如果报502错误，可能端口被占用，或者系统内存不够，执行 gitlab-ctl tail unicorn 出现<br>E, [2015-02-11T17:27:57.818492 #26687] ERROR – : adding listener failed addr=127.0.0.1:8080 (in use)<br>E, [2015-02-11T17:27:57.818621 #26687] ERROR – : retrying in 0.5 seconds (4 tries left)<br>E, [2015-02-11T17:27:58.318902 #26687] ERROR – : adding listener failed addr=127.0.0.1:8080 (in use)<br>E, [2015-02-11T17:27:58.318998 #26687] ERROR – : retrying in 0.5 seconds (3 tries left)<br>E, [2015-02-11T17:27:58.819309 #26687] ERROR – : adding listener failed addr=127.0.0.1:8080 (in use)<br>E, [2015-02-11T17:27:58.819423 #26687] ERROR – : retrying in 0.5 seconds (2 tries left)<br>E, [2015-02-11T17:27:59.319954 #26687] ERROR – : adding listener failed addr=127.0.0.1:8080 (in use)<br>E, [2015-02-11T17:27:59.320076 #26687] ERROR – : retrying in 0.5 seconds (1 tries left)<br>表示端口被占用，换个端口号,如果不是，请等待1分钟左右，因为在单核服务器上，可能最多需要一分钟才能重新启动Unicorn和Sidekiq，还不行手动执行sudo gitlab-ctl restart sidekiq  sudo gitlab-ctl hup unicorn这两个命令<br>) 这个表示成功：<br><img src="https://img-blog.csdnimg.cn/20191216135009393.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p>7.在浏览器范围会发现访问不了，是因为你没有给这个端口开放访问的权限，<br>（<br>1、开放端口<br>firewall-cmd –zone=public –add-port=5672/tcp –permanent   # 开放5672端口<br>firewall-cmd –zone=public –remove-port=5672/tcp –permanent  #关闭5672端口<br>firewall-cmd –reload   # 配置立即生效<br>2、查看防火墙所有开放的端口<br>firewall-cmd –zone=public –list-ports<br>3.、关闭防火墙<br>如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估<br>systemctl stop firewalld.service<br>4、查看防火墙状态<br> firewall-cmd –state<br> 5、查看监听的端口<br>netstat -lnpt<br>centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools<br>6、检查端口被哪个进程占用<br>netstat -lnpt |grep 8090<br> ）</p></blockquote><blockquote><p>在网页上访问<a href="http://45.76.185.64:8090" target="_blank" rel="external nofollow noopener noreferrer">http://45.76.185.64:8090</a> 会进入改密码页面<br> <img src="https://img-blog.csdnimg.cn/20191216135845731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> （我发现改密码时间有点长，一直没有反应，后来我关闭请求在刷新一下，就好了就会让你绑定邮箱，可能是我电脑卡了）</p></blockquote><p> 登录进去就可以了 （账号是root,密码是你设置的新密码）</p><p>gitlab 安装出现其他问题查看<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md" target="_blank" rel="external nofollow noopener noreferrer">https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8使用docker安装mysql8.0.17</title>
      <link href="centos8%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85mysql8-0-17/"/>
      <url>centos8%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85mysql8-0-17/</url>
      
        <content type="html"><![CDATA[<blockquote><p>拉取镜像<br>docker pull mysql:8.0.17<br>使用 docker images 查看镜像文件</p></blockquote><p>现在自己的服务器上依次创建/data/docker/mysql 文件夹，用于挂载外部配置和数据</p><blockquote><p>启动(注释的代码不要)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always \ // 开机启动</span><br><span class="line">  -v /data/docker/mysql/data:/var/lib/mysql \ // 将容器的 /var/lib/mysql目录挂载到主机/data/docker/mysql/data目录。</span><br><span class="line">    -v /data/docker/mysql/config/my.cnf:/etc/mysql/conf.d \ //映射配置文件</span><br><span class="line">      -e MYSQL_ROOT_PASSWORD=123456 \ //密码</span><br><span class="line">        -p 3306:3306 \ // 将容器的3306端口映射到主机的3306端口</span><br><span class="line">          --name mysql \ // MySQL容器名称</span><br><span class="line">            mysql:8.0.17 // 后台运行容器</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always \</span><br><span class="line">-v /data/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /data/docker/mysql/config/my.cnf:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">--name mysql \</span><br><span class="line">mysql:8.0.17</span><br></pre></td></tr></table></figure><p>运行成功 会在 /data/docker/mysql 文件夹 创建 config 和data 文件夹 ，里面都有东西</p><blockquote><p>使用镜像进入mysql<br>$:docker exec -it mysql bash<br>$:mysql -u root -p (会提示输入密码)<br>成功就会进入数据库<br><img src="https://img-blog.csdnimg.cn/20191213144411686.png" alt="在这里插入图片描述"><br>初始化MySQL，不然用 navicat连接不了mysql数据库<br>$:<code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</code><br>$:flush privileges;</p></blockquote><blockquote><p>（可选）设置时间<br>$:set global time_zone = ‘+8:00’;<br>set time_zone = ‘+8:00’;<br>flush privileges;<br>select curtime();<br><img src="https://img-blog.csdnimg.cn/20191213144731992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h2 id="docker出现错误"><a href="#docker出现错误" class="headerlink" title="docker出现错误"></a>docker出现错误</h2><p> <code>Error response from daemon: driver failed programming external connectivity on endpoint mysql (a29d3409d7b1f5eaf8706050f4aeed7b11fa90415d243239a0c882eeb9fb83be):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 3306 -j DNAT --to-destination 172.17.0.5:3306 ! -i docker0: iptables: No chain/target/match by that name.</code><br> Docker容器做端口映射报错，docker服务启动时定义的自定义链DOCKER被清除；重启即可<br> systemctl restart docker</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8使用docker安装redis</title>
      <link href="centos8%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85redis/"/>
      <url>centos8%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85redis/</url>
      
        <content type="html"><![CDATA[<p>拉取镜像</p><blockquote><p>docker pull redis:5</p></blockquote><blockquote><p>$:docker images 你会看到redis的镜像</p></blockquote><blockquote><p>在/data/docker/redis 文件夹下创建redis.conf(没有/data/docker/redis文件自己创建)<br>在redis.conf写入(注释的不要)<br>port 6379 //开启端口6379<br>bind * //docker内部绑定容器需要使用*号 //不能使用127  127 是相对于母机的如果跨docker没用 docker内部指向不一样（在外部访问不了 就用bind 0.0.0.0）<br>daemonize no<br>pidfile /data/redis/redis.pid<br>appendonly yes<br>写好保存</p></blockquote><blockquote><p>启动redis 执行命令（注释的不要）<br>docker run <br>-p 6379:6379 \ //映射端口 容器内到宿主的127.0.0.1:6379<br>–name redis \ //给容器起名名字叫做redis<br>-v /data/docker/redis/data:/data \ //映射文件夹<br>-v /data/docker/redis/redis.conf:/etc/redis/redis.conf \ //映射文件<br>-d redis:5 \ //使用redis的pull的版本<br>redis-server /etc/redis/redis.conf \ //使用redis配置文件开启redis服务<br>–requirepass “123456” \ //密码<br>–appendonly yes  后台运行<br><img src="https://img-blog.csdnimg.cn/20191213103006284.png" alt="在这里插入图片描述"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 127.0.0.1:6379:6379 \</span><br><span class="line">--name redis \</span><br><span class="line">-v /data/docker/redis/data:/data \</span><br><span class="line">-v /data/docker/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis:5 \</span><br><span class="line">redis-server /etc/redis/redis.conf \</span><br><span class="line">--requirepass <span class="string">"123456"</span> \</span><br><span class="line">--appendonly yes</span><br></pre></td></tr></table></figure><blockquote><p>$: docker ps<br><img src="https://img-blog.csdnimg.cn/20191213103112545.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p>使用redis镜像执行redis-cli命令连接到刚启动的容器<br>$:docker exec -it redis redis-cli<br>//输入密码<br>$: auth 123456<br>测试<br>$:keys *<br><img src="https://img-blog.csdnimg.cn/20191213103341882.png" alt="在这里插入图片描述"><br>说明成功了</p></blockquote><blockquote><p>没有安装docker? 请看  <a href="https://blog.csdn.net/weixin_43110609/article/details/103504539" target="_blank" rel="external nofollow noopener noreferrer">centos8 Docker上安装的postgres</a></p></blockquote><p>出现的问题：<br>[root@localhost ~]# docker run -d -p 9000:80 centos:httpd /bin/sh -c /usr/local/bin/start.sh<br>d5b2bd5a7bc4895a973fe61efd051847047d26385f65c278aaa09e4fa31c4d76<br>docker: Error response from daemon: driver failed programming external connectivity on endpoint quirky_allen (6bda693d1143657e46bee0300276aa05820da2b21a3d89441e820d1a274c48b6): (iptables failed: iptables –wait -t nat -A DOCKER -p tcp -d 0/0 –dport 9000 -j DNAT –to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.<br>(exit status 1))</p><p>原因:</p><p>docker服务启动时定义的自定义链DOCKER由于某种原因被清掉<br>重启docker服务及可重新生成自定义链DOCKER</p><p>解决:</p><p>重启docker服务后再启动容器<br>systemctl restart docker<br>再次执行那个命令</p><p>其他命令：<br>//启动redis<br>docker start redis</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8,Docker上安装的postgres</title>
      <link href="centos8-Docker%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84postgres/"/>
      <url>centos8-Docker%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84postgres/</url>
      
        <content type="html"><![CDATA[<p>我用的是 centos8 服务器,在安装 postgres 数据库先安装 docker，这里我安装的是 postgres12</p><p>centos8 安装 docker</p><blockquote><ol><li>下载 docker-ce 的 repo<br>curl <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="external nofollow noopener noreferrer">https://download.docker.com/linux/centos/docker-ce.repo</a> -o /etc/yum.repos.d/docker-ce.repo</li></ol></blockquote><blockquote><ol start="2"><li>安装依赖(七 不用这一步)<br>yum install <a href="https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm" target="_blank" rel="external nofollow noopener noreferrer">https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm</a></li></ol></blockquote><blockquote><ol start="3"><li>安装 docker-ce<br>yum install docker-ce</li></ol></blockquote><blockquote><ol start="4"><li>启动 docker<br>systemctl start docker</li></ol></blockquote><p>安装之后将 postgres 从 docker hub 包管理器 pull 当前到服务器</p><blockquote><p>docker pull postgres:12</p></blockquote><blockquote><p>查看镜像 $: docker images<br><img src="https://img-blog.csdnimg.cn/2019121210374053.png" alt="在这里插入图片描述"></p></blockquote><ol><li>先创建一个 postgresql.conf 文件 写在 /data/docker/postgres/下，没有目录就创建</li></ol><p>在 postgresql.conf 写入 (注释的不要写)</p><blockquote><p><code>listen_addresses = &#39;*&#39;</code><br>//监听地址，默认<em>为当前服务器地址 []docker 内部绑定容器需要使用</em>号 不能使用 127 127 是相对于母机的如果跨 docker 没用 docker 内部指向不一样<br>port = 5432<br>//postgres 使用端口号默认 5432<br>max_connections = 1000<br>//最大连接数<br>shared_buffers = 1024MB<br>wal_level = replica<br>//只保存操作日志的具体程度级别,postgres10 之后有选项三个【minimal,replica,logical】设,要设置 WAL 归档至少要设置为 replica</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses = <span class="string">'*'</span></span><br><span class="line">port = 5432</span><br><span class="line">max_connections = 1000</span><br><span class="line">shared_buffers = 1024MB</span><br><span class="line">timezone = <span class="string">'Asia/Shanghai'</span> <span class="comment"># 设置数据库时区</span></span><br></pre></td></tr></table></figure><p>然后使用 docker 安装(注释的不要)</p><blockquote><p>$: docker run –name postgres <br>//设置镜像名字叫做 postgres<br>-e POSTGRES_PASSWORD=123456 <br> //设置 postgres 服务器初始密码<br>-p 5432:5432 <br> //将 docker 内部端口 5432 映射绑定到服务器端口 5432</p></blockquote><pre><code>-v /data/docker/postgres/data:/var/lib/postgresql/data \//将docker镜像内部文件夹/var/lib/postgresql/data映射绑定到服务器文件夹/data/docker/postgres/data/ -v /data/docker/postgres/buckup:/var/lib/postgresql/buckup \  -v /data/docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf \  //将docker镜像内部文件/etc/postgresql/postgresql.conf映射绑定到服务器文件夹/data/docker/postgres/postgresql.conf   -d postgres:12 \    -c &apos;config_file=/etc/postgresql/postgresql.conf&apos;    //指定 postgres使用的配置文件为 /etc/postgresql/postgresql.conf 即上文映射的服务器文件/data/docker/postgres10/postgresql.conf</code></pre><p><img src="https://img-blog.csdnimg.cn/20191212152118302.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --name postgres \</span><br><span class="line">-e POSTGRES_PASSWORD=123456 \</span><br><span class="line">-p 5432:5432 \</span><br><span class="line">-v /data/docker/postgres/data:/var/lib/postgresql/data \</span><br><span class="line">-v /data/docker/postgres/buckup:/var/lib/postgresql/buckup \</span><br><span class="line">-v /data/docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf \</span><br><span class="line">-d postgres:12 \</span><br><span class="line">-c <span class="string">'config_file=/etc/postgresql/postgresql.conf'</span></span><br></pre></td></tr></table></figure><p>执行命令。在/data/docker/postgres 下会生成 buckup 和 data 文件夹</p><blockquote><p>查看 docker ps<br><img src="https://img-blog.csdnimg.cn/20191212152446534.png" alt="在这里插入图片描述"><br>说明安装成功。</p></blockquote><blockquote><p>进入数据库<br>$: docker exec -it postgres bash  (这个postgres 你上面命名的镜像名字)<br>//切换用户<br>$: su postgres<br>//进入数据库指定端口为 5432<br>$: psql -p 5432</p></blockquote><p>重新加载部分配置方式(增加了新配置)</p><blockquote><p>$postgres: SELECT pg_reload_conf();</p></blockquote><blockquote><p>查看所有的数据库：\l<br>会显示数据库就成功了 可以用了<br>查看当前时区设置：SELECT current_setting(‘timezone’) AS timezone;<br><img src="https://img-blog.csdnimg.cn/20191212162912172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>本地连接数据库 我用的是 Navicat Premium 12（官网上直接下载，傻瓜式安装就好）</p><blockquote><p>1.第一种方式 关闭服务器上的防火墙 就可以直接连接<br>//查看防火墙运行状态<br>$:firewall-cmd –state<br>关闭防火墙：<br>systemctl stop firewalld.service #停止 firewall<br>systemctl disable firewalld.service #禁止 firewall 开机启动<br>启动一个服务：systemctl start firewalld.service<br>关闭一个服务：systemctl stop firewalld.service<br>重启一个服务：systemctl restart firewalld.service<br>显示一个服务的状态：systemctl status firewalld.service<br>在开机时启用一个服务：systemctl enable firewalld.service<br>在开机时禁用一个服务：systemctl disable firewalld.service<br>查看服务是否开机启动：systemctl is-enabled firewalld.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br><img src="https://img-blog.csdnimg.cn/20191212175510111.png" alt="在这里插入图片描述"><br>连接方式<br><img src="https://img-blog.csdnimg.cn/20191212175801443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><blockquote><p>第二种 用 ssh 通道方式，防火墙就不要开启<br>这里的密码是你的数据库密码<br><img src="https://img-blog.csdnimg.cn/2019121217593670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="这里的密码是你的数据库密码"> &gt; <img src="https://img-blog.csdnimg.cn/20191212180052878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="这里的密码是服务器密码"><br>这里的密码是服务器密码</p></blockquote><p>删除 docker</p><blockquote><ol><li>查询安装过的包<br>$:yum list installed | grep docker<br><img src="https://img-blog.csdnimg.cn/20191212161911517.png" alt="在这里插入图片描述"></li></ol></blockquote><blockquote><ol start="2"><li>删除安装的软件包<br>$:yum -y remove docker-ce.x86_64<br>$:yum -y remove docker-ce-cli.x86_64</li></ol></blockquote><blockquote><ol start="3"><li>删除镜像/容器等<br>$:rm -rf /var/lib/docker/</li></ol></blockquote><blockquote><ol start="4"><li>输入 docker 或 docker –version 验证是否卸载<br>$:<code>docker --version</code><br>-bash: /usr/bin/docker: No such file or directory</li></ol></blockquote><p>数据库备份文档：</p><p><a href="https://blog.csdn.net/qq_32884717/article/details/78512082" target="_blank" rel="external nofollow noopener noreferrer">如何在 PostgreSQL 中实现增量备份</a><br><a href="https://lihaoquan.me/2018/10/14/postgres-backup-wal.html" target="_blank" rel="external nofollow noopener noreferrer">Postgresql 备份与数据恢复</a><br><a href="https://developer.aliyun.com/article/59359" target="_blank" rel="external nofollow noopener noreferrer">PostgreSQL 最佳实践 - 在线增量备份与任意时间点恢复</a><br><a href="http://postgres.cn/docs/10/" target="_blank" rel="external nofollow noopener noreferrer">PostgreSQL 10.1 手册</a><br><a href="https://deepinout.com/postgresql/postgresql-questions/9_postgresql_how_do_i_change_the_timezone_to_utc_in_postgres_permanently.html?action=all" target="_blank" rel="external nofollow noopener noreferrer">PostgreSQL 如何永久更改时区为 UTC</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布插件到npm上</title>
      <link href="%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B6%E5%88%B0npm%E4%B8%8A/"/>
      <url>%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B6%E5%88%B0npm%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.创建文件<br>mkdir model-dao<br>cd model-dao<br>npm init</p></blockquote><blockquote><p>npm init会要求填写一堆的信息，这些信息会在package.json里体现，例如<br>{<br>  “name”: “model-dao”,<br>  “version”: “1.0.0”,<br>  “description”: “dao层”,<br>  “main”: “index.js”,<br>  “scripts”: {<br>    “test”: “echo &quot;Error: no test specified&quot; &amp;&amp; exit 1”<br>  },<br>  “bin”: {<br>    “model-dao”: “./index.js”<br>  },<br>  “author”: “klover”,<br>  “license”: “ISC”,<br>  “dependencies”: {<br>    “chance”: “^1.1.3”,<br>    “moment”: “^2.24.0”<br>  }<br>}</p></blockquote><blockquote><p>2.在model-dao项目里建立一个index.js</p></blockquote><blockquote><p>3.目录model-dao里就只有如下<br>index.js<br>package.json</p></blockquote><blockquote><p>4.到<a href="https://www.npmjs.com注册一个账号，注册完后" target="_blank" rel="external nofollow noopener noreferrer">https://www.npmjs.com注册一个账号，注册完后</a></p></blockquote><blockquote><p>5.添加用户： npm adduser</p></blockquote><blockquote><ol start="6"><li>npm publish</li></ol></blockquote><blockquote><p>7.添加注释文件<br>README.md<br>修改package.json文件中的”version”: “1.0.3”,</p></blockquote><blockquote><p>8.发布 npm publish</p></blockquote><blockquote><ol start="9"><li>取消发布 <code>npm unpublish --force</code> 删除发布的包 24小时内可以取消</li><li>取消发布的某个版本 npm unpublish <a href="mailto:node-wxpay3@1.0.0" rel="external nofollow noopener noreferrer" target="_blank">node-wxpay3@1.0.0</a> 24小时内可以取消</li></ol></blockquote><h2 id="添加要发布的文件"><a href="#添加要发布的文件" class="headerlink" title="添加要发布的文件"></a>添加要发布的文件</h2><p>黑名单方式 .npmignore &gt; .gitignore</p><p>白名单方式 在pack.json 添加 <code>files:[&#39;dist&#39;]</code> 要发布files 文件，当文件少时 推荐使用</p><p>——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————<br>出现的问题：</p><ol><li>出现这个错误 no_perms Private mode enable, only admin can publish this module</li></ol><p>错误输出内容</p><p>npm ERR! publish Failed PUT 403<br>npm ERR! code E403<br>npm ERR! no_perms Private mode enable, only admin can publish this module:<br>出现原因：使用的是淘宝源cnpm,登陆到的是cnpm<br>解决方法：切换到npmjs的网址，代码如下</p><blockquote><p>npm config set registry <a href="http://registry.npmjs.org/" target="_blank" rel="external nofollow noopener noreferrer">http://registry.npmjs.org/</a></p></blockquote><p>设为淘宝镜像</p><blockquote><p>npm config set registry <a href="http://registry.npm.taobao.org/" target="_blank" rel="external nofollow noopener noreferrer">http://registry.npm.taobao.org/</a></p></blockquote><ol start="2"><li>You do not have permission to publish “npmtest”. Are you logged in as the correct user? </li></ol><p>错误输出内容</p><p>npm ERR! publish Failed PUT 403<br>npm ERR! code E403<br>npm ERR! You do not have permission to publish “npmtest”. Are you logged in as the correct user? :<br>出现原因：所要publish的包的name和npmjs网上已经发布的包的名字重复，所以收你没有权限发布这个名字的包。（简单解释就是你想要的名字被别人抢先注册了）<br>解决方法：找到package.json文件，把name的值换掉。如果还出现上述错误就是还是重名的，继续换！</p>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 发布npm插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa2解析请求头信息</title>
      <link href="koa2%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF/"/>
      <url>koa2%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>推荐使用ua-parser-js<br>npm i ua-parser-js –save</p></blockquote><p>eg:<br>       const parser = require(‘ua-parser-js’);<br>       let ua = ctx.headers[‘user-agent’];<br>        let ua_parser = new parser(ua);</p><pre><code>// 自己检查一些不常用的浏览器if (/99Browser/.test(ua)) { // 久久浏览器    let myOwnRegex = [[ /(99Browser)\/([\w\.]+)/i ], [ parser.BROWSER.NAME, parser.BROWSER.VERSION ]];    let myParser = new parser({ &apos;browser&apos;: myOwnRegex });    ua_parser = myParser.setUA(ua);} else if (/LieBaoFast/.test(ua)) { // 猎豹浏览器    let myOwnRegex = [[ /(LieBaoFast)\/([\w\.]+)/i ], [ parser.BROWSER.NAME, parser.BROWSER.VERSION ]];    let myParser = new parser({ &apos;browser&apos;: myOwnRegex });    ua_parser = myParser.setUA(ua);} else if (/2345Browser/.test(ua)) { // 2345浏览器    let myOwnRegex = [[ /(2345Browser)\/([\w\.]+)/i ], [ parser.BROWSER.NAME, parser.BROWSER.VERSION ]];    let myParser = new parser({ &apos;browser&apos;: myOwnRegex });    ua_parser = myParser.setUA(ua);} else if (/SogouMobileBrowser/.test(ua)) { // 搜狗浏览器    let myOwnRegex = [[ /(SogouMobileBrowser)\/([\w\.]+)/i ], [ parser.BROWSER.NAME, parser.BROWSER.VERSION ]];    let myParser = new parser({ &apos;browser&apos;: myOwnRegex });    ua_parser = myParser.setUA(ua);} else if (/MZBrowser/.test(ua)) { // 魅族浏览器    let myOwnRegex = [[ /(MZBrowser)\/([\w\.]+)/i ], [ parser.BROWSER.NAME, parser.BROWSER.VERSION ]];    let myParser = new parser({ &apos;browser&apos;: myOwnRegex });    ua_parser = myParser.setUA(ua);}const client_type = ua_parser.getResult();let getBrowser = ua_parser.getBrowser();let browser_name = getBrowser.name || &apos;其他&apos;; // 浏览器名称let browser_version = getBrowser.version; // 浏览器版本let getOS = ua_parser.getOS();let os_name = getOS.name || &apos;其他&apos;; // 操作系统名称let os_version = getOS.version; // 操作系统版本let getDevice = ua_parser.getDevice();let platform_type = getDevice.type || &apos;desktop&apos;;// 判断是什么平台let getEngine = ua_parser.getEngine();let engine_name = getEngine.name || &apos;其他&apos;; // 判断是什么引擎</code></pre><p>如果不需要太多信息，只是简单使用 推荐使用 bowser<br>npm i bowser –save</p><p>eg:<br>     const Bowser = require(‘bowser’);<br>     const client_type = Bowser.parse(ctx.headers[‘user-agent’]);</p>]]></content>
      
      
      
        <tags>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10激活</title>
      <link href="windows10%E6%BF%80%E6%B4%BB/"/>
      <url>windows10%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<p>1.右击左下角选择Windows PowerShell(管理员)身份启动;<br>2.此时将“以管理员身份”打开“MSDOS”窗口，在此界面中，依次输出以下命令：</p><p>slmgr.vbs /upk</p><p>复制以上命令，并在MSDOW窗口中右击以粘贴此命令，按回车进行确定。</p><p>此时弹出窗口显未“已成功卸载了产品密钥”。<br>3.接着输入以下命令：</p><p>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</p><p>弹出窗口提示：“成功的安装了产品密钥”。<br>4.继续输入以下命令：</p><p>slmgr /skms zh.us.to</p><p>弹出窗口提示：“密钥管理服务计算机名成功的设置为zh.us.to”。<br>5.接下来输入以下命令：</p><p>slmgr /ato</p><p>此时将弹出窗口提示：“成功的激活了产品”。</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10手动配置ip</title>
      <link href="windows10%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AEip/"/>
      <url>windows10%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AEip/</url>
      
        <content type="html"><![CDATA[<blockquote><p>// 获取可用ip -&gt;cmd<br>$ipconfig/all<br><img src="https://img-blog.csdnimg.cn/20190909161045633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><blockquote><p><strong><em>第一种</em></strong>：<br>在点击电脑图标<br><img src="https://img-blog.csdnimg.cn/20190909161138941.png" alt="在这里插入图片描述"><br>点击更改适配器选项<br><img src="https://img-blog.csdnimg.cn/20190909161227893.png" alt="在这里插入图片描述"><br>在右击下图选择属性<br><img src="https://img-blog.csdnimg.cn/20190909161331156.png" alt="在这里插入图片描述"><br>选择如下图<br><img src="https://img-blog.csdnimg.cn/2019090916144922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击属性 进入如下页面<br><img src="https://img-blog.csdnimg.cn/20190909161534709.png" alt="在这里插入图片描述"><br>属性配置是最上获取的，对上配置填入就好了，没有的就不填 如备用DNS</p></blockquote><blockquote><p><strong><em>第二种</em></strong><br>点击电脑图标<br><img src="https://img-blog.csdnimg.cn/20190909161138941.png" alt="在这里插入图片描述"><br>点击下图<br><img src="https://img-blog.csdnimg.cn/20190910105121961.png" alt="在这里插入图片描述"><br>或者在IP设置中修改<br><img src="https://img-blog.csdnimg.cn/20190910102513875.png" alt="在这里插入图片描述"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSR翻墙</title>
      <link href="SSR%E7%BF%BB%E5%A2%99/"/>
      <url>SSR%E7%BF%BB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<p>须知：必须是国外服务器或者是香港服务器，内地的无效。</p><p> 单用户（推荐） 默认都是直接按enter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure> <a id="more"></a><blockquote><p>自行配置下，如果看不懂配置一路回车就好了 如果没有出错，会出现如下的提示信息<br>ShadowsocksR账号 配置信息：<br> I P : xxx.xxx.xxx.xxx 端口 : 2333<br> 密码 : doub.io 加密 : aes-128-ctr<br>协议 : auth_sha1_v4_compatible<br>混淆 : tls1.2_ticket_auth_compatible<br>设备数限制: 5 单线程限速: 666 KB/S 端口总限速: 2333 KB/S<br> SS链接: ss://xxxxxxxxxxxxx<br>SS二维码: <a href="http://pan.baidu.com/share/qrcodew=300&amp;h=300&amp;url=ss://xxxxxxxxxxxxx" target="_blank" rel="external nofollow noopener noreferrer">http://pan.baidu.com/share/qrcodew=300&amp;h=300&amp;url=ss://xxxxxxxxxxxxx</a><br>SSR链接: ssr://xxxxxxxxxxxxx<br>SSR二维码: <a href="http://pan.baidu.com/share/qrcode?w=300&amp;h=300&amp;url=ssr://xxxxxxxxxxxxx" target="_blank" rel="external nofollow noopener noreferrer">http://pan.baidu.com/share/qrcode?w=300&amp;h=300&amp;url=ssr://xxxxxxxxxxxxx</a> </p></blockquote><p>下面的可以不配置也是可以使用的<br>安装锐速还是用刚才的脚本，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>之后选择14其他功能，选择安装锐速，如图<br><img src="https://img-blog.csdnimg.cn/20200119134006274.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后选择2  安装锐速<br><img src="https://img-blog.csdnimg.cn/20200119134047345.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>下载ShadowsocksR-dotnet4.0.exe<br><img src="https://img-blog.csdnimg.cn/20200119134500652.png" alt="在这里插入图片描述"><br>负责生成的SSR链接到这个软件中就可以使用了<br><img src="https://img-blog.csdnimg.cn/20200119134555621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ssr </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get请求参数处理</title>
      <link href="get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/"/>
      <url>get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> params = &#123;</span><br><span class="line">            <span class="string">'keywords'</span>: <span class="string">'address'</span>,</span><br><span class="line">            <span class="string">'offset'</span>: 1,</span><br><span class="line">            <span class="string">'page'</span>: 1,</span><br><span class="line">            <span class="string">'key'</span>: 123,</span><br><span class="line">            <span class="string">'extensions'</span>: <span class="string">'all'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="built_in">let</span> querystring = Object.keys(params).filter(<span class="keyword">function</span>(key) &#123;</span><br><span class="line">    <span class="built_in">return</span> params[key] !== undefined &amp;&amp; params[key] !== <span class="string">''</span> &amp;&amp; params[key] !== null;</span><br><span class="line">    &#125;)</span><br><span class="line">      .sort()</span><br><span class="line">      .map(<span class="keyword">function</span>(key) &#123;</span><br><span class="line">          <span class="built_in">return</span> key + <span class="string">'='</span> + encodeURI(params[key]); // 中文需要转码</span><br><span class="line">          &#125;)</span><br><span class="line">      .join(<span class="string">'&amp;'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> get请求参数处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ip地址转换成十进制算法</title>
      <link href="ip%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8D%81%E8%BF%9B%E5%88%B6%E7%AE%97%E6%B3%95/"/>
      <url>ip%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8D%81%E8%BF%9B%E5%88%B6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> exp = /^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])$/;</span><br><span class="line">    <span class="built_in">let</span> IP = <span class="string">'219.239.255.255'</span>;</span><br><span class="line">    <span class="built_in">let</span> result = exp.exec(IP);</span><br><span class="line">    <span class="built_in">let</span> ip;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="built_in">let</span> ip_Arr = result.slice(1);</span><br><span class="line">            console.log(ip_Arr);</span><br><span class="line">            ip =</span><br><span class="line">          ((parseInt(ip_Arr[0]) &lt;&lt; 24) |</span><br><span class="line">            (parseInt(ip_Arr[1]) &lt;&lt; 16) |</span><br><span class="line">            (parseInt(ip_Arr[2]) &lt;&lt; 8) |</span><br><span class="line">            parseInt(ip_Arr[3])) &gt;&gt;&gt;</span><br><span class="line">          0;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (/^\d+$/.<span class="built_in">test</span>(IP) &amp;&amp; (ip = parseInt(IP)) &gt;= 0 &amp;&amp; ip &lt;= 0xffffffff) &#123;</span><br><span class="line">            ip = +IP;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            throw <span class="string">'The IP address is not normal! &gt;&gt; '</span> + IP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(ip);</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/lib-qqwry" target="_blank" rel="external nofollow noopener noreferrer">解析纯真数据库插件<code>lib-qqwry</code></a></p><p><a href="http://www.cz88.net" target="_blank" rel="external nofollow noopener noreferrer">纯真IP库</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的位运算符(&gt;&gt;、&gt;&gt;&gt;、|、&lt;&lt;、^、~)</title>
      <link href="js%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>js%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="2进制转换成10进制"><a href="#2进制转换成10进制" class="headerlink" title="2进制转换成10进制"></a>2进制转换成10进制</h2><p><img src="https://img-blog.csdnimg.cn/20200515134746934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="10进制转换成二进制"><a href="#10进制转换成二进制" class="headerlink" title="10进制转换成二进制"></a>10进制转换成二进制</h2><p><img src="https://img-blog.csdnimg.cn/2020051513491025.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="右移运算符（-gt-gt-）"><a href="#右移运算符（-gt-gt-）" class="headerlink" title="右移运算符（&gt;&gt;）"></a>右移运算符（&gt;&gt;）</h2><p>表示将一个数的二进制值向右移动指定的位数，头部补0，即除以2的指定次方（最高位即符号位不参与移动）。 (最后结果数相当于向下取整)</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4 &gt;&gt; 1</span><br><span class="line">// 2</span><br><span class="line"></span><br><span class="line">// 因为4的二进制形式为 00000000000000000000000000000100，</span><br><span class="line">// 右移一位得到 00000000000000000000000000000010，</span><br><span class="line">// 即为十进制的2</span><br><span class="line"></span><br><span class="line">-4 &gt;&gt; 1</span><br><span class="line">// -2</span><br><span class="line"></span><br><span class="line">// 因为-4的二进制形式为 11111111111111111111111111111100，</span><br><span class="line">// 右移一位，头部补1，得到 11111111111111111111111111111110,</span><br><span class="line">// 即为十进制的-2</span><br></pre></td></tr></table></figure><p>右移运算可以模拟 2 的整除运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">5 &gt;&gt; 1</span><br><span class="line">// 2</span><br><span class="line">// 相当于 5 / 2 = 2</span><br><span class="line"></span><br><span class="line">21 &gt;&gt; 2</span><br><span class="line">// 5</span><br><span class="line">// 相当于 21 / 4 = 5</span><br><span class="line"></span><br><span class="line">21 &gt;&gt; 3</span><br><span class="line">// 2</span><br><span class="line">// 相当于 21 / 8 = 2</span><br><span class="line"></span><br><span class="line">21 &gt;&gt; 4</span><br><span class="line">// 1</span><br><span class="line">// 相当于 21 / 16 = 1</span><br></pre></td></tr></table></figure><p>右移运算可以用来取整</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">123.456 &gt;&gt; 0</span><br><span class="line">// 123</span><br><span class="line"></span><br><span class="line">-123.456 &gt;&gt; 0</span><br><span class="line">// 123</span><br></pre></td></tr></table></figure><h2 id="带符号位的右移运算符（-gt-gt-gt-）"><a href="#带符号位的右移运算符（-gt-gt-gt-）" class="headerlink" title="带符号位的右移运算符（&gt;&gt;&gt;）"></a>带符号位的右移运算符（&gt;&gt;&gt;）</h2><p>表示将一个数的二进制形式向右移动，包括符号位也参与移动，头部补0。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（&gt;&gt;）完全一致，区别主要在于负数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4 &gt;&gt;&gt; 1</span><br><span class="line">// 2</span><br><span class="line"></span><br><span class="line">-4 &gt;&gt;&gt; 1</span><br><span class="line">// 2147483646</span><br><span class="line"></span><br><span class="line">// 因为-4的二进制形式为11111111111111111111111111111100，</span><br><span class="line">// 带符号位的右移一位，得到01111111111111111111111111111110，</span><br><span class="line">// 即为十进制的2147483646。</span><br></pre></td></tr></table></figure><p>这个运算实际上将一个值转为32位无符号整数。</p><p>查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 &gt;&gt;&gt; 0 // 4294967295</span><br></pre></td></tr></table></figure><p>上面代码表示，-1作为32位整数时，内部的储存形式使用无符号整数格式解读，值为 4294967295（即(2^32)-1，等于11111111111111111111111111111111）。</p><h2 id="左移运算符（-lt-lt-）"><a href="#左移运算符（-lt-lt-）" class="headerlink" title="左移运算符（&lt;&lt;）"></a>左移运算符（&lt;&lt;）</h2><p>左移运算符（&lt;&lt;）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方（最高位即符号位不参与移动）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">4 &gt;&gt; 1</span><br><span class="line">// 2</span><br><span class="line">/*</span><br><span class="line">// 因为4的二进制形式为 00000000000000000000000000000100，</span><br><span class="line">// 右移一位得到 00000000000000000000000000000010，</span><br><span class="line">// 即为十进制的2</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-4 &gt;&gt; 1</span><br><span class="line">// -2</span><br><span class="line">/*</span><br><span class="line">// 因为-4的二进制形式为 11111111111111111111111111111100，</span><br><span class="line">// 右移一位，头部补1，得到 11111111111111111111111111111110,</span><br><span class="line">// 即为十进制的-2</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="二进制或运算符"><a href="#二进制或运算符" class="headerlink" title="二进制或运算符(|)"></a>二进制或运算符(|)</h2><p>二进制或运算符（|）逐位比较两个运算子，两个二进制位之中只要有一个为1，就返回1，否则返回0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 | 3 // 3</span><br><span class="line">3| 3 // 3</span><br></pre></td></tr></table></figure><p>上面代码中，0和3的二进制形式分别是00和11，所以进行二进制或运算会得到11（即3）。</p><p>位运算只对整数有效，遇到小数时，会将小数部分舍去，只保留整数部分。所以，将一个小数与0进行二进制或运算，等同于对该数去除小数部分，即取整数位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.9 | 0 // 2</span><br><span class="line">-2.9 | 0 // -2</span><br></pre></td></tr></table></figure><p>需要注意的是，这种取整方法不适用超过32位整数最大值2147483647的数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2147483649.4 | 0;</span><br><span class="line">// -2147483647</span><br></pre></td></tr></table></figure><h2 id="二进制与运算符-amp"><a href="#二进制与运算符-amp" class="headerlink" title="二进制与运算符(&amp;)"></a>二进制与运算符(&amp;)</h2><p>二进制与运算符（&amp;）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为0，就返回0，否则返回1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &amp; 3 // 0</span><br></pre></td></tr></table></figure><p>上面代码中，0（二进制00）和3（二进制11）进行二进制与运算会得到00（即0）。</p><h2 id="二进制否运算符"><a href="#二进制否运算符" class="headerlink" title="二进制否运算符(~)"></a>二进制否运算符(~)</h2><p>二进制否运算符（~）将每个二进制位都变为相反值（0变为1，1变为0）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。<br><code>（所有的位运算都只对整数有效）使用二进制否运算取整，是所有取整方法中最快的一种</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ 3 // -4</span><br></pre></td></tr></table></figure><p>上面表达式对3进行二进制否运算，得到-4。之所以会有这样的结果，是因为位运算时，JavaScirpt 内部将所有的运算子都转为32位的二进制整数再进行运算。</p><p>3的32位整数形式是00000000000000000000000000000011，二进制否运算以后得到11111111111111111111111111111100。由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。这个数减去1等于11111111111111111111111111111011，再取一次反得到00000000000000000000000000000100，再加上负号就是-4。考虑到这样的过程比较麻烦，可以简单记忆成，一个数与自身的取反值相加，等于-1。<br>(相当于 -1 -（3） = -4)</p><h2 id="异或运算（-）"><a href="#异或运算（-）" class="headerlink" title="异或运算（^）"></a>异或运算（^）</h2><p>异或运算（^）在两个二进制位不同时返回1，相同时返回0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 ^ 3 // 3</span><br></pre></td></tr></table></figure><p>上面表达式中，0（二进制00）与3（二进制11）进行异或运算，它们每一个二进制位都不同，所以得到11（即3）。</p><p>“异或运算”有一个特殊运用，连续对两个数a和b进行三次异或运算，a^=b; b^=a; a^=b;，可以互换它们的值。这意味着，使用“异或运算”可以在不引入临时变量的前提下，互换两个变量的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;</span><br><span class="line">var b = 99;</span><br><span class="line"></span><br><span class="line">a ^= b, b ^= a, a ^= b;</span><br><span class="line"></span><br><span class="line">a // 99</span><br><span class="line">b // 10</span><br></pre></td></tr></table></figure><p><code>这是互换两个变量的值的最快方法。</code><br>异或运算也可以用来取整。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12.9 ^ 0 // 12</span><br></pre></td></tr></table></figure><p><a href="https://javascript.ruanyifeng.com/grammar/operator.html#toc25" target="_blank" rel="external nofollow noopener noreferrer">运算符参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 位运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高德地图城市编码表下载地址</title>
      <link href="%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E5%9F%8E%E5%B8%82%E7%BC%96%E7%A0%81%E8%A1%A8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/"/>
      <url>%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E5%9F%8E%E5%B8%82%E7%BC%96%E7%A0%81%E8%A1%A8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://lbs.amap.com/api/webservice/download" target="_blank" rel="external nofollow noopener noreferrer">下载地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 高德地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>decimal.js的使用</title>
      <link href="decimal-js%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>decimal-js%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>decimal.js<br>1.js有精度问题, 对于一些金额的计算就总是与偶莫名其妙的问题<br>2.decimal.js是使用的二进制来计算的, 所以能解决js的精度问题</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>npm install –save decimal.js</p></blockquote><h2 id="基本的加减乘除"><a href="#基本的加减乘除" class="headerlink" title="基本的加减乘除"></a>基本的加减乘除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const Decimal = require(<span class="string">'decimal.js'</span>);</span><br><span class="line">const a = 9.99;</span><br><span class="line">const b = 8.03;</span><br><span class="line"></span><br><span class="line">// 加法</span><br><span class="line"><span class="built_in">let</span> c = new Decimal(a).add(new Decimal(b)) </span><br><span class="line"></span><br><span class="line">// 减法</span><br><span class="line"><span class="built_in">let</span> d = new Decimal(a).sub(new Decimal(b))</span><br><span class="line"></span><br><span class="line">// 乘法</span><br><span class="line"><span class="built_in">let</span> e = new Decimal(a).mul(new Decimal(b))</span><br><span class="line"></span><br><span class="line">// 除法</span><br><span class="line"><span class="built_in">let</span> f = new Decimal(a).div(new Decimal(b))</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 转化成数字</span><br><span class="line"><span class="built_in">let</span> f = new Decimal(a).div(new Decimal(b)).toNumber()</span><br><span class="line">// 判0 返回boolean</span><br><span class="line"><span class="built_in">let</span> d = new Decimal(a).sub(new Decimal(b)).isZero()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/MikeMcl/decimal.js" target="_blank" rel="external nofollow noopener noreferrer">github</a></p><p><a href="http://mikemcl.github.io/decimal.js/" target="_blank" rel="external nofollow noopener noreferrer">api</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> decimal.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用任务队列kue处理订单</title>
      <link href="%E4%BD%BF%E7%94%A8%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97kue%E5%A4%84%E7%90%86%E8%AE%A2%E5%8D%95/"/>
      <url>%E4%BD%BF%E7%94%A8%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97kue%E5%A4%84%E7%90%86%E8%AE%A2%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在计算机科学中，消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式。</p><p>在高并发或者在计算资源有限的情况下，由于来不及同步处理，请求往往会发生堵塞，比如说，大量的insert，update之类的请求同时到达MySQL，直接导致无数的行锁表锁，甚至最后请求会堆积过多，从而触发too many connections错误。通过使用消息队列，我们可以异步处理请求，从而缓解系统的压力。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>kue是基于node.js构建的，redis支持的优先级任务队列。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在koa中使用<br>安装插件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add kue</span><br><span class="line">yarn add ioredis</span><br></pre></td></tr></table></figure><p>在services中新增kue.service.js</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">// 使用kue任务队列处理订单任务</span><br><span class="line">const kue = require(<span class="string">'kue'</span>);</span><br><span class="line">const config = require(<span class="string">'../config/config'</span>);</span><br><span class="line">const Queue = kue.createQueue(config.queue);</span><br><span class="line">const ErrorConf = require(<span class="string">'../../common/config'</span>).error_conf;</span><br><span class="line">const CustomError = require(<span class="string">'../../common/lib/error_constructor'</span>).CustomError;</span><br><span class="line">const Order = require(<span class="string">'./order.service'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 创建定时任务</span><br><span class="line">    async crateTask(&#123; title, params = &#123;&#125;, delayTime &#125;) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="built_in">let</span> job = Queue.create(title, params)</span><br><span class="line">                .delay(delayTime) // 延时多少毫秒</span><br><span class="line">                .attempts(2)// 重试2次</span><br><span class="line">                .removeOnComplete(<span class="literal">true</span>) // 在完成时使用自动删除作业</span><br><span class="line">                .save();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> job;</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            console.log(<span class="string">'error===========&gt;'</span>, error);</span><br><span class="line">            throw new CustomError(<span class="string">'创建定时任务失败'</span>, ErrorConf.server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 定时器处理订单任务</span><br><span class="line">    async <span class="function"><span class="title">runProcessJob</span></span>() &#123;</span><br><span class="line">        this.orderPayment();</span><br><span class="line">        this.studentOrder();</span><br><span class="line">    &#125;,</span><br><span class="line">    // 处理未支付的订单</span><br><span class="line">    async <span class="function"><span class="title">orderPayment</span></span>() &#123;</span><br><span class="line">        Queue.process(<span class="string">'orderPayment'</span>, 2, async (job, <span class="keyword">done</span>) =&gt; &#123;</span><br><span class="line">            <span class="built_in">let</span> json = JSON.parse(JSON.stringify(job));</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">if</span> (json.data) &#123;</span><br><span class="line">                   // 自己自定义处理订单</span><br><span class="line">                    await Order.orderPayment(json.data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                console.log(<span class="string">'error'</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">done</span>(); // 执行下一步</span><br><span class="line">        &#125;);</span><br><span class="line">        Queue.watchStuckJobs(1000);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 自动完成订单</span><br><span class="line">    async <span class="function"><span class="title">studentOrder</span></span>() &#123;</span><br><span class="line">        Queue.process(<span class="string">'studentOrder'</span>, 2, async (job, <span class="keyword">done</span>) =&gt; &#123;</span><br><span class="line">            <span class="built_in">let</span> json = JSON.parse(JSON.stringify(job));</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">if</span> (json.data) &#123;</span><br><span class="line">                   // 自己自定义处理订单</span><br><span class="line">                    await Order.OrderSuccess(json.data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                console.log(<span class="string">'error'</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">done</span>(); // 执行下一步</span><br><span class="line">        &#125;);</span><br><span class="line">        Queue.watchStuckJobs(1000);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const job = require(<span class="string">'../services/kue.service'</span>);</span><br><span class="line"><span class="built_in">let</span> jobInfo = await job.crateTask(&#123;</span><br><span class="line">                <span class="string">'title'</span>: <span class="string">'orderPayment'</span>,</span><br><span class="line">                <span class="string">'params'</span>: &#123; orderId &#125;,</span><br><span class="line">                <span class="string">'delayTime'</span>: 24 * 60 * 60 * 1000, // 一天时间关闭未支付订单</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><p>在app.js中执行任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">App.listen(config.port, () =&gt; &#123;</span><br><span class="line">    console.log(`项目启动成功 端口号 PORT   ===    <span class="variable">$&#123;config.port&#125;</span>`);</span><br><span class="line"></span><br><span class="line">    // 处理订单定时任务</span><br><span class="line">    job.runProcessJob();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/egg-delayed-queue" target="_blank" rel="external nofollow noopener noreferrer">在egg 中使用 参考文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> koa </tag>
            
            <tag> kue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodej,ocr识别图片中的文字</title>
      <link href="nodej-ocr%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/"/>
      <url>nodej-ocr%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>使用的是<a href="https://help.aliyun.com/document_detail/63004.html?spm=a2c4g.11186623.6.606.5c8c2cddMnMKqQ" target="_blank" rel="external nofollow noopener noreferrer">阿里云文档</a></p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200317152528631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><!-- more --><p>获取到 对应的accessKeyId和 accessKeySecret</p><p>新建test.js 和 green-nodejs-invoker.js 文件 这两个文件要在同一目录下，不然引入报错</p><p>test.js代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">const uuid = require(<span class="string">'node-uuid'</span>);</span><br><span class="line">const greenNodejs = require(<span class="string">'./green-nodejs-invoker.js'</span>);</span><br><span class="line"></span><br><span class="line">// 默认参数</span><br><span class="line">const accessKeyId = <span class="string">'&lt;your accessKeyId&gt;'</span>;</span><br><span class="line">const accessKeySecret = <span class="string">'&lt;your accessKeySecret&gt;'</span>;</span><br><span class="line">const greenVersion = <span class="string">'2017-01-12'</span>;</span><br><span class="line">const hostname = <span class="string">'green.cn-shanghai.aliyuncs.com'</span>;</span><br><span class="line">const path = <span class="string">'/green/image/scan'</span>; // 需要请求的接口</span><br><span class="line">const clientInfo = &#123;</span><br><span class="line">    <span class="string">'ip'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 测试调用</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    // 请求体,根据需要调用相应的算法</span><br><span class="line">    <span class="built_in">let</span> requestBody = JSON.stringify(&#123;</span><br><span class="line">        <span class="string">'bizType'</span>: <span class="string">'Green'</span>,</span><br><span class="line">        <span class="string">'scenes'</span>: [ <span class="string">'ocr'</span> ], // 指定检测场景 ocr 图片文字识别 //支持多种形式</span><br><span class="line">        <span class="string">'tasks'</span>: [&#123; // 指定检测对象，JSON数组中的每个元素是一个OCR图文检测任务结构体（image表）。最多支持10个元素，即对10张图片进行识别</span><br><span class="line">            <span class="string">'dataId'</span>: uuid.v1(),</span><br><span class="line">            <span class="string">'url'</span>: <span class="string">'https://dss2.bdstatic.com/8_V1bjqh_Q23odCf/pacific/1939251838.png'</span>,</span><br><span class="line">        &#125;, &#123; // 支持多个参数</span><br><span class="line">            <span class="string">'dataId'</span>: uuid.v1(),</span><br><span class="line">            <span class="string">'url'</span>: <span class="string">'https://dss3.baidu.com/-rVXeDTa2gU2pMbgoY3K/it/u=842202544,1222336704&amp;fm=202&amp;mola=new&amp;crop=v1'</span>,</span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> bizCfg = &#123;</span><br><span class="line">        <span class="string">'accessKeyId'</span>: accessKeyId,</span><br><span class="line">        <span class="string">'accessKeySecret'</span>: accessKeySecret,</span><br><span class="line">        <span class="string">'path'</span>: path,</span><br><span class="line">        <span class="string">'clientInfo'</span>: clientInfo,</span><br><span class="line">        <span class="string">'requestBody'</span>: requestBody,</span><br><span class="line">        <span class="string">'hostname'</span>: hostname,</span><br><span class="line">        <span class="string">'greenVersion'</span>: greenVersion,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> result = await greenNodejs.getImageInfo(bizCfg);</span><br><span class="line">    console.log(<span class="string">'result==========&gt;'</span>, result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>green-nodejs-invoker.js代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const crypto = require(<span class="string">'crypto'</span>);</span><br><span class="line">const uuid = require(<span class="string">'node-uuid'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    async getImageInfo(bizCfg, callback) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="built_in">let</span> path = bizCfg[<span class="string">'path'</span>];</span><br><span class="line">            <span class="built_in">let</span> clientInfo = bizCfg[<span class="string">'clientInfo'</span>];</span><br><span class="line">            <span class="built_in">let</span> requestBody = bizCfg[<span class="string">'requestBody'</span>];</span><br><span class="line">            <span class="built_in">let</span> greenVersion = bizCfg[<span class="string">'greenVersion'</span>];</span><br><span class="line">            <span class="built_in">let</span> hostname = bizCfg[<span class="string">'hostname'</span>];</span><br><span class="line">            <span class="built_in">let</span> gmtCreate = new Date().toUTCString();</span><br><span class="line">            <span class="built_in">let</span> md5 = crypto.createHash(<span class="string">'md5'</span>);</span><br><span class="line">            // 请求头</span><br><span class="line">            <span class="built_in">let</span> requestHeaders = &#123;</span><br><span class="line">                <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                <span class="string">'Content-MD5'</span>: md5.update(requestBody).digest().toString(<span class="string">'base64'</span>),</span><br><span class="line">                <span class="string">'Date'</span>: gmtCreate,</span><br><span class="line">                <span class="string">'x-acs-version'</span>: greenVersion,</span><br><span class="line">                <span class="string">'x-acs-signature-nonce'</span>: uuid.v1(),</span><br><span class="line">                <span class="string">'x-acs-signature-version'</span>: <span class="string">'1.0'</span>,</span><br><span class="line">                <span class="string">'x-acs-signature-method'</span>: <span class="string">'HMAC-SHA1'</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            // 对请求的签名</span><br><span class="line">            signature(requestHeaders, bizCfg);</span><br><span class="line"></span><br><span class="line">            // HTTP请求设置</span><br><span class="line">            <span class="built_in">let</span> options = &#123;</span><br><span class="line">                <span class="string">'hostname'</span>: hostname,</span><br><span class="line">                <span class="string">'port'</span>: 80,</span><br><span class="line">                <span class="string">'path'</span>: encodeURI(path + <span class="string">'?clientInfo='</span> + JSON.stringify(clientInfo)),</span><br><span class="line">                <span class="string">'method'</span>: <span class="string">'POST'</span>,</span><br><span class="line">                <span class="string">'headers'</span>: requestHeaders,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">let</span> result = await new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                <span class="built_in">let</span> chunks = [];</span><br><span class="line">                <span class="built_in">let</span> req = http.request(options, <span class="keyword">function</span>(res) &#123;</span><br><span class="line">                // res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">                    res.on(<span class="string">'error'</span>, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">                        console.log(error);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    res.on(<span class="string">'data'</span>, <span class="keyword">function</span>(chunk) &#123;</span><br><span class="line">                        chunks.push(chunk);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    res.on(<span class="string">'end'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">                        <span class="built_in">let</span> data = Buffer.concat(chunks).toString();</span><br><span class="line">                        <span class="built_in">return</span> resolve(data);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                req.on(<span class="string">'error'</span>, <span class="keyword">function</span>(e) &#123;</span><br><span class="line">                    console.log(<span class="string">'err===&gt;'</span>, e);</span><br><span class="line">                    <span class="built_in">return</span> reject(e);</span><br><span class="line">                &#125;);</span><br><span class="line">                // 将数据写入请求体</span><br><span class="line">                req.write(requestBody);</span><br><span class="line">                req.end();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> result;</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            <span class="built_in">return</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 签名</span><br><span class="line"><span class="keyword">function</span> signature(requestHeaders, bizCfg) &#123;</span><br><span class="line">    <span class="built_in">let</span> accessKeyId = bizCfg[<span class="string">'accessKeyId'</span>];</span><br><span class="line">    <span class="built_in">let</span> accessKeySecret = bizCfg[<span class="string">'accessKeySecret'</span>];</span><br><span class="line">    <span class="built_in">let</span> path = bizCfg[<span class="string">'path'</span>];</span><br><span class="line">    <span class="built_in">let</span> clientInfo = bizCfg[<span class="string">'clientInfo'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> signature = [];</span><br><span class="line">    signature.push(<span class="string">'POST\n'</span>);</span><br><span class="line">    signature.push(<span class="string">'application/json\n'</span>);</span><br><span class="line">    signature.push(requestHeaders[<span class="string">'Content-MD5'</span>] + <span class="string">'\n'</span>);</span><br><span class="line">    signature.push(<span class="string">'application/json\n'</span>);</span><br><span class="line">    signature.push(requestHeaders[<span class="string">'Date'</span>] + <span class="string">'\n'</span>);</span><br><span class="line">    signature.push(<span class="string">'x-acs-signature-method:HMAC-SHA1\n'</span>);</span><br><span class="line">    signature.push(<span class="string">'x-acs-signature-nonce:'</span> + requestHeaders[<span class="string">'x-acs-signature-nonce'</span>] + <span class="string">'\n'</span>);</span><br><span class="line">    signature.push(<span class="string">'x-acs-signature-version:1.0\n'</span>);</span><br><span class="line">    signature.push(<span class="string">'x-acs-version:2017-01-12\n'</span>);</span><br><span class="line">    signature.push(path + <span class="string">'?clientInfo='</span> + JSON.stringify(clientInfo));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> authorization = crypto.createHmac(<span class="string">'sha1'</span>, accessKeySecret)</span><br><span class="line">        .update(signature.join(<span class="string">''</span>))</span><br><span class="line">        .digest()</span><br><span class="line">        .toString(<span class="string">'base64'</span>);</span><br><span class="line"></span><br><span class="line">    requestHeaders.Authorization = <span class="string">'acs '</span> + accessKeyId + <span class="string">':'</span> + authorization;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果如下：<br><img src="https://img-blog.csdnimg.cn/20200317153040923.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ocr </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序订阅消息推送</title>
      <link href="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
      <url>%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">const request = require(<span class="string">'superagent'</span>);</span><br><span class="line">const moment = require(<span class="string">'moment'</span>);</span><br><span class="line"></span><br><span class="line">// 文档 https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/uniform-message/uniformMessage.send.html</span><br><span class="line">// 由于小程序订阅消息只支持一次性订阅（一个特殊服务才支持永久订阅）只能使用服务号来进行消息推送</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> openid = <span class="string">''</span>; // 用户openid 登录获取</span><br><span class="line">    <span class="built_in">let</span> appid = <span class="string">''</span>; // 小程序的appid</span><br><span class="line">    <span class="built_in">let</span> appsecret = <span class="string">''</span>; // 小程序secret</span><br><span class="line">    <span class="built_in">let</span> template_id = <span class="string">''</span>; // 模板id</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> data = &#123;</span><br><span class="line">        <span class="string">'first'</span>: &#123;</span><br><span class="line">            <span class="string">'value'</span>: <span class="string">'你有一条新订单'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'keyword1'</span>: &#123;</span><br><span class="line">            <span class="string">'value'</span>: <span class="string">'科目1'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'keyword2'</span>: &#123;</span><br><span class="line">            <span class="string">'value'</span>: moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'remark'</span>: &#123;</span><br><span class="line">            <span class="string">'value'</span>: <span class="string">'请尽快处理！'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 获取需要推送的小程序的access_token</span><br><span class="line">    <span class="built_in">let</span> accessTokenInfo = await request.get(`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>`).<span class="built_in">set</span>(<span class="string">'accept'</span>, <span class="string">'json'</span>);</span><br><span class="line">    <span class="built_in">let</span> &#123; access_token = <span class="string">''</span>, errcode, errmsg &#125; = accessTokenInfo.body || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (errcode) throw errmsg;</span><br><span class="line">    <span class="built_in">let</span> url = `https://api.weixin.qq.com/cgi-bin/message/wxopen/template/uniform_send?access_token=<span class="variable">$&#123;access_token&#125;</span>`;</span><br><span class="line">    <span class="built_in">let</span> body = &#123;</span><br><span class="line">        <span class="string">'touser'</span>: openid,</span><br><span class="line">        <span class="string">'access_token'</span>: access_token,</span><br><span class="line">        <span class="string">'mp_template_msg'</span>: &#123;</span><br><span class="line">            <span class="string">'appid'</span>: <span class="string">''</span>, // 公众号模板的appid</span><br><span class="line">            <span class="string">'template_id'</span>: template_id, // 与data对应</span><br><span class="line">            <span class="string">'miniprogram'</span>: &#123;</span><br><span class="line">                <span class="string">'appid'</span>: appid, // 小程序的appid</span><br><span class="line">                // <span class="string">'pagepath'</span>: <span class="string">'index?foo=bar'</span>, // 进入小程序路径 不填默认主页</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'data'</span>: data, // 与template_id对应</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">let</span> result = await request.post(url).send(body).<span class="built_in">set</span>(<span class="string">'accept'</span>, <span class="string">'json'</span>);</span><br><span class="line"></span><br><span class="line">    console.log(result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200511181711383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">参数格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;first.DATA&#125;&#125;</span><br><span class="line">内容：&#123;&#123;keyword1.DATA&#125;&#125;</span><br><span class="line">时间：&#123;&#123;keyword2.DATA&#125;&#125;</span><br><span class="line">&#123;&#123;remark.DATA&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> superagent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序登录获取openid和unionid</title>
      <link href="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E8%8E%B7%E5%8F%96openid%E5%92%8Cunionid/"/>
      <url>%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E8%8E%B7%E5%8F%96openid%E5%92%8Cunionid/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">const got = require(<span class="string">'got'</span>);</span><br><span class="line">const config = require(<span class="string">'./app/config/config'</span>);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> appid = 微信小程序appid;</span><br><span class="line">    <span class="built_in">let</span> appsecret = 微信小程序secret;</span><br><span class="line">    <span class="built_in">let</span> code = <span class="string">'011fFOne11STVx0r5dme1OKZne1fFOnO'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> WxLoginInfo = (await got.get(`https://api.weixin.qq.com/sns/jscode2session?appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>&amp;js_code=<span class="variable">$&#123;code&#125;</span>&amp;grant_type=authorization_code`, &#123; <span class="string">'json'</span>: <span class="literal">true</span> &#125;)).body;</span><br><span class="line">    console.log(<span class="string">'WxLoginInfo==========&gt;'</span>, WxLoginInfo);</span><br><span class="line">    // 返回值</span><br><span class="line">    <span class="built_in">let</span> &#123; session_key, openid, unionid &#125; = WxLoginInfo || &#123;&#125;; (获取unionid是小程序必须绑定服务号，不然这个值没有)</span><br><span class="line">    // &#123;session_key: <span class="string">"YozKPN8fRCbxg/gsFpXWZg=="</span>, openid: <span class="string">"o6MbF5J5J6Ay5au3WvnKgYKnh"</span>, unionid: <span class="string">"o5NOMjtuRtqcSfwYrScf7OGIDIyM"</span>&#125;</span><br><span class="line">    <span class="built_in">let</span> accessTokenInfo = (await got.get(`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>`, &#123; <span class="string">'json'</span>: <span class="literal">true</span> &#125;)).body;</span><br><span class="line">    <span class="built_in">let</span> &#123; access_token = <span class="string">''</span>, errcode, errmsg &#125; = accessTokenInfo || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序二维码</title>
      <link href="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">const request = require(<span class="string">'request'</span>);</span><br><span class="line">const got = require(<span class="string">'got'</span>);</span><br><span class="line">const chance = require(<span class="string">'chance'</span>)();</span><br><span class="line">const fs = require(<span class="string">'fs'</span>);</span><br><span class="line">const path = require(<span class="string">'path'</span>);</span><br><span class="line">const PassThrough = require(<span class="string">'stream'</span>).PassThrough;</span><br><span class="line">//文档 https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html</span><br><span class="line"></span><br><span class="line">// 生成图片到本地</span><br><span class="line">// (async () =&gt; &#123;</span><br><span class="line">//     <span class="built_in">let</span> appid = <span class="string">''</span>; // 微信小程序</span><br><span class="line">//     <span class="built_in">let</span> appsecret = <span class="string">''</span>; // 微信小程序</span><br><span class="line">//     <span class="built_in">let</span> accessTokenInfo = (await got.get(`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>`, &#123; <span class="string">'json'</span>: <span class="literal">true</span> &#125;)).body;</span><br><span class="line">//     <span class="built_in">let</span> &#123; access_token &#125; = accessTokenInfo || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">//     <span class="built_in">let</span> params = &#123;</span><br><span class="line">//         <span class="string">'scene'</span>: chance.hash(&#123; <span class="string">'length'</span>: 32 &#125;).toLowerCase(),</span><br><span class="line">//     // <span class="string">'page'</span>: <span class="string">'pages/index/index'</span>,</span><br><span class="line">//     &#125;;</span><br><span class="line"></span><br><span class="line">//     // 创建一个可读浏</span><br><span class="line">//     <span class="built_in">let</span> name = `<span class="variable">$&#123;new Date().getTime()&#125;</span><span class="variable">$&#123;chance.hash(&#123; 'length': 4 &#125;</span>).toLowerCase()&#125;.png`;</span><br><span class="line">//     <span class="built_in">let</span> file = path.resolve(__dirname, `../videos/<span class="variable">$&#123;name&#125;</span>`);</span><br><span class="line">//     <span class="built_in">let</span> writeStream = fs.createWriteStream(file);</span><br><span class="line"></span><br><span class="line">//     <span class="built_in">let</span> result = await new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">//         <span class="built_in">return</span> request(&#123;</span><br><span class="line">//             <span class="string">'method'</span>: <span class="string">'POST'</span>,</span><br><span class="line">//             <span class="string">'url'</span>: `https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=<span class="variable">$&#123;access_token&#125;</span>`,</span><br><span class="line">//             <span class="string">'json'</span>: <span class="literal">true</span>,</span><br><span class="line">//             <span class="string">'body'</span>: &#123;</span><br><span class="line">//                 <span class="string">'scene'</span>: <span class="string">'222'</span>,</span><br><span class="line">//             &#125;,</span><br><span class="line">//         &#125;, (err, res, body) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">//             <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">//             // resolve(res);</span><br><span class="line">//         &#125;).pipe(fs.createWriteStream(<span class="string">'doodle.png'</span>));</span><br><span class="line">//     &#125;);</span><br><span class="line"></span><br><span class="line">//     // 如果调用成功，会直接返回图片二进制内容，如果请求失败，会返回 JSON 格式的数据</span><br><span class="line">//     // console.log(<span class="string">'result.body=====&gt;'</span>, result.body);</span><br><span class="line">//     // console.log(<span class="string">'result.body=====&gt;'</span>, result.body.errcode); // 45009 频率受限制 41030 所传page页面不存在，或者小程序没有发布</span><br><span class="line"></span><br><span class="line">// &#125;)();</span><br><span class="line"></span><br><span class="line">const OSS = require(<span class="string">'ali-oss'</span>);</span><br><span class="line">const client = new OSS(&#123;</span><br><span class="line">    <span class="string">'region'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'accessKeyId'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'accessKeySecret'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'bucket'</span>: <span class="string">''</span>,</span><br><span class="line">&#125;);</span><br><span class="line">// 生成图片到oss</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> appid = <span class="string">'wx543f14cc9070b343'</span>; // 小程序appid </span><br><span class="line">    <span class="built_in">let</span> appsecret = <span class="string">'ae811740d8776b7cdd5233a141c1b01d'</span>; //  小程序secret</span><br><span class="line">    <span class="built_in">let</span> accessTokenInfo = (await got.get(`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="variable">$&#123;appid&#125;</span>&amp;secret=<span class="variable">$&#123;appsecret&#125;</span>`, &#123; <span class="string">'json'</span>: <span class="literal">true</span> &#125;)).body;</span><br><span class="line">    <span class="built_in">let</span> &#123; access_token &#125; = accessTokenInfo || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> params = &#123;</span><br><span class="line">        <span class="string">'scene'</span>: chance.hash(&#123; <span class="string">'length'</span>: 32 &#125;).toLowerCase(),</span><br><span class="line">        // <span class="string">'page'</span>: <span class="string">'pages/index/index'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> stream;</span><br><span class="line">    <span class="built_in">let</span> pipf = await new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        stream = request(&#123;</span><br><span class="line">            <span class="string">'method'</span>: <span class="string">'POST'</span>,</span><br><span class="line">            <span class="string">'url'</span>: `https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=<span class="variable">$&#123;access_token&#125;</span>`,</span><br><span class="line">            <span class="string">'json'</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">'body'</span>: &#123;</span><br><span class="line">                <span class="string">'scene'</span>: <span class="string">'222'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;).on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">            resolve(0);</span><br><span class="line">        &#125;)</span><br><span class="line">            .on(<span class="string">'response'</span>, response =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (response.statusCode !== 200) &#123;</span><br><span class="line">                    resolve(0);</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(1);</span><br><span class="line">            &#125;)</span><br><span class="line">            .pipe(PassThrough());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!pipf) &#123;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //上传到oss上</span><br><span class="line">    <span class="built_in">let</span> result = await client.putStream(`/common/organization/<span class="variable">$&#123;new Date().getTime()&#125;</span><span class="variable">$&#123;chance.hash(&#123; 'length': 4 &#125;</span>).toLowerCase()&#125;/org.png`, stream);</span><br><span class="line"></span><br><span class="line">    console.log(<span class="string">'result=======&gt;'</span>, result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql主键id自增问题和随机数</title>
      <link href="postgresql%E4%B8%BB%E9%94%AEid%E8%87%AA%E5%A2%9E%E9%97%AE%E9%A2%98%E5%92%8C%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>postgresql%E4%B8%BB%E9%94%AEid%E8%87%AA%E5%A2%9E%E9%97%AE%E9%A2%98%E5%92%8C%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>1.设置随机<br>‘order’: sequelizeClient.random()<br><img src="https://img-blog.csdnimg.cn/2020051117450869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.修改id值 uniques 是表名 （出现错误<code>SequelizeUniqueConstraintError</code>）<br>select max(id) FROM uniques // 查询最大id值<br>max 是最大id值加1<br>select setval(‘uniques_id_seq’, max)</p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql统计排序查询（排序值中含有null排序和关联查询排序）</title>
      <link href="postgresql%E7%BB%9F%E8%AE%A1%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2%EF%BC%88%E6%8E%92%E5%BA%8F%E5%80%BC%E4%B8%AD%E5%90%AB%E6%9C%89null%E6%8E%92%E5%BA%8F%E5%92%8C%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
      <url>postgresql%E7%BB%9F%E8%AE%A1%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2%EF%BC%88%E6%8E%92%E5%BA%8F%E5%80%BC%E4%B8%AD%E5%90%AB%E6%9C%89null%E6%8E%92%E5%BA%8F%E5%92%8C%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> order = [[ <span class="string">'id'</span>, <span class="string">'DESC'</span> ]];</span><br><span class="line"><span class="built_in">let</span> order_count_sql = sequelize.literal(<span class="string">'(select cast(COUNT(*) as integer) from orders as orders where ("orders"."deletedAt" IS NULL) AND orders.teacher_id="teacher"."id" AND state=40)'</span>);</span><br><span class="line">        <span class="built_in">let</span> order_count = [ order_count_sql, <span class="string">'order_count'</span> ];</span><br><span class="line">        <span class="built_in">let</span> sales_sql = sequelize.literal(<span class="string">'(SELECT sum("price") AS "sum" FROM "orders" AS "orders" where ("orders"."deletedAt" IS NULL) AND orders.teacher_id="teacher"."id" AND state=40)'</span>);</span><br><span class="line">        <span class="built_in">let</span> sales = [ sales_sql, <span class="string">'sales'</span> ];</span><br><span class="line">        <span class="built_in">let</span> score = [ sequelize.literal(`(select AVG(<span class="string">"score"</span>) AS <span class="string">"score"</span> from evaluates as evaluates <span class="built_in">where</span> evaluates.teacher_id=<span class="string">"teacher"</span>.<span class="string">"id"</span> AND <span class="built_in">type</span>=<span class="string">'$&#123;'</span>order<span class="string">'&#125;'</span>)`), <span class="string">'score'</span> ];</span><br><span class="line"></span><br><span class="line">// overlap</span><br><span class="line"><span class="built_in">let</span> goods_count = [ sequelize.literal(<span class="string">'(SELECT cast(COUNT(*) as integer) AS "count" FROM "goods" AS "goods" WHERE "goods"."deletedAt" IS NULL AND "goods"."state" = 1 AND "goods"."classes" &amp;&amp; ARRAY["class"."id"]::INTEGER[])'</span>), <span class="string">'goods_count'</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (order_count_order) &#123;</span><br><span class="line">            <span class="keyword">if</span> (order_count_order === <span class="string">'ASC'</span>)order.unshift([ order_count_sql, <span class="string">'ASC nulls first'</span> ]);</span><br><span class="line">            <span class="keyword">if</span> (order_count_order === <span class="string">'DESC'</span>)order.unshift([ order_count_sql, <span class="string">'DESC nulls last'</span> ]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sales_order) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sales_order === <span class="string">'ASC'</span>)order.unshift([ sales_sql, <span class="string">'ASC nulls first'</span> ]);</span><br><span class="line">            <span class="keyword">if</span> (sales_order === <span class="string">'DESC'</span>)order.unshift([ sales_sql, <span class="string">'DESC nulls last'</span> ]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">let</span> &#123; rows, count &#125; = await TeacherModel.findAndCountAll(&#123;</span><br><span class="line">            <span class="string">'attributes'</span>: [ <span class="string">'id'</span>, <span class="string">'hash'</span>, <span class="string">'openid'</span>, <span class="string">'avatar'</span>, <span class="string">'name'</span>, <span class="string">'nickname'</span>, <span class="string">'sex'</span>, <span class="string">'phone'</span>, <span class="string">'subject_id'</span>, <span class="string">'teacher_age'</span>, <span class="string">'state'</span>, <span class="string">'money'</span>,</span><br><span class="line">                <span class="string">'wx'</span>, <span class="string">'createdAt'</span>, order_count, sales, score ],</span><br><span class="line">            <span class="string">'where'</span>: &#123;</span><br><span class="line">                ...(name &amp;&amp; &#123; <span class="string">'name'</span>: &#123; <span class="string">'$like'</span>: `%<span class="variable">$&#123;name&#125;</span>%` &#125; &#125;),</span><br><span class="line">                ...(nickname &amp;&amp; &#123; <span class="string">'nickname'</span>: &#123; <span class="string">'$like'</span>: `%<span class="variable">$&#123;nickname&#125;</span>%` &#125; &#125;),</span><br><span class="line">                ...(phone &amp;&amp; &#123; phone &#125;),</span><br><span class="line">                ...(state !== <span class="string">'all'</span> &amp;&amp; &#123; state &#125;),</span><br><span class="line">            &#125;,</span><br><span class="line">            order,</span><br><span class="line">            <span class="built_in">limit</span>,</span><br><span class="line">            offset,</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> // include 关联查询排序</span><br><span class="line"></span><br><span class="line"> <span class="built_in">let</span> &#123; rows, count &#125; = await GoodsModel.findAndCountAll(&#123;</span><br><span class="line">            <span class="string">'attributes'</span>: &#123; <span class="string">'exclude'</span>: [ <span class="string">'deletedAt'</span>, <span class="string">'updatedAt'</span> ] &#125;,</span><br><span class="line">            <span class="built_in">limit</span>,</span><br><span class="line">            <span class="built_in">where</span>,</span><br><span class="line">            offset,</span><br><span class="line">            <span class="string">'distinct'</span>: <span class="literal">true</span>, // 去重</span><br><span class="line">            <span class="string">'include'</span>: [&#123;</span><br><span class="line">                <span class="string">'attributes'</span>: &#123; <span class="string">'exclude'</span>: [ <span class="string">'deletedAt'</span>, <span class="string">'updatedAt'</span> ] &#125;,</span><br><span class="line">                <span class="string">'model'</span>: SkuModel,</span><br><span class="line">                <span class="string">'as'</span>: <span class="string">'skus'</span>,</span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="string">'order'</span>: [[ <span class="string">'createdAt'</span>, <span class="string">'DESC'</span> ], [&#123; <span class="string">'model'</span>: SkuModel, <span class="string">'as'</span>: <span class="string">'skus'</span> &#125;, <span class="string">'price'</span>, <span class="string">'ASC'</span> ]],</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">//  [&#123; <span class="string">'model'</span>: SkuModel, <span class="string">'as'</span>: <span class="string">'skus'</span> &#125;, <span class="string">'price'</span>, <span class="string">'ASC'</span> ]] 还可以写成 [<span class="string">'skus'</span>, <span class="string">'price'</span>, <span class="string">'ASC'</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> sequelize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>git submodule add xx.git xx 　　 添加子模块</p></blockquote><blockquote><p>git submodule init 　　　　 　　 初始化子模块</p></blockquote><a id="more"></a><blockquote><p>git submodule update 　　 更新子模块</p></blockquote><blockquote><p>git branch xx 　　　　　　　 创建本地分支<br>git branch 查看本地分支<br>git branch -r 查看远程分支<br>git branch -a 查看所有分支<br>git branch –set-upstream-to=origin/api api 本地关联远程分支</p></blockquote><blockquote><p>git push origin xx 　　　　 创建远程分支</p></blockquote><blockquote><p>git push origin –delete xx 删除远程分支<br>git branch -d dev_20181018 删除本地分支<br>git branch -D dev_20181018 如果删除不了可以强制删除</p></blockquote><blockquote><p>git merge xx 　　　　　　　　　　 合并分支</p></blockquote><blockquote><p>git submodule foreach git checkout v5.4.0 循环修改子模块分支</p></blockquote><blockquote><p>git remote set-url origin https://<strong>*</strong>.git 更换远程分支</p></blockquote><blockquote><p>git remote add origin url 添加 rul</p></blockquote><blockquote><p>git submodule sync 子模块同步</p></blockquote><blockquote><p>git checkout -b mybranch 创建并切换分支</p></blockquote><p>git 删除/撤销远已经 push 到程服务器上某次代码提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit_id&gt;</span><br><span class="line">git push origin HEAD --force</span><br><span class="line"></span><br><span class="line">git reset --hard 126f206185f225879f2723ca421f4dee44ca8fe7</span><br><span class="line">git push origin HEAD --force</span><br></pre></td></tr></table></figure><p>git 如何撤销 commit(未 push)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#撤销commit一般用git reset ，语法如下：</span></span><br><span class="line">git reset [ --mixed | --soft | --hard] [&lt;commit ID&gt;]</span><br><span class="line"><span class="comment">#使用参数--mixed(默认参数)，如git reset --mixed &lt;commit ID&gt;或git reset &lt;commit ID&gt;</span></span><br><span class="line">撤销git commit，撤销git add，保留编辑器改动代码</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用参数--soft，如git reset --soft&lt;commit ID&gt;</span></span><br><span class="line">撤销git commit，不撤销git add，保留编辑器改动代码</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用参数--hard，如git reset --hard &lt;commit ID&gt;——此方式非常暴力，全部撤销，慎用</span></span><br><span class="line">撤销git commit，撤销git add，删除编辑器改动代码</span><br><span class="line"></span><br><span class="line">git reset HEAD^  <span class="comment"># 此时代码保留，回到 git add 之前</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^  <span class="comment"># 回到最新的一次提交</span></span><br></pre></td></tr></table></figure><p>git log 与 git reflog 的 区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span>: commit 的版本日志 包含提交的版本 操作者 日期 (方便查看commit的版本,但是版本回退后,使用git <span class="built_in">log</span> 看不到回退版本号之后的版本记录)</span><br><span class="line">git reflog: 使用git 命令进行操作的日志  包括当前步骤所在哪个版本(一个commit 产生一个版本, 指定版本回退只能回退到该commit) 以及操作的具体内容</span><br><span class="line">版本回退后,仍然可以看到所有的版本记录 方便查看每个操作步骤所在的版本,可以根据版本号自由前进后退</span><br></pre></td></tr></table></figure><p>指定子模块分支<br>branch = tri<br><img src="https://img-blog.csdnimg.cn/20200511173127947.png" alt="在这里插入图片描述"></p><p><code>git commit --amend</code><br>这时候会进入 vim 编辑器，修改完成你要的注释后保存即可。<br><code>git commit --amend -m &#39;提交&#39;</code><br>使用一次新的 commit，替代上一次提交</p><p>代码 git add 到缓存区，并未 commit 提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD .  或者</span><br><span class="line">git reset HEAD a.txt</span><br></pre></td></tr></table></figure><p>通过 git revert 用一次新的 commit 来回滚之前的 commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 得到你需要回退一次提交的commit id</span></span><br><span class="line">git revert &lt;commit_id&gt;  <span class="comment"># 撤销指定的版本，撤销也会作为一次提交进行保存</span></span><br></pre></td></tr></table></figure><p>注：</p><ol><li>git revert 和 git reset 的区别<br>git revert 用一次新的 commit 来回滚之前的 commit，此次提交之前的 commit 都会被保留， revert 是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；；<br>git reset 回到某次提交，提交及之前的 commit 都会被保留，但是此 commit id 之后的修改都会被删除</li></ol><p>git 设置本地分支跟踪远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. git  checkout -b brach-name origin/branch-name</span><br><span class="line">2. git branch --<span class="built_in">set</span>-upstream branch-name  origin/branch-name</span><br><span class="line">3. git branch -u origin/branch-name</span><br></pre></td></tr></table></figure><p>标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git tag 标签名 打在最新提交的commit上</span><br><span class="line">git tag 查询所有标签</span><br><span class="line">git tag 标签名 f52c633 给特定的commit打标签</span><br><span class="line">git tag -a 标签名 -m <span class="string">"msg"</span> commit的id 给标签设置说明</span><br><span class="line">git show 标签名 查询标签内容</span><br><span class="line">git tag -d 标签名 删除标签</span><br><span class="line">git push origin 标签名 推送某个标签到远程</span><br><span class="line">git push origin --tags 推送所有标签</span><br><span class="line">git push origin :refs/tags/&lt;tagname&gt; 可以删除一个远程标签。</span><br></pre></td></tr></table></figure><p>存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash list 查询旧存储列表</span><br><span class="line">git stash create [&lt;message&gt;] 创建存储</span><br><span class="line">git stash drop 删除最新的那一个  等同于git stash drop stash@&#123;0&#125;</span><br><span class="line">git stash drop stash@&#123;4&#125; 指定删除</span><br><span class="line">git stash clear 删除所有</span><br><span class="line">git stash --<span class="built_in">help</span> 查看帮助</span><br></pre></td></tr></table></figure><blockquote><p>‘git help gc’ for manual housekeeping</p></blockquote><ol><li>查询原因 <code>git fsck</code></li><li>解决问题 <code>git gc --prune=now</code></li></ol><p>其他命令参考文档<br><a href="https://gitee.com/all-about-git" target="_blank" rel="external nofollow noopener noreferrer">git 命令大全</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git解决每次拉取代码都需要用户名密码</title>
      <link href="git%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E9%83%BD%E9%9C%80%E8%A6%81%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81/"/>
      <url>git%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E9%83%BD%E9%9C%80%E8%A6%81%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>执行<code>git config --global credential.helper store</code>，在~/.gitconfig目录下会多出一个文件，这里会记录你的密码和帐号；<br>再执行git pull 输入一次正确的帐号密码之后就不用再输入了</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux添加删除用户</title>
      <link href="linux%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/"/>
      <url>linux%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>1、建用户：<br>adduser phpq                             //新建phpq用户<br>passwd phpq                               //给phpq用户设置密码</p><p>2、建工作组<br>groupadd test                          //新建test工作组</p><p>3、新建用户同时增加工作组<br>useradd -g test phpq                      //新建phpq用户并增加到test工作组</p><p>注：：-g 所属组 -d 家目录 -s 所用的SHELL</p><a id="more"></a><p>4、给已有的用户增加工作组<br>usermod -G groupname username  （这个会把用户从其他组中去掉）</p><p>usermod -a groupname username</p><p>或者：gpasswd -a user group</p><p>如果添加了用户，添加了组，然后使这个组里的人都可以sudo 到公共账号下</p><p>可以/etc/sudoers.d 下面建立一个文件内容如下 ，就可以是etl组的所有用户都可以无密码的切到etl用户下。</p><p>%etl ALL=(ALL) NOPASSWD: /bin/su etl<br>%etl ALL=(ALL) NOPASSWD: /bin/su - etl</p><p>sudo 具体参考 <a href="http://www.cnblogs.com/xd502djj/p/6641475.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.cnblogs.com/xd502djj/p/6641475.html</a></p><p>5、临时关闭：在/etc/shadow文件中属于该用户的行的第二个字段（密码）前面加上<em>就可以了。想恢复该用户，去掉</em>即可。</p><p>或者使用如下命令关闭用户账号：<br>passwd peter –l</p><p>重新释放：<br>passwd peter –u</p><p>6、永久性删除用户账号<br>userdel peter</p><p>groupdel peter</p><p>usermod –G peter peter   （强制删除该用户的主目录和主目录下的所有文件和子目录）</p><p>7、从组中删除用户<br>编辑/etc/group 找到GROUP1那一行，删除 A<br>或者用命令<br>gpasswd -d A GROUP</p><p>8、显示用户信息<br>id user<br>cat /etc/passwd</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把服务器请求映射到本地</title>
      <link href="%E6%8A%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
      <url>%E6%8A%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<p>把服务器请求映射到本地<br>ssh -t -C -N -R 80:localhost:80 <a href="mailto:root@88.88.88.88" rel="external nofollow noopener noreferrer" target="_blank">root@88.88.88.88</a> -p 20202<br>80:localhost:80 解释=&gt; 服务器端口:localhost:本地端口</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装window10系统</title>
      <link href="%E9%87%8D%E8%A3%85window10%E7%B3%BB%E7%BB%9F/"/>
      <url>%E9%87%8D%E8%A3%85window10%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>秋哥 大神总结的</p><p>U盘启动盘的制作<br>①找一台可以正常上网的电脑打开官网“<a href="https://www.microsoft.com/zh-cn/software-download/windows10”下载该工具，然后准备一个8G以上的U盘并格式化。" target="_blank" rel="external nofollow noopener noreferrer">https://www.microsoft.com/zh-cn/software-download/windows10”下载该工具，然后准备一个8G以上的U盘并格式化。</a></p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200423133101766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>②下载完成后打开该工具，点击接受。<br>③选择“为另一台电脑创建安装介质”。<br><img src="https://img-blog.csdnimg.cn/2020042313305012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>④勾选“对这台电脑使用推荐的选项”<br>⑤选择“U盘”。<br>⑥选择你插入的U盘，一般会自动识别的。<br>⑦接下来只需要静静的等待，系统下载完成后会自动创建介质，当提示“你的U盘已准备就绪”后，点击完成即可。（此步骤该忙啥忙啥）<br>⑧打开U盘你就可以看到U盘启动盘已经制作完成，接下来就是重装系统了。</p><p>系统安装教程<br>①关闭电脑，插上U盘启动盘，开机时按快捷启动键，下图为常见品牌电脑快捷键大全。<br><img src="https://img-blog.csdnimg.cn/20200423133117607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>②公司电脑为戴尔电脑，开机时按F12或Del，选择U盘后回车。<br>③选择中文简体，点击下一步。<br>④点击现在安装。<br>⑤如果有秘钥，输入后点击下一步。没有就点击“我没有产品秘钥”。<br>⑥选择“自定义”<br>⑦在这里要特别注意一下，选择自己的C盘，安装前最好格式化一下C盘。有固态硬盘的话一定要选择固态硬盘。（基本上留个100G左右，固态整块一个盘都没问题）<br>⑧接下来只需要等待安装完成即可，直到出现设置界面，可以把所有广告全部点掉，用脱机账户（没有微软账户的情况下）就是非强制性的全部不要选，设置完成后即可进入系统。（这里所需时间略长，电脑还会重启，请耐心等待。）</p><p>进入系统后配置：<br>①进入系统后联网会自动安装驱动。如果有些驱动没能安装成功，可以借助第三方驱动安装软件进行安装，例如驱动精灵、360驱动大师、驱动人生等。（笔记本特别需要这一步）<br>②打开设置查看系统是否激活，如果你原来是正版win10，联网会自动激活。没有的话网上找激活工具；<br>③磁盘在装系统的时候如果只用了一部分，还需要到此电脑-我的-管理-磁盘管理，进去将剩下的硬盘创建成分区放出来用；</p><p>电脑就做完系统了；</p><p>遇到比较多的问题：选择C盘时，无法进入下一步提示错误的，硬件没问题的，一般都是硬盘格式问题，就需要转换硬盘格式：（win7和win10用的硬盘格式是不一样的，1、主板BIOS开启UEFI，硬盘就是GPT，主板BIOS是传统Legacy，硬盘就是MBR，而且大多数情况下装系统必须是UEFI+GPT或Legacy+MBR，不能有其他的组合2、win7默认是Legacy+MBR，win10默认是UEFI+GP，win10据说也可以用Legacy+MBR，但是我没有成功过）（一些旧机器需要此操作，大多数设备删除硬盘分区格式化后，新建会自动创建，以后应该只会越来越少出现）</p><p>进入CMD程序后，依次输入以下命令：<br>1.diskpart（启动Diskpart程序）<br>2.list disk （查看电脑中有哪些磁盘）<br>3.select disk 0（选中编号为0的磁盘）<br>4.clean（清除磁盘所有分区）<br>5.convert gpt（将磁盘转换成GPT格式）<br>6.list partition（查看当前磁盘分区情况）<br>7.create partition efi size=100（默认大小为M）<br>8.create partition msr size =128<br>9.create partition primary size =102400(此处为你想设置C盘的大小)<br>10.两次输入exit<br>MSR是硬盘分区，GPT硬盘装系统一定要有这个分区；EFI是引导方式，用EFI引导的话硬盘必须用GPT分区，并且只能装64位系统；</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsCode识别wxml,wxss文件为html,css格式</title>
      <link href="VSCode%E8%AF%86%E5%88%ABwxml-wxss%E6%96%87%E4%BB%B6%E4%B8%BAhtml-css%E6%A0%BC%E5%BC%8F/"/>
      <url>VSCode%E8%AF%86%E5%88%ABwxml-wxss%E6%96%87%E4%BB%B6%E4%B8%BAhtml-css%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在vscode扩展中：</p><p>1.识别wxml：搜索wxml,安装插件vscode wxml.</p><p>2.识别wxss:搜索小程序，安装插件。</p><p>3.自动添加HTML / XML关闭标签（必备）安装插件Auto Close Tag </p><p>4.自动重命名配对的HTML / XML标签(必备) 安装插件Auto Rename Tag </p><a id="more"></a><p>5.重新加载页面</p><p><img src="https://img-blog.csdnimg.cn/20200403145809356.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200403145827732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://juejin.im/entry/59f6e2266fb9a0451a75a99a?utm_source=gold_browser_extension" target="_blank" rel="external nofollow noopener noreferrer">其他前端插件推荐</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git更改远程库</title>
      <link href="git%E6%9B%B4%E6%94%B9%E8%BF%9C%E7%A8%8B%E5%BA%93/"/>
      <url>git%E6%9B%B4%E6%94%B9%E8%BF%9C%E7%A8%8B%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="使用命令更改远程库"><a href="#使用命令更改远程库" class="headerlink" title="使用命令更改远程库"></a>使用命令更改远程库</h2><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin 新的地址</span><br></pre></td></tr></table></figure><p>移除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><p>添加新的远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin url</span><br></pre></td></tr></table></figure><p>注：url是你新远程项目的git链接 例如*.git</p><a id="more"></a><p>出现的问题 ：<br>出现下图的问题说明由于更改了远程，导致本地代码不再分支上<br><img src="https://img-blog.csdnimg.cn/20200320115141332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解决<br>我是把远程分支的tri 合并到本地的tri<br>安装图片中的提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/tri tri</span><br></pre></td></tr></table></figure><h2 id="使用source更改远程库"><a href="#使用source更改远程库" class="headerlink" title="使用source更改远程库"></a>使用source更改远程库</h2><p><img src="https://img-blog.csdnimg.cn/2020032011550796.png" alt="在这里插入图片描述"><br>点击设置，里面直接更改。</p><p>更改好后跟踪分支，不然会出现和上图一样的问题<br>右键分支<br><img src="https://img-blog.csdnimg.cn/20200320115750227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改子模块远程路径，直接右键子模块名称直接更改<br><img src="https://img-blog.csdnimg.cn/20200320115936881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="直接修改git配置文件"><a href="#直接修改git配置文件" class="headerlink" title="直接修改git配置文件"></a>直接修改git配置文件</h2><p>在当前项目跟目录下<br>vim .git/config<br>直接修改这个文件就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建yapi服务</title>
      <link href="%E6%90%AD%E5%BB%BAyapi%E6%9C%8D%E5%8A%A1/"/>
      <url>%E6%90%AD%E5%BB%BAyapi%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>环境 centos<br>环境要求<br>nodejs（7.6+)<br>mongodb（2.6+）(<a href="https://blog.wjc66.cn/docker安装mongo/">docker 安装 mongo</a>)<br>pm2 (npm i pm2 -g)<br>nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mkdir yapi</span><br><span class="line"><span class="built_in">cd</span> yapi</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/YMFE/yapi.git vendors</span><br><span class="line">cp vendors/config_example.json ./config.json</span><br><span class="line"><span class="built_in">cd</span> vendors</span><br><span class="line">// 解决如下，注意一定要带上--unsafe-perm，否则安装可能不会成功</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm install --production --registry https://registry.npm.taobao.org --unsafe-perm</span><br><span class="line">//安装程序会初始化数据库索引和管理员账号，管理员账号名可在 config.json 配置</span><br><span class="line">// 注意数据库的配置不然 初始化用户失败（对应的数据库账号和密码就是在docker安装mongo中可读写用户）</span><br><span class="line">npm run install-server</span><br><span class="line">// 后台运行yapi，否则关闭窗口后，yapi退出运行</span><br><span class="line">node server/app.js  &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">或者</span><br><span class="line">node server/app.js 启动</span><br><span class="line">// 最好用pm2管理</span><br><span class="line">pm2 start server/app.js --name yapi</span><br></pre></td></tr></table></figure><a id="more"></a><p>启动后，默认管理员账号名：”<a href="mailto:admin@admin.com" rel="external nofollow noopener noreferrer" target="_blank">admin@admin.com</a>“，密码：”ymfe.org”，这个可以在 config.json 文件中修改，修改后，重启服务即可。</p><p>访问 ip+3000（最好关闭防火墙或者开放 3000 端口访问）<br>我这里用了代理<br><img src="https://img-blog.csdnimg.cn/2020042214012683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改密码点击右边头像的个人中心修改就好</p><p>yapi 的使用<br>具体使用可以参考官方的文档，yapi 教程 <a href="https://yapi.ymfe.org/documents/index.html" target="_blank" rel="external nofollow noopener noreferrer">https://yapi.ymfe.org/documents/index.html</a> ，打完收工。</p><p>出现的问题：<br>我用的是 nginx 代理，需要放置域名根目录下访问，不然静态文件读取不了</p>]]></content>
      
      
      
        <tags>
            
            <tag> yapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装mongo</title>
      <link href="docker%E5%AE%89%E8%A3%85mongo/"/>
      <url>docker%E5%AE%89%E8%A3%85mongo/</url>
      
        <content type="html"><![CDATA[<p>环境centos7</p><p>拉取镜像<br>docker pull mongo:latest</p><a id="more"></a><p>在/data/docker 下创建mongo文件夹用来做文件映射<br><img src="https://img-blog.csdnimg.cn/20200422133530554.png" alt="在这里插入图片描述"></p><p>启动服务（执行下面命令会在/data/docker/mongo生成db文件夹）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name postgres \</span><br><span class="line"> -p 27017:27017 -v /data/docker/mongo/db:/data/db -d mongo</span><br></pre></td></tr></table></figure><p>查询是否启动成功</p><blockquote><p>docker ps</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200422133709618.png" alt="在这里插入图片描述"><br>进入服务（65d0675c5a6f是服务id）</p><blockquote><p>docker exec -it 65d0675c5a6f bash</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200422133831568.png" alt="在这里插入图片描述"><br>从docker 进入mongo数据库</p><blockquote><p>mongo</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200422134021304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建用户，一般创建一个管理用户的用户和一个可以读写数据库的用户<br>创建管理用户的用户<br>use admin<br><img src="https://img-blog.csdnimg.cn/20200422134214326.png" alt="在这里插入图片描述"><br>执行<br>db.createUser({ user:’admin’,pwd:’123’,roles:[ { role:’userAdminAnyDatabase’, db: ‘admin’}]});<br>db.auth(‘admin’, ‘123’)<br>出现1说明创建成功</p><p>读写数据库的用户 yapi （我使用mongo只是来搭建yapi服务，mongo数据库没有深入了解）<br>db.createUser({ user:’yapi’,pwd:’123’,roles:[ { role:’readWrite’, db: ‘yapi’}]});<br>db.auth(‘yapi’, ‘123’)<br>出现1说明创建成功</p><p>出现过的错误<br>错误如下：</p><blockquote><p>ERROR: error pulling image configuration: Get<br><a href="https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/88/881bd08c0b08234bd19136957f15e4301097f4646c1e700f7fea26e41fc40069/data?verify=1552449302-pJVj4p2TS9sUquWEjuDZgIA0f7E%3D" target="_blank" rel="external nofollow noopener noreferrer">https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/88/881bd08c0b08234bd19136957f15e4301097f4646c1e700f7fea26e41fc40069/data?verify=1552449302-pJVj4p2TS9sUquWEjuDZgIA0f7E%3D</a>:<br>dial tcp: lookup production.cloudflare.docker.com on 10.0.2.3:53: no<br>such host</p></blockquote><p>解决：<br>进入 /etc/resolv.conf 添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>重启docker<br>systemctl restart docker</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中的一些常用方法总结</title>
      <link href="%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作用：表示某个数组是否包含给定的值</span><br><span class="line">返回： boolean值</span><br><span class="line">[1, 2, 3].includes(2); // <span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：像数组的末尾添加一项或多项元素</span><br><span class="line">参数：要添加的项</span><br><span class="line">返回值：新数组的长度</span><br><span class="line">是否改变原数组：改变</span><br><span class="line">var ary = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">var res = ary.push(<span class="string">'d'</span>,<span class="string">'e'</span>); </span><br><span class="line">console.log(ary);  // [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]</span><br><span class="line">console.log(res);  // 5</span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：删除数组的最后一项</span><br><span class="line">参数：无</span><br><span class="line">返回值：被删除的项</span><br><span class="line">是否改变原数组：改变</span><br><span class="line">var ary = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>];</span><br><span class="line">var res = ary.pop();</span><br><span class="line">console.log(ary);  // [<span class="string">'1'</span>,<span class="string">'2'</span>]</span><br><span class="line">console.log(res);  // 3</span><br></pre></td></tr></table></figure><h2 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：删除数组的首项</span><br><span class="line">参数：无</span><br><span class="line">返回值：被删除的项</span><br><span class="line">是否改变原数组：改变</span><br><span class="line">var ary = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">var res = ary.shift();</span><br><span class="line">console.log(ary);  // [<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">console.log(res);  // a</span><br></pre></td></tr></table></figure><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：向数组的开头添加一或多项</span><br><span class="line">参数：要添加的项，多项用<span class="string">','</span>隔开</span><br><span class="line">返回值：新数组的长度</span><br><span class="line">是否改变原数组：改变</span><br><span class="line">var ary = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">var res = ary.unshift(<span class="string">'d'</span>,<span class="string">'e'</span>);</span><br><span class="line">console.log(ary);  // [<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">console.log(res);  // 5</span><br></pre></td></tr></table></figure><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">作用：增删改</span><br><span class="line">参数：ary.splice(index,howmany,item1,.....,itemX)</span><br><span class="line">返回值：删除的项</span><br><span class="line">是否改变原数组：改变</span><br><span class="line">增加的功能</span><br><span class="line">ary.splice(n,0,x，......,y);</span><br><span class="line">从数组的索引n开始，删除0项,在索引n的前边增加新的项，第三个参数开始都是用来填补删除的项目位置的</span><br><span class="line"></span><br><span class="line">var ary = [1,2,3,4,5];</span><br><span class="line">var res = ary.splice(1,0,6,7);</span><br><span class="line">console.log(ary);  // [1, 6, 7, 2, 3, 4, 5]</span><br><span class="line">console.log(res);  // [] 删除0项，返回一个空数组</span><br><span class="line">删除的功能</span><br><span class="line">ary.splice(n,m);</span><br><span class="line">从数组的索引n开始，删除m项</span><br><span class="line"></span><br><span class="line">var ary = [1,2,3,4,5];</span><br><span class="line">var res = ary.splice(1,2);</span><br><span class="line">console.log(ary);  // [1，4，5]</span><br><span class="line">console.log(res);  // [2，3]  </span><br><span class="line">修改的功能</span><br><span class="line">ary.splice(n,m,x);</span><br><span class="line">从数组的索引n开始，删除m项，把x添加到索引n前边</span><br><span class="line"></span><br><span class="line">var ary = [1,2,3,4,5];</span><br><span class="line">var res = ary.splice(1,2,6,7);</span><br><span class="line">console.log(ary);  // [1, 6, 7, 4, 5]</span><br><span class="line">console.log(res);  // [2，3] </span><br><span class="line">//模拟 push(尾部添加)  和push二者返回值不同</span><br><span class="line">ary.splice(ary.length,0,新的项) //因为splice是在索引前添加，所以第一个参数为ary.length</span><br><span class="line">//模拟 pop(尾部删除)</span><br><span class="line">ary.splice(arr.length-1,1);</span><br><span class="line">//模拟 <span class="built_in">shift</span>(首项删除)</span><br><span class="line">ary.splice(0,1)</span><br><span class="line">//模拟 unshift(首项添加) 和unshilft二者返回值不同</span><br><span class="line">ary.splice(0,0,新的项)</span><br><span class="line">此外</span><br><span class="line"></span><br><span class="line">ary.splice(n)  // 表示从索引n开始删除到末尾</span><br><span class="line">ary.splice(0)  // 删除整个数组 有克隆数组的效果，利用返回值</span><br></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">作用：截取数组(复制数组)</span><br><span class="line">参数：array.slice(start, end)</span><br><span class="line">返回值：返回一个新数组</span><br><span class="line">是否改变原数组：不改变</span><br><span class="line">var ary = [1,2,3,4,5];</span><br><span class="line">var res = ary.slice(1,3);</span><br><span class="line">var res2 = ary.slice(-3,-1)</span><br><span class="line">console.log(ary);  // [1,2,3,4,5]</span><br><span class="line">console.log(res);  // [2,3]</span><br><span class="line">console.log(res2)  //[3,4] slice支持负参数，从最后一项开始算起，-1为最后一项，-2为倒数第二项</span><br><span class="line"></span><br><span class="line">slice(n) //从索引n开始复制到最后一项</span><br><span class="line">slice()、 slice(0)  //复制整个数组</span><br></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：用指定的分隔符将数组每一项拼接为字符串</span><br><span class="line">参数：指定的分隔符,如果省略该参数，则使用逗号作为分隔符</span><br><span class="line">返回值：拼接好的字符串</span><br><span class="line">是否改变原数组：不改变</span><br><span class="line">var ary = [1,2,3,4,5];</span><br><span class="line">var res = ary.join(<span class="string">'-'</span>);</span><br><span class="line">console.log(ary);  // [1, 2, 3, 4, 5]</span><br><span class="line">console.log(res);  // 1-2-3-4-5</span><br></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">作用：用于连接两个或多个数组</span><br><span class="line">参数：参数可以是具体的值，也可以是数组对象。可以是任意多个</span><br><span class="line">返回值：返回连接后的新数组</span><br><span class="line">是否改变原数组：不改变</span><br><span class="line">var ary = [1,2,3,4,5];</span><br><span class="line">var res = ary.concat(6,7);</span><br><span class="line">var res2 = ary.concat(6,[7,8]);</span><br><span class="line">var res3 = ary.concat(6,[7,[8,9]]);</span><br><span class="line">var res4 = ary.concat();</span><br><span class="line">console.log(ary);  // [1, 2, 3, 4, 5]</span><br><span class="line">console.log(res);  // [1, 2, 3, 4, 5, 6, 7]</span><br><span class="line">console.log(res2);  //[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">console.log(res3)  // [1, 2, 3, 4, 5, 6, 7, [8,9]]  concat() 如果操作的参数是数组，那么添加的是数组中的元素，而不是数组。 如果是二维(或以上)数组，concat只能<span class="string">'拆开'</span>一层数组</span><br><span class="line">console.log(res4) // [1, 2, 3, 4, 5]  如果concat()没有参数或者参数是空数组也可以达到克隆数组的目的</span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">作用：对数组的元素进行排序 </span><br><span class="line">参数：可选(函数) 规定排序规则 默认排序顺序为按字母升序</span><br><span class="line">返回值：排好序的原数组</span><br><span class="line">是否改变原数组：改变</span><br><span class="line">var ary = [1,5,7,9,12,24,56,87,92];</span><br><span class="line">var ary2 = [1,5,7,9,12,24,56,87,92];</span><br><span class="line">var ary3 = [1,5,7,9,12,24,56,87,92];</span><br><span class="line">var res = ary.sort();</span><br><span class="line">var res2 = ary2.sort(<span class="keyword">function</span>(a,b)&#123;</span><br><span class="line">    <span class="built_in">return</span> a-b;</span><br><span class="line">&#125;)</span><br><span class="line">var res3 = ary3.sort(<span class="keyword">function</span>(a,b)&#123;</span><br><span class="line">    <span class="built_in">return</span> b<span class="_">-a</span>;</span><br><span class="line">&#125;)</span><br><span class="line">// sort的参数函数总的形参a,b就是数组排序时候的相邻比较的两项</span><br><span class="line">console.log(res);  // [1, 12, 24, 5, 56, 7, 87, 9, 92]</span><br><span class="line">console.log(res2); // [1, 5, 7, 9, 12, 24, 56, 87, 92]</span><br><span class="line">console.log(res3); // [92, 87, 56, 24, 12, 9, 7, 5, 1]</span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：倒序数组</span><br><span class="line">参数：无</span><br><span class="line">返回值：倒序后的原数组</span><br><span class="line">是否改变原数组：改变</span><br><span class="line">var ary = [1,2,3,4,5];</span><br><span class="line">var res = ary.reverse();</span><br><span class="line">console.log(ary);  // [5, 4, 3, 2, 1]</span><br><span class="line">console.log(res);  // [5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">作用：查找指定元素的位置</span><br><span class="line">参数：array.indexOf(item,start) item:查找的元素 start:字符串中开始检索的位置</span><br><span class="line">返回值：返回第一次查到的索引，未找到返回-1</span><br><span class="line">是否改变原数组： 不改变</span><br><span class="line">var ary = [1,2,3,4,5]</span><br><span class="line">var res = ary.indexOf(3);</span><br><span class="line">console.log(ary);  // [1,2,3,4,5]</span><br><span class="line">console.log(res);  // 2</span><br><span class="line">var ary = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>];</span><br><span class="line">var res = ary.indexOf(<span class="string">'c'</span>,3);</span><br><span class="line">console.log(res) // 4</span><br></pre></td></tr></table></figure><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">作用：查找指定元素最后出现的位置</span><br><span class="line">参数：array.indexOf(item,start) item:查找的元素 start:字符串中开始检索的位置</span><br><span class="line">返回值：返回查到的元素的索引，未找到返回-1</span><br><span class="line">是否改变原数组：不改变</span><br><span class="line">var ary = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>];</span><br><span class="line">var res = ary.lastIndexOf(<span class="string">'c'</span>,3);</span><br><span class="line">var res2 = ary.lastIndexOf(<span class="string">'c'</span>,1);</span><br><span class="line">console.log(res); // 2</span><br><span class="line">console.log(res2); // -1</span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">作用：循环遍历数组每一项</span><br><span class="line">参数：函数 ary.forEach(<span class="keyword">function</span>(item,index,ary)&#123;&#125;) item:每一项 index:索引 ary:当前数组</span><br><span class="line">返回值：无</span><br><span class="line">是否改变原数组： 不改变</span><br><span class="line">var ary = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">var res = ary.forEach(<span class="keyword">function</span>(item,index,ary)&#123;</span><br><span class="line">    console.log(item,index,ary);</span><br><span class="line">/*  a 0 [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">    b 1 [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">    c 2 [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">*/  </span><br><span class="line">    <span class="built_in">return</span> item;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(res)  // undefined  无返回值</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">作用：数组中的元素为原始数组元素调用函数处理后的值</span><br><span class="line">参数：函数 ary.map(<span class="keyword">function</span>(item,index,ary)&#123;&#125;) item:每一项 index:索引 ary:当前数组</span><br><span class="line">返回值：新数组</span><br><span class="line">是否改变原数组：不改变</span><br><span class="line">var ary = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">var res = ary.map(<span class="keyword">function</span>(item,index,ary)&#123;</span><br><span class="line">    <span class="built_in">return</span> item+1;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(res)  // [<span class="string">"a1"</span>, <span class="string">"b1"</span>, <span class="string">"c1"</span>]</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">作用：创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span><br><span class="line">参数：函数 ary.filter(<span class="keyword">function</span>(item,index,ary)&#123;&#125;) item:每一项 index:索引 ary:当前数组</span><br><span class="line">返回值：新数组</span><br><span class="line">是否改变原数组：不改变</span><br><span class="line">var ary = [1,2,3,4,5,6]</span><br><span class="line">var res = ary.filter(<span class="keyword">function</span>(item)&#123;</span><br><span class="line">    <span class="built_in">return</span> item&lt;3;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(res)  // [1,2]</span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">作用：检测数组所有元素是否都符合指定条件</span><br><span class="line">参数：函数 ary.every(<span class="keyword">function</span>(item,index,ary)&#123;&#125;) item:每一项 index:索引 ary:当前数组</span><br><span class="line">返回值：布尔值</span><br><span class="line">是否改变原数组： 不改变</span><br><span class="line">var ary = [1,2,3,4,5,6]</span><br><span class="line">var res = ary.every(<span class="keyword">function</span>(item)&#123;</span><br><span class="line">    <span class="built_in">return</span> item&lt;3;</span><br><span class="line">&#125;)</span><br><span class="line">var res2 = ary.every(<span class="keyword">function</span>(item)&#123;</span><br><span class="line">    <span class="built_in">return</span> item&lt;7;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(res)  // <span class="literal">false</span>;</span><br><span class="line">console.log(res2)  // <span class="literal">true</span>;</span><br><span class="line">1 如果数组中检测到有一个元素不满足，则整个表达式返回 <span class="literal">false</span> ，且剩余的元素不会再进行检测。</span><br><span class="line">2 如果所有元素都满足条件，则返回 <span class="literal">true</span>。</span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">作用：检测数组中的元素是否满足指定条件</span><br><span class="line">参数：函数 ary.some(<span class="keyword">function</span>(item,index,ary)&#123;&#125;) item:每一项 index:索引 ary:当前数组</span><br><span class="line">返回值：布尔值</span><br><span class="line">是否改变原数组：不改变</span><br><span class="line">var ary = [1,2,3,4,5,6]</span><br><span class="line">var res = ary.some(<span class="keyword">function</span>(item)&#123;</span><br><span class="line">    <span class="built_in">return</span> item&lt;3;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(res)  // <span class="literal">true</span>;</span><br><span class="line">1 如果有一个元素满足条件，则表达式返回 <span class="literal">true</span> , 剩余的元素不会再执行检测。</span><br><span class="line">2 如果没有满足条件的元素，则返回 <span class="literal">false</span>。</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">作用:返回数组中满足callback函数的第一个元素的值，否则返回 undefined</span><br><span class="line"><span class="built_in">let</span> array1 = [5, 12, 8, 110, 88];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">let</span> found = array1.find(element =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> element &gt; 10;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">console.log(found);</span><br><span class="line">// output: 12</span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</p><p>参数:</p><table>    <thead>      <tr>        <th>参数</th>        <th>描述</th>      </tr>    </thead>    <tbody>      <tr>        <td>function(total,currentValue, index,arr)</td>        <td>          必需。用于执行每个数组元素的函数。函数参数:          <table>            <thead>              <tr>                <th>参数</th>                <th>描述</th>              </tr>            </thead>            <tbody>              <tr>                <td>total</td>                <td>必需。初始值, 或者计算结束后的返回值。</td>              </tr>              <tr>                <td>currentValue</td>                <td>必需。当前元素</td>              </tr>              <tr>                <td>currentIndex</td>                <td>可选。当前元素的索引</td>              </tr>              <tr>                <td>arr</td>                <td>可选。当前元素所属的数组对象。</td>              </tr>            </tbody>          </table>        </td>      </tr>      <tr>        <td>initialValue</td>        <td>可选。传递给函数的初始值</td>      </tr>    </tbody></table><p>语法:</p><blockquote><p>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</p></blockquote><p>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(() =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> a = [ 1, 2, 3 ];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> y = a.reduce(<span class="keyword">function</span>(total, currentValue) &#123;</span><br><span class="line">        <span class="built_in">return</span> total + currentValue;</span><br><span class="line">    &#125;, 0);</span><br><span class="line"></span><br><span class="line">    console.log(y); =&gt;输出6</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>借鉴 <a href="https://www.cnblogs.com/chenmeng0818/p/5985923.html" target="_blank" rel="external nofollow noopener noreferrer">陈水水的个人博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git设置代理</title>
      <link href="git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>centos 安装git<br>sudo yum install -y git</p><p>设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:1080 </span><br><span class="line">git config --global https.proxy 127.0.0.1:1080</span><br></pre></td></tr></table></figure> <a id="more"></a><p>查看代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure><p>取消代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>出现下图错误，是因为你开启了git代理，代理连接不上 所以你可以取消代理<br><img src="https://img-blog.csdnimg.cn/20200403140925106.png" alt="在这里插入图片描述"></p><p>设置代理还可以通过修改配置文件形式<br>在用户目录下的.gitconfig文件（如果不存在则创建）中写入<br>[http]<br>        proxy = <a href="https://127.0.0.1:1080" target="_blank" rel="external nofollow noopener noreferrer">https://127.0.0.1:1080</a> //代理配置<br>[credential]<br>        helper = store //凭证配置【这个配置表明将会在第一次使用用户密码之后记住该密码，即下次不用在输入】<br>        如果你的凭证位置没有指定，则去用户目录下查看，发现多了一个.git_credentials文件，打开文件可以看到里面以明文存放你的用户名和密码<br>[user]<br>        name = robot //用户配置<br>        email = <a href="mailto:robot@mland.club" rel="external nofollow noopener noreferrer" target="_blank">robot@mland.club</a><br>[push]<br>        default = simple</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘分区</title>
      <link href="%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"/>
      <url>%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>方法一：windows 10磁盘管理软件<br>鼠标右击“计算机”，选择“管理”标签；打开“计算机管理”窗口。<br>选择 “存储管理”打开“磁盘管理”页面 </p><p>方法二：windows10 搜索分区 如下图</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200324091438488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击进入<br><img src="https://img-blog.csdnimg.cn/20200324091518411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>要分区 就先选择一个盘压缩<br><img src="https://img-blog.csdnimg.cn/20200324091651390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>自己输入一个要压缩的值 1024是一个G<br><img src="https://img-blog.csdnimg.cn/20200324091734816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击压缩就会成为空闲盘 显示未分配<br><img src="https://img-blog.csdnimg.cn/20200324091947471.png" alt="在这里插入图片描述"><br>右键新建卷就可以用了</p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>把删除所有不用的分区就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 磁盘分区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网线顺序</title>
      <link href="%E7%BD%91%E7%BA%BF%E9%A1%BA%E5%BA%8F/"/>
      <url>%E7%BD%91%E7%BA%BF%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>网线有两种做法，一种是交叉线，一种是平行（直通）线<br>　　交叉线的做法是：一头采用568A标准，一头采用568B标准<br>　　平行（直通）线的做法是：两头同为568A标准或568B标准，（一般用到的都是568B平行（直通）线的做法）<br>　　568A标准：白绿 绿 白橙 蓝 白蓝 橙 白棕 棕<br>568B标准：白橙 橙 白绿 蓝 白蓝 绿 白棕 棕</p><p><img src="https://img-blog.csdnimg.cn/20200323175634199.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+yelee搭建博客3特效1</title>
      <link href="hexo-yelee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A23%E7%89%B9%E6%95%881/"/>
      <url>hexo-yelee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A23%E7%89%B9%E6%95%881/</url>
      
        <content type="html"><![CDATA[<p>注意： 在页面的<code>&lt;/body&gt;</code>标签前引入即可</p><h2 id="鼠标点击出现爱心特效"><a href="#鼠标点击出现爱心特效" class="headerlink" title="鼠标点击出现爱心特效"></a>鼠标点击出现爱心特效</h2><p>在 themes\yelee\source\js\ 下新建 love.js</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">(function (window, document, undefined) &#123;</span><br><span class="line">    var hearts &#x3D; [];</span><br><span class="line">    window.requestAnimationFrame &#x3D; (function () &#123;</span><br><span class="line">        return window.requestAnimationFrame ||</span><br><span class="line">            window.webkitRequestAnimationFrame ||</span><br><span class="line">            window.mozRequestAnimationFrame ||</span><br><span class="line">            window.oRequestAnimationFrame ||</span><br><span class="line">            window.msRequestAnimationFrame ||</span><br><span class="line">            function (callback) &#123;</span><br><span class="line">                setTimeout(callback, 1000 &#x2F; 60);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    function init() &#123;</span><br><span class="line">        css(</span><br><span class="line">            &quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span><br><span class="line">        );</span><br><span class="line">        attachEvent();</span><br><span class="line">        gameloop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function gameloop() &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; hearts.length; i++) &#123;</span><br><span class="line">            if (hearts[i].alpha &lt;&#x3D; 0) &#123;</span><br><span class="line">                document.body.removeChild(hearts[i].el);</span><br><span class="line">                hearts.splice(i, 1);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            hearts[i].y--;</span><br><span class="line">            hearts[i].scale +&#x3D; 0.004;</span><br><span class="line">            hearts[i].alpha -&#x3D; 0.013;</span><br><span class="line">            hearts[i].el.style.cssText &#x3D; &quot;left:&quot; + hearts[i].x + &quot;px;top:&quot; + hearts[i].y + &quot;px;opacity:&quot; + hearts[i]</span><br><span class="line">                .alpha + &quot;;transform:scale(&quot; + hearts[i].scale + &quot;,&quot; + hearts[i].scale +</span><br><span class="line">                &quot;) rotate(45deg);background:&quot; + hearts[i].color;</span><br><span class="line">        &#125;</span><br><span class="line">        requestAnimationFrame(gameloop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attachEvent() &#123;</span><br><span class="line">        var old &#x3D; typeof window.onclick &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; window.onclick;</span><br><span class="line">        window.onclick &#x3D; function (event) &#123;</span><br><span class="line">            old &amp;&amp; old();</span><br><span class="line">            createHeart(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function createHeart(event) &#123;</span><br><span class="line">        var d &#x3D; document.createElement(&quot;div&quot;);</span><br><span class="line">        d.className &#x3D; &quot;heart&quot;;</span><br><span class="line">        hearts.push(&#123;</span><br><span class="line">            el: d,</span><br><span class="line">            x: event.clientX - 5,</span><br><span class="line">            y: event.clientY - 5,</span><br><span class="line">            scale: 1,</span><br><span class="line">            alpha: 1,</span><br><span class="line">            color: randomColor()</span><br><span class="line">        &#125;);</span><br><span class="line">        document.body.appendChild(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function css(css) &#123;</span><br><span class="line">        var style &#x3D; document.createElement(&quot;style&quot;);</span><br><span class="line">        style.type &#x3D; &quot;text&#x2F;css&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            style.appendChild(document.createTextNode(css));</span><br><span class="line">        &#125; catch (ex) &#123;</span><br><span class="line">            style.styleSheet.cssText &#x3D; css;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(style);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function randomColor() &#123;</span><br><span class="line">        return &quot;rgb(&quot; + (~~(Math.random() * 255)) + &quot;,&quot; + (~~(Math.random() * 255)) + &quot;,&quot; + (~~(Math.random() * 255)) +</span><br><span class="line">            &quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(window, document);</span><br></pre></td></tr></table></figure><p>添加到\themes\yelee\layout\layout.ejs 的前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 《页面点击小红心 --&gt;</span><br><span class="line">&lt;% if (theme.love)&#123; %&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;!-- 页面点击小红心》 --&gt;</span><br></pre></td></tr></table></figure><p>开启配置\themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 页面点击小红心</span><br><span class="line">love: true</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200319201907987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="鼠标点击显示文字–需要引入-jQuery"><a href="#鼠标点击显示文字–需要引入-jQuery" class="headerlink" title="鼠标点击显示文字–需要引入 jQuery"></a>鼠标点击显示文字–需要引入 jQuery</h2><p>在 themes\yelee\source\js\click_show_text.js(没有就新建)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var a_idx &#x3D; 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">    $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">        var a &#x3D; new Array</span><br><span class="line">        (&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot;, &quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);</span><br><span class="line">        var $i &#x3D; $(&quot;&lt;span&#x2F;&gt;&quot;).text(a[a_idx]);</span><br><span class="line">        a_idx &#x3D; (a_idx + 1) % a.length;</span><br><span class="line">        var x &#x3D; e.pageX,</span><br><span class="line">        y &#x3D; e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            &quot;z-index&quot;: 5,</span><br><span class="line">            &quot;top&quot;: y - 20,</span><br><span class="line">            &quot;left&quot;: x,</span><br><span class="line">            &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">            &quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">            &quot;color&quot;: &quot;#FF0000&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&quot;body&quot;).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            &quot;top&quot;: y - 180,</span><br><span class="line">            &quot;opacity&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">3000,</span><br><span class="line">function() &#123;</span><br><span class="line">    $i.remove();</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(&#39;delay()&#39;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function delay() &#123;</span><br><span class="line">    $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 themes\yelee\layout\layout.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&lt;% if (theme.click_show_text)&#123; %&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;click_show_text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 鼠标点击显示文字</span><br><span class="line">click_show_text: true</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200319201854958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="鼠标点击烟花爆炸效果-我没有测试成功，记录一下，缺少插件"><a href="#鼠标点击烟花爆炸效果-我没有测试成功，记录一下，缺少插件" class="headerlink" title="鼠标点击烟花爆炸效果(我没有测试成功，记录一下，缺少插件)"></a>鼠标点击烟花爆炸效果(我没有测试成功，记录一下，缺少插件)</h2><p>themes\yelee\source\js\fireworks.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">function updateCoords(e) &#123;</span><br><span class="line">    pointerX &#x3D; (e.clientX || e.touches[0].clientX) - canvasEl.getBoundingClientRect().left, pointerY &#x3D; e.clientY || e.touches[</span><br><span class="line">        0].clientY - canvasEl.getBoundingClientRect().top</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setParticuleDirection(e) &#123;</span><br><span class="line">    var t &#x3D; anime.random(0, 360) * Math.PI &#x2F; 180,</span><br><span class="line">        a &#x3D; anime.random(50, 180),</span><br><span class="line">        n &#x3D; [-1, 1][anime.random(0, 1)] * a;</span><br><span class="line">    return &#123;</span><br><span class="line">        x: e.x + n * Math.cos(t),</span><br><span class="line">        y: e.y + n * Math.sin(t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createParticule(e, t) &#123;</span><br><span class="line">    var a &#x3D; &#123;&#125;;</span><br><span class="line">    return a.x &#x3D; e, a.y &#x3D; t, a.color &#x3D; colors[anime.random(0, colors.length - 1)], a.radius &#x3D; anime.random(16, 32), a.endPos &#x3D;</span><br><span class="line">        setParticuleDirection(a), a.draw &#x3D; function () &#123;</span><br><span class="line">            ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, 0, 2 * Math.PI, !0), ctx.fillStyle &#x3D; a.color, ctx.fill()</span><br><span class="line">        &#125;, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createCircle(e, t) &#123;</span><br><span class="line">    var a &#x3D; &#123;&#125;;</span><br><span class="line">    return a.x &#x3D; e, a.y &#x3D; t, a.color &#x3D; &quot;#F00&quot;, a.radius &#x3D; 0.1, a.alpha &#x3D; 0.5, a.lineWidth &#x3D; 6, a.draw &#x3D; function () &#123;</span><br><span class="line">        ctx.globalAlpha &#x3D; a.alpha, ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, 0, 2 * Math.PI, !0), ctx.lineWidth &#x3D;</span><br><span class="line">            a.lineWidth, ctx.strokeStyle &#x3D; a.color, ctx.stroke(), ctx.globalAlpha &#x3D; 1</span><br><span class="line">    &#125;, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function renderParticule(e) &#123;</span><br><span class="line">    for (var t &#x3D; 0; t &lt; e.animatables.length; t++) &#123;</span><br><span class="line">        e.animatables[t].target.draw()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function animateParticules(e, t) &#123;</span><br><span class="line">    for (var a &#x3D; createCircle(e, t), n &#x3D; [], i &#x3D; 0; i &lt; numberOfParticules; i++) &#123;</span><br><span class="line">        n.push(createParticule(e, t))</span><br><span class="line">    &#125;</span><br><span class="line">    anime.timeline().add(&#123;</span><br><span class="line">        targets: n,</span><br><span class="line">        x: function (e) &#123;</span><br><span class="line">            return e.endPos.x</span><br><span class="line">        &#125;,</span><br><span class="line">        y: function (e) &#123;</span><br><span class="line">            return e.endPos.y</span><br><span class="line">        &#125;,</span><br><span class="line">        radius: 0.1,</span><br><span class="line">        duration: anime.random(1200, 1800),</span><br><span class="line">        easing: &quot;easeOutExpo&quot;,</span><br><span class="line">        update: renderParticule</span><br><span class="line">    &#125;).add(&#123;</span><br><span class="line">        targets: a,</span><br><span class="line">        radius: anime.random(80, 160),</span><br><span class="line">        lineWidth: 0,</span><br><span class="line">        alpha: &#123;</span><br><span class="line">            value: 0,</span><br><span class="line">            easing: &quot;linear&quot;,</span><br><span class="line">            duration: anime.random(600, 800)</span><br><span class="line">        &#125;,</span><br><span class="line">        duration: anime.random(1200, 1800),</span><br><span class="line">        easing: &quot;easeOutExpo&quot;,</span><br><span class="line">        update: renderParticule,</span><br><span class="line">        offset: 0</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function debounce(e, t) &#123;</span><br><span class="line">    var a;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        var n &#x3D; this,</span><br><span class="line">            i &#x3D; arguments;</span><br><span class="line">        clearTimeout(a), a &#x3D; setTimeout(function () &#123;</span><br><span class="line">            e.apply(n, i)</span><br><span class="line">        &#125;, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var canvasEl &#x3D; document.querySelector(&quot;.fireworks&quot;);</span><br><span class="line">if (canvasEl) &#123;</span><br><span class="line">    var ctx &#x3D; canvasEl.getContext(&quot;2d&quot;),</span><br><span class="line">        numberOfParticules &#x3D; 30,</span><br><span class="line">        pointerX &#x3D; 0,</span><br><span class="line">        pointerY &#x3D; 0,</span><br><span class="line">        tap &#x3D; &quot;mousedown&quot;,</span><br><span class="line">        colors &#x3D; [&quot;#FF1461&quot;, &quot;#18FF92&quot;, &quot;#5A87FF&quot;, &quot;#FBF38C&quot;],</span><br><span class="line">        setCanvasSize &#x3D; debounce(function () &#123;</span><br><span class="line">            canvasEl.width &#x3D; 2 * window.innerWidth, canvasEl.height &#x3D; 2 * window.innerHeight, canvasEl.style.width &#x3D;</span><br><span class="line">                window.innerWidth + &quot;px&quot;, canvasEl.style.height &#x3D; window.innerHeight + &quot;px&quot;, canvasEl.getContext(</span><br><span class="line">                    &quot;2d&quot;).scale(2, 2)</span><br><span class="line">        &#125;, 500),</span><br><span class="line">        render &#x3D; anime(&#123;</span><br><span class="line">            duration: 1 &#x2F; 0,</span><br><span class="line">            update: function () &#123;</span><br><span class="line">                ctx.clearRect(0, 0, canvasEl.width, canvasEl.height)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    document.addEventListener(tap, function (e) &#123;</span><br><span class="line">        &quot;sidebar&quot; !&#x3D;&#x3D; e.target.id &amp;&amp; &quot;toggle-sidebar&quot; !&#x3D;&#x3D; e.target.id &amp;&amp; &quot;A&quot; !&#x3D;&#x3D; e.target.nodeName &amp;&amp; &quot;IMG&quot; !&#x3D;&#x3D;</span><br><span class="line">            e.target.nodeName &amp;&amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY))</span><br><span class="line">    &#125;, !1), setCanvasSize(), window.addEventListener(&quot;resize&quot;, setCanvasSize, !1)</span><br><span class="line">&#125;</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">function updateCoords(e) &#123;</span><br><span class="line">    pointerX &#x3D; (e.clientX || e.touches[0].clientX) - canvasEl.getBoundingClientRect().left, pointerY &#x3D; e.clientY || e.touches[</span><br><span class="line">        0].clientY - canvasEl.getBoundingClientRect().top</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setParticuleDirection(e) &#123;</span><br><span class="line">    var t &#x3D; anime.random(0, 360) * Math.PI &#x2F; 180,</span><br><span class="line">        a &#x3D; anime.random(50, 180),</span><br><span class="line">        n &#x3D; [-1, 1][anime.random(0, 1)] * a;</span><br><span class="line">    return &#123;</span><br><span class="line">        x: e.x + n * Math.cos(t),</span><br><span class="line">        y: e.y + n * Math.sin(t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createParticule(e, t) &#123;</span><br><span class="line">    var a &#x3D; &#123;&#125;;</span><br><span class="line">    return a.x &#x3D; e, a.y &#x3D; t, a.color &#x3D; colors[anime.random(0, colors.length - 1)], a.radius &#x3D; anime.random(16, 32), a.endPos &#x3D;</span><br><span class="line">        setParticuleDirection(a), a.draw &#x3D; function () &#123;</span><br><span class="line">            ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, 0, 2 * Math.PI, !0), ctx.fillStyle &#x3D; a.color, ctx.fill()</span><br><span class="line">        &#125;, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createCircle(e, t) &#123;</span><br><span class="line">    var a &#x3D; &#123;&#125;;</span><br><span class="line">    return a.x &#x3D; e, a.y &#x3D; t, a.color &#x3D; &quot;#F00&quot;, a.radius &#x3D; 0.1, a.alpha &#x3D; 0.5, a.lineWidth &#x3D; 6, a.draw &#x3D; function () &#123;</span><br><span class="line">        ctx.globalAlpha &#x3D; a.alpha, ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, 0, 2 * Math.PI, !0), ctx.lineWidth &#x3D;</span><br><span class="line">            a.lineWidth, ctx.strokeStyle &#x3D; a.color, ctx.stroke(), ctx.globalAlpha &#x3D; 1</span><br><span class="line">    &#125;, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function renderParticule(e) &#123;</span><br><span class="line">    for (var t &#x3D; 0; t &lt; e.animatables.length; t++) &#123;</span><br><span class="line">        e.animatables[t].target.draw()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function animateParticules(e, t) &#123;</span><br><span class="line">    for (var a &#x3D; createCircle(e, t), n &#x3D; [], i &#x3D; 0; i &lt; numberOfParticules; i++) &#123;</span><br><span class="line">        n.push(createParticule(e, t))</span><br><span class="line">    &#125;</span><br><span class="line">    anime.timeline().add(&#123;</span><br><span class="line">        targets: n,</span><br><span class="line">        x: function (e) &#123;</span><br><span class="line">            return e.endPos.x</span><br><span class="line">        &#125;,</span><br><span class="line">        y: function (e) &#123;</span><br><span class="line">            return e.endPos.y</span><br><span class="line">        &#125;,</span><br><span class="line">        radius: 0.1,</span><br><span class="line">        duration: anime.random(1200, 1800),</span><br><span class="line">        easing: &quot;easeOutExpo&quot;,</span><br><span class="line">        update: renderParticule</span><br><span class="line">    &#125;).add(&#123;</span><br><span class="line">        targets: a,</span><br><span class="line">        radius: anime.random(80, 160),</span><br><span class="line">        lineWidth: 0,</span><br><span class="line">        alpha: &#123;</span><br><span class="line">            value: 0,</span><br><span class="line">            easing: &quot;linear&quot;,</span><br><span class="line">            duration: anime.random(600, 800)</span><br><span class="line">        &#125;,</span><br><span class="line">        duration: anime.random(1200, 1800),</span><br><span class="line">        easing: &quot;easeOutExpo&quot;,</span><br><span class="line">        update: renderParticule,</span><br><span class="line">        offset: 0</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function debounce(e, t) &#123;</span><br><span class="line">    var a;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        var n &#x3D; this,</span><br><span class="line">            i &#x3D; arguments;</span><br><span class="line">        clearTimeout(a), a &#x3D; setTimeout(function () &#123;</span><br><span class="line">            e.apply(n, i)</span><br><span class="line">        &#125;, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var canvasEl &#x3D; document.querySelector(&quot;.fireworks&quot;);</span><br><span class="line">if (canvasEl) &#123;</span><br><span class="line">    var ctx &#x3D; canvasEl.getContext(&quot;2d&quot;),</span><br><span class="line">        numberOfParticules &#x3D; 30,</span><br><span class="line">        pointerX &#x3D; 0,</span><br><span class="line">        pointerY &#x3D; 0,</span><br><span class="line">        tap &#x3D; &quot;mousedown&quot;,</span><br><span class="line">        colors &#x3D; [&quot;#FF1461&quot;, &quot;#18FF92&quot;, &quot;#5A87FF&quot;, &quot;#FBF38C&quot;],</span><br><span class="line">        setCanvasSize &#x3D; debounce(function () &#123;</span><br><span class="line">            canvasEl.width &#x3D; 2 * window.innerWidth, canvasEl.height &#x3D; 2 * window.innerHeight, canvasEl.style.width &#x3D;</span><br><span class="line">                window.innerWidth + &quot;px&quot;, canvasEl.style.height &#x3D; window.innerHeight + &quot;px&quot;, canvasEl.getContext(</span><br><span class="line">                    &quot;2d&quot;).scale(2, 2)</span><br><span class="line">        &#125;, 500),</span><br><span class="line">        render &#x3D; anime(&#123;</span><br><span class="line">            duration: 1 &#x2F; 0,</span><br><span class="line">            update: function () &#123;</span><br><span class="line">                ctx.clearRect(0, 0, canvasEl.width, canvasEl.height)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    document.addEventListener(tap, function (e) &#123;</span><br><span class="line">        &quot;sidebar&quot; !&#x3D;&#x3D; e.target.id &amp;&amp; &quot;toggle-sidebar&quot; !&#x3D;&#x3D; e.target.id &amp;&amp; &quot;A&quot; !&#x3D;&#x3D; e.target.nodeName &amp;&amp; &quot;IMG&quot; !&#x3D;&#x3D;</span><br><span class="line">            e.target.nodeName &amp;&amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY))</span><br><span class="line">    &#125;, !1), setCanvasSize(), window.addEventListener(&quot;resize&quot;, setCanvasSize, !1)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>themes\yelee\layout\layout.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--鼠标点击烟花爆炸效果，需要引入jQuery--&gt;</span><br><span class="line">&lt;% if (theme.fireworks)&#123; %&gt;</span><br><span class="line">    &lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcdn.net&#x2F;&#x2F;ajax&#x2F;libs&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 鼠标点击烟花爆炸效果</span><br><span class="line">fireworks: true</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200319202123965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="动态线条背景"><a href="#动态线条背景" class="headerlink" title="动态线条背景"></a>动态线条背景</h2><p>themes\yelee\layout\layout.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--动态线条背景--&gt;</span><br><span class="line">&lt;% if (theme.canvas_nest.enable)&#123; %&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; color&#x3D;&quot;&lt;%&#x3D;theme.canvas_nest.color %&gt;&quot; opacity&#x3D;&quot;&lt;%&#x3D;theme.canvas_nest.opacity %&gt;&quot;</span><br><span class="line">        zIndex&#x3D;&quot;&lt;%&#x3D;theme.canvas_nest.zIndex %&gt;&quot; count&#x3D;&quot;&lt;%&#x3D;theme.canvas_nest.count %&gt;&quot;</span><br><span class="line">        src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcdn.net&#x2F;&#x2F;ajax&#x2F;libs&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js</span><br><span class="line"># 配置详见： https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js#configuration</span><br><span class="line"># 动态线条效果，会向鼠标集中</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &#39;255, 235, 59&#39;        # color of lines, default: &#39;0,0,0&#39;; RGB values: (R,G,B).(note: use &#39;,&#39; to separate.)</span><br><span class="line">  pointColor: &#39;156,39,176&#39;     # color of points, default: &#39;0,0,0&#39;; RGB values: (R,G,B).(note: use &#39;,&#39; to separate.)</span><br><span class="line">  opacity: &#39;0.8&#39;               # the opacity of line (0~1), default: 0.5.</span><br><span class="line">  count: &#39;99&#39;                  # the number of lines, default: 99.</span><br><span class="line">  zIndex: &#39;-1&#39;                 # z-index property of the background, default: -1.</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020031920234197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="雪花特效-2-大雪花-有齿轮"><a href="#雪花特效-2-大雪花-有齿轮" class="headerlink" title="雪花特效 2.大雪花(有齿轮)"></a>雪花特效 2.大雪花(有齿轮)</h2><p>\themes\yelee\source\js\snow2.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*样式一*&#x2F;</span><br><span class="line">(function ($) &#123;</span><br><span class="line">    $.fn.snow &#x3D; function (options) &#123;</span><br><span class="line">        var $flake &#x3D; $(&#39;&lt;div id&#x3D;&quot;snowbox&quot; &#x2F;&gt;&#39;).css(&#123;</span><br><span class="line">                &#39;position&#39;: &#39;absolute&#39;,</span><br><span class="line">                &#39;z-index&#39;: &#39;9999&#39;,</span><br><span class="line">                &#39;top&#39;: &#39;-50px&#39;</span><br><span class="line">            &#125;).html(&#39;❄&#39;),</span><br><span class="line">            documentHeight &#x3D; $(document).height(),</span><br><span class="line">            documentWidth &#x3D; $(document).width(),</span><br><span class="line">            defaults &#x3D; &#123;</span><br><span class="line">                minSize: 10,</span><br><span class="line">                maxSize: 20,</span><br><span class="line">                newOn: 1000,</span><br><span class="line">                flakeColor: &quot;#AFDAEF&quot; &#x2F;* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF *&#x2F;</span><br><span class="line">            &#125;,</span><br><span class="line">            options &#x3D; $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">        var interval &#x3D; setInterval(function () &#123;</span><br><span class="line">            var startPositionLeft &#x3D; Math.random() * documentWidth - 100,</span><br><span class="line">                startOpacity &#x3D; 0.5 + Math.random(),</span><br><span class="line">                sizeFlake &#x3D; options.minSize + Math.random() * options.maxSize,</span><br><span class="line">                endPositionTop &#x3D; documentHeight - 200,</span><br><span class="line">                endPositionLeft &#x3D; startPositionLeft - 500 + Math.random() * 500,</span><br><span class="line">                durationFall &#x3D; documentHeight * 10 + Math.random() * 5000;</span><br><span class="line">            $flake.clone().appendTo(&#39;body&#39;).css(&#123;</span><br><span class="line">                left: startPositionLeft,</span><br><span class="line">                opacity: startOpacity,</span><br><span class="line">                &#39;font-size&#39;: sizeFlake,</span><br><span class="line">                color: options.flakeColor</span><br><span class="line">            &#125;).animate(&#123;</span><br><span class="line">                top: endPositionTop,</span><br><span class="line">                left: endPositionLeft,</span><br><span class="line">                opacity: 0.2</span><br><span class="line">            &#125;, durationFall, &#39;linear&#39;, function () &#123;</span><br><span class="line">                $(this).remove()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(function () &#123;</span><br><span class="line">    $.fn.snow(&#123;</span><br><span class="line">        minSize: 5,</span><br><span class="line">        &#x2F;* 定义雪花最小尺寸 *&#x2F;</span><br><span class="line">        maxSize: 50,</span><br><span class="line">        &#x2F;* 定义雪花最大尺寸 *&#x2F;</span><br><span class="line">        newOn: 300 &#x2F;* 定义密集程度，数字越小越密集 *&#x2F;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>themes\yelee\layout\layout.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 雪花特效2 --&gt;</span><br><span class="line">&lt;% if (theme.snow2)&#123; %&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;snow2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 雪花特效2</span><br><span class="line">snow2: true</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200319202518481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="雪花特效-3-小雪花-无齿轮-没有看到效果"><a href="#雪花特效-3-小雪花-无齿轮-没有看到效果" class="headerlink" title="雪花特效 3.小雪花(无齿轮)(没有看到效果)"></a>雪花特效 3.小雪花(无齿轮)(没有看到效果)</h2><p>\themes\yelee\source\js\snow3.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*样式二*&#x2F;</span><br><span class="line">&#x2F;* 控制下雪 *&#x2F;</span><br><span class="line">function snowFall(snow) &#123;</span><br><span class="line">    &#x2F;* 可配置属性 *&#x2F;</span><br><span class="line">    snow &#x3D; snow || &#123;&#125;;</span><br><span class="line">    this.maxFlake &#x3D; snow.maxFlake || 200; &#x2F;* 最多片数 *&#x2F;</span><br><span class="line">    this.flakeSize &#x3D; snow.flakeSize || 10; &#x2F;* 雪花形状 *&#x2F;</span><br><span class="line">    this.fallSpeed &#x3D; snow.fallSpeed || 1; &#x2F;* 坠落速度 *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 兼容写法 *&#x2F;</span><br><span class="line">requestAnimationFrame &#x3D; window.requestAnimationFrame ||</span><br><span class="line">    window.mozRequestAnimationFrame ||</span><br><span class="line">    window.webkitRequestAnimationFrame ||</span><br><span class="line">    window.msRequestAnimationFrame ||</span><br><span class="line">    window.oRequestAnimationFrame ||</span><br><span class="line">    function (callback) &#123;</span><br><span class="line">        setTimeout(callback, 1000 &#x2F; 60);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame &#x3D; window.cancelAnimationFrame ||</span><br><span class="line">    window.mozCancelAnimationFrame ||</span><br><span class="line">    window.webkitCancelAnimationFrame ||</span><br><span class="line">    window.msCancelAnimationFrame ||</span><br><span class="line">    window.oCancelAnimationFrame;</span><br><span class="line">&#x2F;* 开始下雪 *&#x2F;</span><br><span class="line">snowFall.prototype.start &#x3D; function () &#123;</span><br><span class="line">    &#x2F;* 创建画布 *&#x2F;</span><br><span class="line">    snowCanvas.apply(this);</span><br><span class="line">    &#x2F;* 创建雪花形状 *&#x2F;</span><br><span class="line">    createFlakes.apply(this);</span><br><span class="line">    &#x2F;* 画雪 *&#x2F;</span><br><span class="line">    drawSnow.apply(this)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 创建画布 *&#x2F;</span><br><span class="line">function snowCanvas() &#123;</span><br><span class="line">    &#x2F;* 添加Dom结点 *&#x2F;</span><br><span class="line">    var snowcanvas &#x3D; document.createElement(&quot;canvas&quot;);</span><br><span class="line">    snowcanvas.id &#x3D; &quot;snowfall&quot;;</span><br><span class="line">    snowcanvas.width &#x3D; window.innerWidth;</span><br><span class="line">    snowcanvas.height &#x3D; document.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(&quot;style&quot;, &quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;);</span><br><span class="line">    document.getElementsByTagName(&quot;body&quot;)[0].appendChild(snowcanvas);</span><br><span class="line">    this.canvas &#x3D; snowcanvas;</span><br><span class="line">    this.ctx &#x3D; snowcanvas.getContext(&quot;2d&quot;);</span><br><span class="line">    &#x2F;* 窗口大小改变的处理 *&#x2F;</span><br><span class="line">    window.onresize &#x3D; function () &#123;</span><br><span class="line">        snowcanvas.width &#x3D; window.innerWidth;</span><br><span class="line">        &#x2F;* snowcanvas.height &#x3D; window.innerHeight *&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 雪运动对象 *&#x2F;</span><br><span class="line">function flakeMove(canvasWidth, canvasHeight, flakeSize, fallSpeed) &#123;</span><br><span class="line">    this.x &#x3D; Math.floor(Math.random() * canvasWidth); &#x2F;* x坐标 *&#x2F;</span><br><span class="line">    this.y &#x3D; Math.floor(Math.random() * canvasHeight); &#x2F;* y坐标 *&#x2F;</span><br><span class="line">    this.size &#x3D; Math.random() * flakeSize + 2; &#x2F;* 形状 *&#x2F;</span><br><span class="line">    this.maxSize &#x3D; flakeSize; &#x2F;* 最大形状 *&#x2F;</span><br><span class="line">    this.speed &#x3D; Math.random() * 1 + fallSpeed; &#x2F;* 坠落速度 *&#x2F;</span><br><span class="line">    this.fallSpeed &#x3D; fallSpeed; &#x2F;* 坠落速度 *&#x2F;</span><br><span class="line">    this.velY &#x3D; this.speed; &#x2F;* Y方向速度 *&#x2F;</span><br><span class="line">    this.velX &#x3D; 0; &#x2F;* X方向速度 *&#x2F;</span><br><span class="line">    this.stepSize &#x3D; Math.random() &#x2F; 30; &#x2F;* 步长 *&#x2F;</span><br><span class="line">    this.step &#x3D; 0 &#x2F;* 步数 *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update &#x3D; function () &#123;</span><br><span class="line">    var x &#x3D; this.x,</span><br><span class="line">        y &#x3D; this.y;</span><br><span class="line">    &#x2F;* 左右摆动(余弦) *&#x2F;</span><br><span class="line">    this.velX *&#x3D; 0.98;</span><br><span class="line">    if (this.velY &lt;&#x3D; this.speed) &#123;</span><br><span class="line">        this.velY &#x3D; this.speed</span><br><span class="line">    &#125;</span><br><span class="line">    this.velX +&#x3D; Math.cos(this.step +&#x3D; .05) * this.stepSize;</span><br><span class="line"></span><br><span class="line">    this.y +&#x3D; this.velY;</span><br><span class="line">    this.x +&#x3D; this.velX;</span><br><span class="line">    &#x2F;* 飞出边界的处理 *&#x2F;</span><br><span class="line">    if (this.x &gt;&#x3D; canvas.width || this.x &lt;&#x3D; 0 || this.y &gt;&#x3D; canvas.height || this.y &lt;&#x3D; 0) &#123;</span><br><span class="line">        this.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;* 飞出边界-放置最顶端继续坠落 *&#x2F;</span><br><span class="line">flakeMove.prototype.reset &#x3D; function (width, height) &#123;</span><br><span class="line">    this.x &#x3D; Math.floor(Math.random() * width);</span><br><span class="line">    this.y &#x3D; 0;</span><br><span class="line">    this.size &#x3D; Math.random() * this.maxSize + 2;</span><br><span class="line">    this.speed &#x3D; Math.random() * 1 + this.fallSpeed;</span><br><span class="line">    this.velY &#x3D; this.speed;</span><br><span class="line">    this.velX &#x3D; 0;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span><br><span class="line">flakeMove.prototype.render &#x3D; function (ctx) &#123;</span><br><span class="line">    var snowFlake &#x3D; ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size);</span><br><span class="line">    snowFlake.addColorStop(0, &quot;rgba(255, 255, 255, 0.9)&quot;); &#x2F;* 此处是雪花颜色，默认是白色 *&#x2F;</span><br><span class="line">    snowFlake.addColorStop(.5, &quot;rgba(255, 255, 255, 0.5)&quot;); &#x2F;* 若要改为其他颜色，请自行查 *&#x2F;</span><br><span class="line">    snowFlake.addColorStop(1, &quot;rgba(255, 255, 255, 0)&quot;); &#x2F;* 找16进制的RGB 颜色代码。 *&#x2F;</span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle &#x3D; snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;* 创建雪花-定义形状 *&#x2F;</span><br><span class="line">function createFlakes() &#123;</span><br><span class="line">    var maxFlake &#x3D; this.maxFlake,</span><br><span class="line">        flakes &#x3D; this.flakes &#x3D; [],</span><br><span class="line">        canvas &#x3D; this.canvas;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(new flakeMove(canvas.width, canvas.height, this.flakeSize, this.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 画雪 *&#x2F;</span><br><span class="line">function drawSnow() &#123;</span><br><span class="line">    var maxFlake &#x3D; this.maxFlake,</span><br><span class="line">        flakes &#x3D; this.flakes;</span><br><span class="line">    ctx &#x3D; this.ctx, canvas &#x3D; this.canvas, that &#x3D; this;</span><br><span class="line">    &#x2F;* 清空雪花 *&#x2F;</span><br><span class="line">    ctx.clearRect(0, 0, canvas.width, canvas.height);</span><br><span class="line">    for (var e &#x3D; 0; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;*  一帧一帧的画 *&#x2F;</span><br><span class="line">    this.loop &#x3D; requestAnimationFrame(function () &#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 调用及控制方法 *&#x2F;</span><br><span class="line">var snow &#x3D; new snowFall(&#123;</span><br><span class="line">    maxFlake: 60</span><br><span class="line">&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure><p>themes\yelee\layout\layout.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 雪花特效3 --&gt;</span><br><span class="line">&lt;% if (theme.snow3)&#123; %&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;snow3.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 雪花特效3</span><br><span class="line">snow3: false</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200319202711173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="彩带-1-鼠标点击自动替换彩带"><a href="#彩带-1-鼠标点击自动替换彩带" class="headerlink" title="彩带 1.鼠标点击自动替换彩带"></a>彩带 1.鼠标点击自动替换彩带</h2><p>themes\yelee\source\js\ribbon.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Copyright (c) 2016 hustcc</span><br><span class="line"> * License: MIT</span><br><span class="line"> * Version: v1.0.1</span><br><span class="line"> * GitHub: https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;ribbon.js</span><br><span class="line">**&#x2F;</span><br><span class="line">&#x2F;*jshint -W030 *&#x2F;</span><br><span class="line">! function() &#123;</span><br><span class="line">  function attr(node, attr, default_value) &#123;</span><br><span class="line">    return Number(node.getAttribute(attr)) || default_value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; get user config</span><br><span class="line">  var scripts &#x3D; document.getElementsByTagName(&#39;script&#39;),</span><br><span class="line">    script &#x3D; scripts[scripts.length - 1]; &#x2F;&#x2F; 当前加载的script</span><br><span class="line">  config &#x3D; &#123;</span><br><span class="line">    z: attr(script, &quot;zIndex&quot;, -1), &#x2F;&#x2F; z-index</span><br><span class="line">    a: attr(script, &quot;alpha&quot;, 0.6), &#x2F;&#x2F; alpha</span><br><span class="line">    s: attr(script, &quot;size&quot;, 90), &#x2F;&#x2F; size</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  var canvas &#x3D; document.createElement(&#39;canvas&#39;),</span><br><span class="line">    g2d &#x3D; canvas.getContext(&#39;2d&#39;),</span><br><span class="line">    pr &#x3D; window.devicePixelRatio || 1,</span><br><span class="line">    width &#x3D; window.innerWidth,</span><br><span class="line">    height &#x3D; window.innerHeight,</span><br><span class="line">    f &#x3D; config.s,</span><br><span class="line">    q, t,</span><br><span class="line">    m &#x3D; Math,</span><br><span class="line">    r &#x3D; 0,</span><br><span class="line">    pi &#x3D; m.PI*2,</span><br><span class="line">    cos &#x3D; m.cos,</span><br><span class="line">    random &#x3D; m.random;</span><br><span class="line">  canvas.width &#x3D; width * pr;</span><br><span class="line">  canvas.height &#x3D; height * pr;</span><br><span class="line">  g2d.scale(pr, pr);</span><br><span class="line">  g2d.globalAlpha &#x3D; config.a;</span><br><span class="line">  canvas.style.cssText &#x3D; &#39;opacity: &#39; + config.a + &#39;;position:fixed;top:0;left:0;z-index: &#39; + config.z + &#39;;width:100%;height:100%;pointer-events:none;&#39;;</span><br><span class="line">  &#x2F;&#x2F; create canvas</span><br><span class="line">  document.getElementsByTagName(&#39;body&#39;)[0].appendChild(canvas);</span><br><span class="line"></span><br><span class="line">  function redraw() &#123;</span><br><span class="line">    g2d.clearRect(0, 0, width, height);</span><br><span class="line">    q &#x3D; [&#123;x: 0, y: height * 0.7 + f&#125;, &#123;x: 0, y: height * 0.7 - f&#125;];</span><br><span class="line">    while(q[1].x &lt; width + f) draw(q[0], q[1]);</span><br><span class="line">  &#125;</span><br><span class="line">  function draw(i, j) &#123;</span><br><span class="line">    g2d.beginPath();</span><br><span class="line">    g2d.moveTo(i.x, i.y);</span><br><span class="line">    g2d.lineTo(j.x, j.y);</span><br><span class="line">    var k &#x3D; j.x + (random()*2-0.25)*f, n &#x3D; line(j.y);</span><br><span class="line">    g2d.lineTo(k, n);</span><br><span class="line">    g2d.closePath();</span><br><span class="line">    r -&#x3D; pi &#x2F; -50;</span><br><span class="line">    g2d.fillStyle &#x3D; &#39;#&#39;+(cos(r)*127+128&lt;&lt;16 | cos(r+pi&#x2F;3)*127+128&lt;&lt;8 | cos(r+pi&#x2F;3*2)*127+128).toString(16);</span><br><span class="line">    g2d.fill();</span><br><span class="line">    q[0] &#x3D; q[1];</span><br><span class="line">    q[1] &#x3D; &#123;x: k, y: n&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  function line(p)&#123;</span><br><span class="line">    t &#x3D; p + (random() * 2 - 1.1) * f;</span><br><span class="line">    return (t &gt; height || t &lt; 0) ? line(p) : t;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  document.onclick &#x3D; redraw;</span><br><span class="line">  document.ontouchstart &#x3D; redraw;</span><br><span class="line">  redraw();</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>themes\yelee\layout\layout.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--彩带1.点击自动替换彩带--&gt;</span><br><span class="line">&lt;% if (theme.ribbon)&#123; %&gt;</span><br><span class="line">    &lt;!-- &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;g.joyinshare.com&#x2F;hc&#x2F;ribbon.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt; --&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;ribbon.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;ribbon.js</span><br><span class="line"># 彩带1.点击自动替换彩带</span><br><span class="line">ribbon: false</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200319202840744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="彩带-2-自动飘动"><a href="#彩带-2-自动飘动" class="headerlink" title="彩带 2.自动飘动"></a>彩带 2.自动飘动</h2><p>themes\yelee\source\js\ribbon_flow.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><span class="line">(function (name, factory) &#123;</span><br><span class="line">    if (typeof window &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;</span><br><span class="line">        window[name] &#x3D; factory()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(&quot;Ribbons&quot;, function () &#123;</span><br><span class="line">    var _w &#x3D; window,</span><br><span class="line">        _b &#x3D; document.body,</span><br><span class="line">        _d &#x3D; document.documentElement;</span><br><span class="line">    var random &#x3D; function () &#123;</span><br><span class="line">        if (arguments.length &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">            if (Array.isArray(arguments[0])) &#123;</span><br><span class="line">                var index &#x3D; Math.round(random(0, arguments[0].length - 1));</span><br><span class="line">                return arguments[0][index]</span><br><span class="line">            &#125;</span><br><span class="line">            return random(0, arguments[0])</span><br><span class="line">        &#125; else if (arguments.length &#x3D;&#x3D;&#x3D; 2) &#123;</span><br><span class="line">            return Math.random() * (arguments[1] - arguments[0]) + arguments[0]</span><br><span class="line">        &#125;</span><br><span class="line">        return 0</span><br><span class="line">    &#125;;</span><br><span class="line">    var screenInfo &#x3D; function (e) &#123;</span><br><span class="line">        var width &#x3D; Math.max(0, _w.innerWidth || _d.clientWidth || _b.clientWidth || 0),</span><br><span class="line">            height &#x3D; Math.max(0, _w.innerHeight || _d.clientHeight || _b.clientHeight || 0),</span><br><span class="line">            scrollx &#x3D; Math.max(0, _w.pageXOffset || _d.scrollLeft || _b.scrollLeft || 0) - (_d.clientLeft || 0),</span><br><span class="line">            scrolly &#x3D; Math.max(0, _w.pageYOffset || _d.scrollTop || _b.scrollTop || 0) - (_d.clientTop || 0);</span><br><span class="line">        return &#123;</span><br><span class="line">            width: width,</span><br><span class="line">            height: height,</span><br><span class="line">            ratio: width &#x2F; height,</span><br><span class="line">            centerx: width &#x2F; 2,</span><br><span class="line">            centery: height &#x2F; 2,</span><br><span class="line">            scrollx: scrollx,</span><br><span class="line">            scrolly: scrolly</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var mouseInfo &#x3D; function (e) &#123;</span><br><span class="line">        var screen &#x3D; screenInfo(e),</span><br><span class="line">            mousex &#x3D; e ? Math.max(0, e.pageX || e.clientX || 0) : 0,</span><br><span class="line">            mousey &#x3D; e ? Math.max(0, e.pageY || e.clientY || 0) : 0;</span><br><span class="line">        return &#123;</span><br><span class="line">            mousex: mousex,</span><br><span class="line">            mousey: mousey,</span><br><span class="line">            centerx: mousex - screen.width &#x2F; 2,</span><br><span class="line">            centery: mousey - screen.height &#x2F; 2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var Point &#x3D; function (x, y) &#123;</span><br><span class="line">        this.x &#x3D; 0;</span><br><span class="line">        this.y &#x3D; 0;</span><br><span class="line">        this.set(x, y)</span><br><span class="line">    &#125;;</span><br><span class="line">    Point.prototype &#x3D; &#123;</span><br><span class="line">        constructor: Point,</span><br><span class="line">        set: function (x, y) &#123;</span><br><span class="line">            this.x &#x3D; x || 0;</span><br><span class="line">            this.y &#x3D; y || 0</span><br><span class="line">        &#125;,</span><br><span class="line">        copy: function (point) &#123;</span><br><span class="line">            this.x &#x3D; point.x || 0;</span><br><span class="line">            this.y &#x3D; point.y || 0;</span><br><span class="line">            return this</span><br><span class="line">        &#125;,</span><br><span class="line">        multiply: function (x, y) &#123;</span><br><span class="line">            this.x *&#x3D; x || 1;</span><br><span class="line">            this.y *&#x3D; y || 1;</span><br><span class="line">            return this</span><br><span class="line">        &#125;,</span><br><span class="line">        divide: function (x, y) &#123;</span><br><span class="line">            this.x &#x2F;&#x3D; x || 1;</span><br><span class="line">            this.y &#x2F;&#x3D; y || 1;</span><br><span class="line">            return this</span><br><span class="line">        &#125;,</span><br><span class="line">        add: function (x, y) &#123;</span><br><span class="line">            this.x +&#x3D; x || 0;</span><br><span class="line">            this.y +&#x3D; y || 0;</span><br><span class="line">            return this</span><br><span class="line">        &#125;,</span><br><span class="line">        subtract: function (x, y) &#123;</span><br><span class="line">            this.x -&#x3D; x || 0;</span><br><span class="line">            this.y -&#x3D; y || 0;</span><br><span class="line">            return this</span><br><span class="line">        &#125;,</span><br><span class="line">        clampX: function (min, max) &#123;</span><br><span class="line">            this.x &#x3D; Math.max(min, Math.min(this.x, max));</span><br><span class="line">            return this</span><br><span class="line">        &#125;,</span><br><span class="line">        clampY: function (min, max) &#123;</span><br><span class="line">            this.y &#x3D; Math.max(min, Math.min(this.y, max));</span><br><span class="line">            return this</span><br><span class="line">        &#125;,</span><br><span class="line">        flipX: function () &#123;</span><br><span class="line">            this.x *&#x3D; -1;</span><br><span class="line">            return this</span><br><span class="line">        &#125;,</span><br><span class="line">        flipY: function () &#123;</span><br><span class="line">            this.y *&#x3D; -1;</span><br><span class="line">            return this</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var Factory &#x3D; function (options) &#123;</span><br><span class="line">        this._canvas &#x3D; null;</span><br><span class="line">        this._context &#x3D; null;</span><br><span class="line">        this._sto &#x3D; null;</span><br><span class="line">        this._width &#x3D; 0;</span><br><span class="line">        this._height &#x3D; 0;</span><br><span class="line">        this._scroll &#x3D; 0;</span><br><span class="line">        this._ribbons &#x3D; [];</span><br><span class="line">        this._options &#x3D; &#123;</span><br><span class="line">            colorSaturation: &quot;80%&quot;,</span><br><span class="line">            colorBrightness: &quot;60%&quot;,</span><br><span class="line">            colorAlpha: 0.65,</span><br><span class="line">            colorCycleSpeed: 6,</span><br><span class="line">            verticalPosition: &quot;center&quot;,</span><br><span class="line">            horizontalSpeed: 150,</span><br><span class="line">            ribbonCount: 5,</span><br><span class="line">            strokeSize: 5,</span><br><span class="line">            parallaxAmount: -0.5,</span><br><span class="line">            animateSections: true</span><br><span class="line">        &#125;;</span><br><span class="line">        this._onDraw &#x3D; this._onDraw.bind(this);</span><br><span class="line">        this._onResize &#x3D; this._onResize.bind(this);</span><br><span class="line">        this._onScroll &#x3D; this._onScroll.bind(this);</span><br><span class="line">        this.setOptions(options);</span><br><span class="line">        this.init()</span><br><span class="line">    &#125;;</span><br><span class="line">    Factory.prototype &#x3D; &#123;</span><br><span class="line">        constructor: Factory,</span><br><span class="line">        setOptions: function (options) &#123;</span><br><span class="line">            if (typeof options &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;</span><br><span class="line">                for (var key in options) &#123;</span><br><span class="line">                    if (options.hasOwnProperty(key)) &#123;</span><br><span class="line">                        this._options[key] &#x3D; options[key]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        init: function () &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                this._canvas &#x3D; document.createElement(&quot;canvas&quot;);</span><br><span class="line">                this._canvas.style[&quot;display&quot;] &#x3D; &quot;block&quot;;</span><br><span class="line">                this._canvas.style[&quot;position&quot;] &#x3D; &quot;fixed&quot;;</span><br><span class="line">                this._canvas.style[&quot;margin&quot;] &#x3D; &quot;0&quot;;</span><br><span class="line">                this._canvas.style[&quot;padding&quot;] &#x3D; &quot;0&quot;;</span><br><span class="line">                this._canvas.style[&quot;border&quot;] &#x3D; &quot;0&quot;;</span><br><span class="line">                this._canvas.style[&quot;outline&quot;] &#x3D; &quot;0&quot;;</span><br><span class="line">                this._canvas.style[&quot;left&quot;] &#x3D; &quot;0&quot;;</span><br><span class="line">                this._canvas.style[&quot;top&quot;] &#x3D; &quot;0&quot;;</span><br><span class="line">                this._canvas.style[&quot;width&quot;] &#x3D; &quot;100%&quot;;</span><br><span class="line">                this._canvas.style[&quot;height&quot;] &#x3D; &quot;100%&quot;;</span><br><span class="line">                this._canvas.style[&quot;z-index&quot;] &#x3D; &quot;-1&quot;;</span><br><span class="line">                this._onResize();</span><br><span class="line">                this._context &#x3D; this._canvas.getContext(&quot;2d&quot;);</span><br><span class="line">                this._context.clearRect(0, 0, this._width, this._height);</span><br><span class="line">                this._context.globalAlpha &#x3D; this._options.colorAlpha;</span><br><span class="line">                window.addEventListener(&quot;resize&quot;, this._onResize);</span><br><span class="line">                window.addEventListener(&quot;scroll&quot;, this._onScroll);</span><br><span class="line">                document.body.appendChild(this._canvas)</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">                console.warn(&quot;Canvas Context Error: &quot; + e.toString());</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            this._onDraw()</span><br><span class="line">        &#125;,</span><br><span class="line">        addRibbon: function () &#123;</span><br><span class="line">            var dir &#x3D; Math.round(random(1, 9)) &gt; 5 ? &quot;right&quot; : &quot;left&quot;,</span><br><span class="line">                stop &#x3D; 1000,</span><br><span class="line">                hide &#x3D; 200,</span><br><span class="line">                min &#x3D; 0 - hide,</span><br><span class="line">                max &#x3D; this._width + hide,</span><br><span class="line">                movex &#x3D; 0,</span><br><span class="line">                movey &#x3D; 0,</span><br><span class="line">                startx &#x3D; dir &#x3D;&#x3D;&#x3D; &quot;right&quot; ? min : max,</span><br><span class="line">                starty &#x3D; Math.round(random(0, this._height));</span><br><span class="line">            if (&#x2F;^(top|min)$&#x2F;i.test(this._options.verticalPosition)) &#123;</span><br><span class="line">                starty &#x3D; 0 + hide</span><br><span class="line">            &#125; else if (&#x2F;^(middle|center)$&#x2F;i.test(this._options.verticalPosition)) &#123;</span><br><span class="line">                starty &#x3D; this._height &#x2F; 2</span><br><span class="line">            &#125; else if (&#x2F;^(bottom|max)$&#x2F;i.test(this._options.verticalPosition)) &#123;</span><br><span class="line">                starty &#x3D; this._height - hide</span><br><span class="line">            &#125;</span><br><span class="line">            var ribbon &#x3D; [],</span><br><span class="line">                point1 &#x3D; new Point(startx, starty),</span><br><span class="line">                point2 &#x3D; new Point(startx, starty),</span><br><span class="line">                point3 &#x3D; null,</span><br><span class="line">                color &#x3D; Math.round(random(0, 360)),</span><br><span class="line">                delay &#x3D; 0;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (stop &lt;&#x3D; 0) break;</span><br><span class="line">                stop--;</span><br><span class="line">                movex &#x3D; Math.round((Math.random() * 1 - 0.2) * this._options.horizontalSpeed);</span><br><span class="line">                movey &#x3D; Math.round((Math.random() * 1 - 0.5) * (this._height * 0.25));</span><br><span class="line">                point3 &#x3D; new Point();</span><br><span class="line">                point3.copy(point2);</span><br><span class="line">                if (dir &#x3D;&#x3D;&#x3D; &quot;right&quot;) &#123;</span><br><span class="line">                    point3.add(movex, movey);</span><br><span class="line">                    if (point2.x &gt;&#x3D; max) break</span><br><span class="line">                &#125; else if (dir &#x3D;&#x3D;&#x3D; &quot;left&quot;) &#123;</span><br><span class="line">                    point3.subtract(movex, movey);</span><br><span class="line">                    if (point2.x &lt;&#x3D; min) break</span><br><span class="line">                &#125;</span><br><span class="line">                ribbon.push(&#123;</span><br><span class="line">                    point1: new Point(point1.x, point1.y),</span><br><span class="line">                    point2: new Point(point2.x, point2.y),</span><br><span class="line">                    point3: point3,</span><br><span class="line">                    color: color,</span><br><span class="line">                    delay: delay,</span><br><span class="line">                    dir: dir,</span><br><span class="line">                    alpha: 0,</span><br><span class="line">                    phase: 0</span><br><span class="line">                &#125;);</span><br><span class="line">                point1.copy(point2);</span><br><span class="line">                point2.copy(point3);</span><br><span class="line">                delay +&#x3D; 4;</span><br><span class="line">                color +&#x3D; this._options.colorCycleSpeed</span><br><span class="line">            &#125;</span><br><span class="line">            this._ribbons.push(ribbon)</span><br><span class="line">        &#125;,</span><br><span class="line">        _drawRibbonSection: function (section) &#123;</span><br><span class="line">            if (section) &#123;</span><br><span class="line">                if (section.phase &gt;&#x3D; 1 &amp;&amp; section.alpha &lt;&#x3D; 0) &#123;</span><br><span class="line">                    return true</span><br><span class="line">                &#125;</span><br><span class="line">                if (section.delay &lt;&#x3D; 0) &#123;</span><br><span class="line">                    section.phase +&#x3D; 0.02;</span><br><span class="line">                    section.alpha &#x3D; Math.sin(section.phase) * 1;</span><br><span class="line">                    section.alpha &#x3D; section.alpha &lt;&#x3D; 0 ? 0 : section.alpha;</span><br><span class="line">                    section.alpha &#x3D; section.alpha &gt;&#x3D; 1 ? 1 : section.alpha;</span><br><span class="line">                    if (this._options.animateSections) &#123;</span><br><span class="line">                        var mod &#x3D; Math.sin(1 + section.phase * Math.PI &#x2F; 2) * 0.1;</span><br><span class="line">                        if (section.dir &#x3D;&#x3D;&#x3D; &quot;right&quot;) &#123;</span><br><span class="line">                            section.point1.add(mod, 0);</span><br><span class="line">                            section.point2.add(mod, 0);</span><br><span class="line">                            section.point3.add(mod, 0)</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            section.point1.subtract(mod, 0);</span><br><span class="line">                            section.point2.subtract(mod, 0);</span><br><span class="line">                            section.point3.subtract(mod, 0)</span><br><span class="line">                        &#125;</span><br><span class="line">                        section.point1.add(0, mod);</span><br><span class="line">                        section.point2.add(0, mod);</span><br><span class="line">                        section.point3.add(0, mod)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    section.delay -&#x3D; 0.5</span><br><span class="line">                &#125;</span><br><span class="line">                var s &#x3D; this._options.colorSaturation,</span><br><span class="line">                    l &#x3D; this._options.colorBrightness,</span><br><span class="line">                    c &#x3D; &quot;hsla(&quot; + section.color + &quot;, &quot; + s + &quot;, &quot; + l + &quot;, &quot; + section.alpha + &quot; )&quot;;</span><br><span class="line">                this._context.save();</span><br><span class="line">                if (this._options.parallaxAmount !&#x3D;&#x3D; 0) &#123;</span><br><span class="line">                    this._context.translate(0, this._scroll * this._options.parallaxAmount)</span><br><span class="line">                &#125;</span><br><span class="line">                this._context.beginPath();</span><br><span class="line">                this._context.moveTo(section.point1.x, section.point1.y);</span><br><span class="line">                this._context.lineTo(section.point2.x, section.point2.y);</span><br><span class="line">                this._context.lineTo(section.point3.x, section.point3.y);</span><br><span class="line">                this._context.fillStyle &#x3D; c;</span><br><span class="line">                this._context.fill();</span><br><span class="line">                if (this._options.strokeSize &gt; 0) &#123;</span><br><span class="line">                    this._context.lineWidth &#x3D; this._options.strokeSize;</span><br><span class="line">                    this._context.strokeStyle &#x3D; c;</span><br><span class="line">                    this._context.lineCap &#x3D; &quot;round&quot;;</span><br><span class="line">                    this._context.stroke()</span><br><span class="line">                &#125;</span><br><span class="line">                this._context.restore()</span><br><span class="line">            &#125;</span><br><span class="line">            return false</span><br><span class="line">        &#125;,</span><br><span class="line">        _onDraw: function () &#123;</span><br><span class="line">            for (var i &#x3D; 0, t &#x3D; this._ribbons.length; i &lt; t; ++i) &#123;</span><br><span class="line">                if (!this._ribbons[i]) &#123;</span><br><span class="line">                    this._ribbons.splice(i, 1)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            this._context.clearRect(0, 0, this._width, this._height);</span><br><span class="line">            for (var a &#x3D; 0; a &lt; this._ribbons.length; ++a) &#123;</span><br><span class="line">                var ribbon &#x3D; this._ribbons[a],</span><br><span class="line">                    numSections &#x3D; ribbon.length,</span><br><span class="line">                    numDone &#x3D; 0;</span><br><span class="line">                for (var b &#x3D; 0; b &lt; numSections; ++b) &#123;</span><br><span class="line">                    if (this._drawRibbonSection(ribbon[b])) &#123;</span><br><span class="line">                        numDone++</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (numDone &gt;&#x3D; numSections) &#123;</span><br><span class="line">                    this._ribbons[a] &#x3D; null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (this._ribbons.length &lt; this._options.ribbonCount) &#123;</span><br><span class="line">                this.addRibbon()</span><br><span class="line">            &#125;</span><br><span class="line">            requestAnimationFrame(this._onDraw)</span><br><span class="line">        &#125;,</span><br><span class="line">        _onResize: function (e) &#123;</span><br><span class="line">            var screen &#x3D; screenInfo(e);</span><br><span class="line">            this._width &#x3D; screen.width;</span><br><span class="line">            this._height &#x3D; screen.height;</span><br><span class="line">            if (this._canvas) &#123;</span><br><span class="line">                this._canvas.width &#x3D; this._width;</span><br><span class="line">                this._canvas.height &#x3D; this._height;</span><br><span class="line">                if (this._context) &#123;</span><br><span class="line">                    this._context.globalAlpha &#x3D; this._options.colorAlpha</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        _onScroll: function (e) &#123;</span><br><span class="line">            var screen &#x3D; screenInfo(e);</span><br><span class="line">            this._scroll &#x3D; screen.scrolly</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    return Factory</span><br><span class="line">&#125;);</span><br><span class="line">new Ribbons(&#123;</span><br><span class="line">    colorSaturation: &quot;60%&quot;,</span><br><span class="line">    colorBrightness: &quot;50%&quot;,</span><br><span class="line">    colorAlpha: 0.5,</span><br><span class="line">    colorCycleSpeed: 5,</span><br><span class="line">    verticalPosition: &quot;random&quot;,</span><br><span class="line">    horizontalSpeed: 200,</span><br><span class="line">    ribbonCount: 3,</span><br><span class="line">    strokeSize: 0,</span><br><span class="line">    parallaxAmount: -0.2,</span><br><span class="line">    animateSections: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>themes\yelee\layout\layout.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--彩带2.自动飘动--&gt;</span><br><span class="line">&lt;% if (theme.ribbon_flow)&#123; %&gt;</span><br><span class="line">    &lt;!-- &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;g.joyinshare.com&#x2F;hc&#x2F;piao.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt; --&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;ribbon_flow.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 彩带2.自动飘动</span><br><span class="line">ribbon_flow: false</span><br></pre></td></tr></table></figure><h2 id="代码雨"><a href="#代码雨" class="headerlink" title="代码雨"></a>代码雨</h2><p>存在问题：位置不对 覆盖了整个页面<br>themes\yelee\source\js\code_rain.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    &#x2F;&#x2F;获取画布对象</span><br><span class="line">    var canvas &#x3D; document.getElementById(&quot;code_rain_canvas&quot;);</span><br><span class="line">    &#x2F;&#x2F;获取画布的上下文</span><br><span class="line">    var context &#x3D;canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    var s &#x3D; window.screen;</span><br><span class="line">    var W &#x3D; canvas.width &#x3D; s.width;</span><br><span class="line">    var H &#x3D; canvas.height;</span><br><span class="line">    &#x2F;&#x2F;获取浏览器屏幕的宽度和高度</span><br><span class="line">    &#x2F;&#x2F;var W &#x3D; window.innerWidth;</span><br><span class="line">    &#x2F;&#x2F;var H &#x3D; window.innerHeight;</span><br><span class="line">    &#x2F;&#x2F;设置canvas的宽度和高度</span><br><span class="line">    canvas.width &#x3D; W;</span><br><span class="line">    canvas.height &#x3D; H;</span><br><span class="line">    &#x2F;&#x2F;每个文字的字体大小</span><br><span class="line">    var fontSize &#x3D; 12;</span><br><span class="line">    &#x2F;&#x2F;计算列</span><br><span class="line">    var colunms &#x3D; Math.floor(W &#x2F;fontSize);</span><br><span class="line">    &#x2F;&#x2F;记录每列文字的y轴坐标</span><br><span class="line">    var drops &#x3D; [];</span><br><span class="line">    &#x2F;&#x2F;给每一个文字初始化一个起始点的位置</span><br><span class="line">    for(var i&#x3D;0;i&lt;colunms;i++)&#123;</span><br><span class="line">        drops.push(0);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;运动的文字</span><br><span class="line">    var str &#x3D;&quot;WELCOME TO WWW.ITRHX.COM&quot;;</span><br><span class="line">    &#x2F;&#x2F;4:fillText(str,x,y);原理就是去更改y的坐标位置</span><br><span class="line">    &#x2F;&#x2F;绘画的函数</span><br><span class="line">    function draw()&#123;</span><br><span class="line">        context.fillStyle &#x3D; &quot;rgba(238,238,238,.08)&quot;;&#x2F;&#x2F;遮盖层</span><br><span class="line">        context.fillRect(0,0,W,H);</span><br><span class="line">        &#x2F;&#x2F;给字体设置样式</span><br><span class="line">        context.font &#x3D; &quot;600 &quot;+fontSize+&quot;px  Georgia&quot;;</span><br><span class="line">        &#x2F;&#x2F;给字体添加颜色</span><br><span class="line">        context.fillStyle &#x3D; [&quot;#33B5E5&quot;, &quot;#0099CC&quot;, &quot;#AA66CC&quot;, &quot;#9933CC&quot;, &quot;#99CC00&quot;, &quot;#669900&quot;, &quot;#FFBB33&quot;, &quot;#FF8800&quot;, &quot;#FF4444&quot;, &quot;#CC0000&quot;][parseInt(Math.random() * 10)];&#x2F;&#x2F;randColor();可以rgb,hsl, 标准色，十六进制颜色</span><br><span class="line">        &#x2F;&#x2F;写入画布中</span><br><span class="line">        for(var i&#x3D;0;i&lt;colunms;i++)&#123;</span><br><span class="line">            var index &#x3D; Math.floor(Math.random() * str.length);</span><br><span class="line">            var x &#x3D; i*fontSize;</span><br><span class="line">            var y &#x3D; drops[i] *fontSize;</span><br><span class="line">            context.fillText(str[index],x,y);</span><br><span class="line">            &#x2F;&#x2F;如果要改变时间，肯定就是改变每次他的起点</span><br><span class="line">            if(y &gt;&#x3D; canvas.height &amp;&amp; Math.random() &gt; 0.99)&#123;</span><br><span class="line">                drops[i] &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">            drops[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    function randColor()&#123;&#x2F;&#x2F;随机颜色</span><br><span class="line">        var r &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        var g &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        var b &#x3D; Math.floor(Math.random() * 256);</span><br><span class="line">        return &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    draw();</span><br><span class="line">    setInterval(draw,35);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>themes\yelee\layout\layout.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--代码雨--&gt;</span><br><span class="line">&lt;% if (theme.code_rain)&#123; %&gt;</span><br><span class="line">      &lt;!-- 数字雨 --&gt;</span><br><span class="line">      &lt;canvas id&#x3D;&quot;code_rain_canvas&quot; width&#x3D;&quot;1440&quot; height&#x3D;&quot;900&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">      &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;code_rain.js&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            #code_rain_canvas &#123;</span><br><span class="line">              position: fixed;</span><br><span class="line">              right: 0px;</span><br><span class="line">              bottom: 0px;</span><br><span class="line">              min-width: 100%;</span><br><span class="line">              min-height: 100%;</span><br><span class="line">              height: auto;</span><br><span class="line">              width: auto;</span><br><span class="line">              z-index: 4;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>themes\yelee_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 代码雨</span><br><span class="line">code_rain: true</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200319203152494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>转载：<br><a href="https://blog.csdn.net/qq_36759224/article/details/85420403" target="_blank" rel="external nofollow noopener noreferrer">Hexo 博客优化之博客美化系列（持续更新）</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yelee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+yelee搭建博客2</title>
      <link href="hexo-yelee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A22/"/>
      <url>hexo-yelee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A22/</url>
      
        <content type="html"><![CDATA[<h2 id="接入评论"><a href="#接入评论" class="headerlink" title="接入评论"></a>接入评论</h2><ol><li>我使用的是<a href="https://www.livere.com/my_Livere" target="_blank" rel="external nofollow noopener noreferrer">来必力</a><br>注册好账号 获取你的uid</li></ol><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200318162504390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2. 在/themes/yelee/layout/_partial/comments 下创建livere.ejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=<span class="string">"livere"</span> id=<span class="string">"comments"</span>&gt;</span><br><span class="line">  &lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">  &lt;div id=<span class="string">"lv-container"</span> data-id=<span class="string">"city"</span> data-uid=<span class="string">"&lt;%= theme.livere.livere_uid%&gt;"</span>&gt;</span><br><span class="line">  &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"> (<span class="keyword">function</span>(d, s) &#123;</span><br><span class="line">     var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (typeof LivereTower === <span class="string">'function'</span>) &#123; <span class="built_in">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">     j = d.createElement(s);</span><br><span class="line">     j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span><br><span class="line">     j.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">     e.parentNode.insertBefore(j, e);</span><br><span class="line">     &#125;)(document, <span class="string">'script'</span>);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>在themes\yelee\layout_partial\article.ejs 中添加</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (theme.livere.on) &#123; %&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'comments/livere'</span>) %&gt;</span><br><span class="line">    &lt;% &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200318162942516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4. 在配置themes\yelee_config.yml文件中添加<br>livere:<br>    on: true<br>    livere_uid: 你的用户id</p><h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><p>在themes/yelee/layout/_partial/目录下新建donate.ejs文件，其中内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class &#x3D;&quot;post-donate&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;donate_board&quot; class&#x3D;&quot;donate_bar center&quot;&gt;</span><br><span class="line">        &lt;a id&#x3D;&quot;btn_donate&quot; class&#x3D;&quot;btn_donate&quot; href&#x3D;&quot;javascript:;&quot; title&#x3D;&quot;打赏&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;donate_txt&quot;&gt;</span><br><span class="line">           ↑&lt;br&gt;</span><br><span class="line">           &lt;%&#x3D;theme.donate_message%&gt;</span><br><span class="line">        &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;donate_guide&quot; class&#x3D;&quot;donate_bar center hidden&quot; &gt;</span><br><span class="line">         &lt;!-- 支付宝打赏图案 --&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;&lt;%&#x3D; theme.Alipay %&gt;&quot; alt&#x3D;&quot;支付宝打赏&quot;&gt;</span><br><span class="line">        &lt;!-- 微信打赏图案 --&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;&lt;%&#x3D; theme.weixin %&gt;&quot; alt&#x3D;&quot;微信打赏&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        document.getElementById(&#39;btn_donate&#39;).onclick &#x3D; function()&#123;</span><br><span class="line">            $(&#39;#donate_board&#39;).addClass(&#39;hidden&#39;);</span><br><span class="line">            $(&#39;#donate_guide&#39;).removeClass(&#39;hidden&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在手机端不显示 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        &#x2F;&#x2F;判断屏幕宽度</span><br><span class="line">        let widith &#x3D; $(window).width();</span><br><span class="line">        if (widith &lt;&#x3D; 800) &#123;</span><br><span class="line">            $(&#39;.post-donate&#39;).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>注：打赏的图案直接存在themes/yelee/source/assets/ 下,没有assets文件创建一个</p><p>设置打赏模块的样式<br>在themes/yelee/source/css/_partial/目录下新建donate.styl文件，其中内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">.donate_bar &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin-top: 5%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.donate_bar a.btn_donate &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 82px;</span><br><span class="line">    height: 82px;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">    margin-right: auto;</span><br><span class="line">    background: url(http:&#x2F;&#x2F;img.t.sinajs.cn&#x2F;t5&#x2F;style&#x2F;images&#x2F;apps_PRF&#x2F;e_media&#x2F;btn_reward.gif)no-repeat;</span><br><span class="line">    -webkit-transition: background 0s;</span><br><span class="line">    -moz-transition: background 0s;</span><br><span class="line">    -o-transition: background 0s;</span><br><span class="line">    -ms-transition: background 0s;</span><br><span class="line">    transition: background 0s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.donate_bar a.btn_donate:hover &#123;</span><br><span class="line">    background-position: 0 -82px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.donate_bar .donate_txt &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    color: #9d9d9d;</span><br><span class="line">    font: 14px&#x2F;2 &quot;Microsoft Yahei&quot;</span><br><span class="line">&#125;</span><br><span class="line">.donate_bar.hidden&#123;</span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-donate&#123;</span><br><span class="line">    margin-top: 80px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#donate_guide&#123;</span><br><span class="line">    height: 210px;</span><br><span class="line">    width: 420px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#donate_guide img&#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在themes/yelee/source/css/style.styl中前面部分添加</p><blockquote><p>@import “_partial/donate”</p></blockquote><p>在themes/yelee/layout/_partial/article.ejs中的标签后面添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.prev || page.next)&#123; %&gt;</span><br><span class="line">   &lt;% if (!index &amp;&amp; theme.donate)&#123; %&gt;</span><br><span class="line">     &lt;%- partial(&#39;donate&#39;) %&gt;</span><br><span class="line">   &lt;% &#125; %&gt;</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200318213816292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在themes/yelee/_config.yml文件中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Alipay: &#x2F;assets&#x2F;Alipay.png # 你的图片</span><br><span class="line">weixin: &#x2F;assets&#x2F;weixin.png #你的图片</span><br><span class="line"># 是否开启打赏功能</span><br><span class="line">donate: true</span><br><span class="line"># 打赏文案</span><br><span class="line">donate_message: 此文对你有帮助？求支持！1分也是爱~ 谢谢！</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020031821395127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="给主页设置图片"><a href="#给主页设置图片" class="headerlink" title="给主页设置图片"></a>给主页设置图片</h2><p>在themes/yelee/layout/_partial/目录下新建homeImgUrl.ejs文件，其中内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #homeImgUrl&#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 460px;</span><br><span class="line">      background-image: url(&#39;&lt;%- theme.homeImg.url %&gt;&#39;);</span><br><span class="line">      background-size: cover;</span><br><span class="line">      &#x2F;* background-attachment:fixed; *&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;homeImgUrl&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;!-- &lt;img class&#x3D;&quot;im&quot; src&#x3D;&quot;&lt;%&#x3D; theme.homeImgUrl %&gt;&quot; alt&#x3D;&quot;图片&quot; style&#x3D;&quot;width: 100%; height: 460px&quot;&gt; --&gt;</span><br></pre></td></tr></table></figure><p>在themes/yelee/layout/_partial/article.ejs中的最顶部加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.prev || page.next)&#123; %&gt;</span><br><span class="line">  &lt;% if (index &amp;&amp; theme.homeImg.on)&#123; %&gt;</span><br><span class="line">    &lt;%- partial(&#39;homeImgUrl&#39;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200318220941959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在themes/yelee/_config.yml文件中添加如下内容：<br>#主页图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">homeImg: </span><br><span class="line"> on: true</span><br><span class="line"> url: &#x2F;assets&#x2F;cover.jpg</span><br></pre></td></tr></table></figure><p>注：自己下载图片放在themes\yelee\source\assets 下</p><h2 id="接入百度统计"><a href="#接入百度统计" class="headerlink" title="接入百度统计"></a>接入百度统计</h2><p><a href="http://sitecenter.baidu.com/sc-web/" target="_blank" rel="external nofollow noopener noreferrer">百度统计网站</a><br>yelee 默认已经配置好百度统计了，只要一个id了<br>自己注册好账号<br> 查看代码，填入 //hm.baidu.com/hm.js? 之后的内容<br> 写在themes\yelee_config.yml 中的baidu_tongji<br> 重启就好了</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yelee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo发布到Github</title>
      <link href="Hexo%E5%8F%91%E5%B8%83%E5%88%B0Github/"/>
      <url>Hexo%E5%8F%91%E5%B8%83%E5%88%B0Github/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建gitpages"><a href="#搭建gitpages" class="headerlink" title="搭建gitpages"></a>搭建gitpages</h1><h2 id="先自己在github创建一个账号"><a href="#先自己在github创建一个账号" class="headerlink" title="先自己在github创建一个账号"></a>先自己在github创建一个账号</h2><p>在github上配置gitpage</p><p>新建一个项目（仓库的命名是最重要的，规则是仓库”github用户名.github.io”）<br>不然不能访问</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200316165127677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>建好仓库之后，在仓库界面选择仓库名称下面一行选项中的”settings”进入到仓库的设置界面中<br>可以看到settings下面的github pages选项中提示你的网站已经发布在仓库名字对应的网址上了</p><p>我们打开这个网址，看到默认的博客效果，很是丑陋，这时我们可以在settings的github pages选项中点击”Theme chooser”选项下面的“choose a theme”选项，为博客选择一个主题<br><img src="https://img-blog.csdnimg.cn/20200316165423244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="在项目在根目录下的-config-yml-写入"><a href="#在项目在根目录下的-config-yml-写入" class="headerlink" title="在项目在根目录下的_config.yml 写入"></a>在项目在根目录下的_config.yml 写入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git                                                      <span class="comment"># 设置发布类型，如git     </span></span><br><span class="line">  repository: git@github.com:wjc49420645/wjc49420645.github.io.git   <span class="comment"># 设置repository对应的链接 选择ssh</span></span><br><span class="line">  branch: master                                                 <span class="comment"># 设置提交到的分支</span></span><br><span class="line">  message: Site updated at &#123;&#123; now(<span class="string">"YYYY-MM-DD HH:mm:ss"</span>) &#125;&#125;      <span class="comment"># 设置我们提交的信息</span></span><br></pre></td></tr></table></figure><h2 id="执行发布代码命令"><a href="#执行发布代码命令" class="headerlink" title="执行发布代码命令"></a>执行发布代码命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>提示 error deployer not found:git（说明没有发布工具）<br>安装工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-deployer-git --dev</span><br></pre></td></tr></table></figure><p>测试连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>Permission denied(publickey)：提示缺少公钥</p><p>本地生成公钥（具体可以百度一下）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>成功的话会在 用户下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可<br> 复制到github 秘钥设置<br><img src="https://img-blog.csdnimg.cn/20200316160118657.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200316160316683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>添加进去再次测试<br><img src="https://img-blog.csdnimg.cn/20200316160341328.png" alt="在这里插入图片描述"><br>说明成功了</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>hexo clean<br>hexo g<br>hexo deploy</p><p>访问<a href="https://wjc49420645.github.io" target="_blank" rel="external nofollow noopener noreferrer">https://wjc49420645.github.io</a> 就可以了</p><p>使用自己的域名映射github<br>我购买的是阿里云的域名<br>1.先 ping wjc49420645.github.io 获取到ip 存入阿里云上域名解析的记录值中<br>2.在github 当前项目的setting 设置的下面放入你的域名<br><img src="https://img-blog.csdnimg.cn/20200317154241541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>完成<br>以后访问你的新域名就可以了</p><h2 id="出现过的问题"><a href="#出现过的问题" class="headerlink" title="出现过的问题"></a>出现过的问题</h2><p>hexo d(hexo deploy的缩写) 提交<br>之后发现配置的域名访问不了了<br>那是因为每次hexo d  把旧代码覆盖了，配置域名的文件删除了<br>在source目录下添加CNAME，这样每次构建时才会对应在仓库的根目录生成CNAME,在这个文件中添加你的域名<br>在hexo d 就不会出现域名不能访问了<br><img src="https://img-blog.csdnimg.cn/20200317211323430.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitpages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+yelee搭建一个快速、简洁且高效的博客框架</title>
      <link href="hexo+yelee%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E3%80%81%E7%AE%80%E6%B4%81%E4%B8%94%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/"/>
      <url>hexo+yelee%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E3%80%81%E7%AE%80%E6%B4%81%E4%B8%94%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>本人是windows系统开发。</p><p>全局安装脚手架 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>初始化一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexoBolg</span><br></pre></td></tr></table></figure><a id="more"></a><p>进入目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexoBolg</span><br></pre></td></tr></table></figure><p>安装插件<br><code>yarn</code> (我习惯用yarn ，可以选择使用 npm i 安装)<br>启动服务<br><code>hexo server</code>（可以访问<a href="http://localhost:4000）" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000）</a><br><img src="https://img-blog.csdnimg.cn/20200316105756366.png" alt="在这里插入图片描述"><br>也可以使用package.json 配置文件中配置启动<br><code>yarn server</code> (我更改了默认端口号)<br><img src="https://img-blog.csdnimg.cn/20200316105932951.png" alt="在这里插入图片描述"><br>代码可以放在自己的git 服务器上去 方便维护。<br>接下来更换主题yelee<br>同样是在当前目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316110118360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>拉取成功会在themes目录生成yelee<br><img src="https://img-blog.csdnimg.cn/20200316110814391.png" alt="在这里插入图片描述"></p><p>更改根目录的_config.yml文件 使用新模板</p><blockquote><p>theme: yelee<br><img src="https://img-blog.csdnimg.cn/20200316110954111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>清除缓存并且启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">yarn server</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316112301348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200316111121301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>注意：把这个新拉取下来yelee的代码推送到自己的git 服务器上，显示删除yelee 里面.git 的相关配置，不然可能推送不了。</p><h1 id="创建一些系统页"><a href="#创建一些系统页" class="headerlink" title="创建一些系统页"></a>创建一些系统页</h1><h2 id="生成标签云"><a href="#生成标签云" class="headerlink" title="生成标签云"></a>生成标签云</h2><blockquote><p>hexo new page tags</p></blockquote><h2 id="生成关于我"><a href="#生成关于我" class="headerlink" title="生成关于我"></a>生成关于我</h2><blockquote><p>hexo new page about</p></blockquote><h2 id="为文章添加分类"><a href="#为文章添加分类" class="headerlink" title="为文章添加分类"></a>为文章添加分类</h2><blockquote><p>hexo new page categories<br><img src="https://img-blog.csdnimg.cn/20200316112659360.png" alt="在这里插入图片描述"><br>修改 categories/index.md</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2020-03-16 12:00:00</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加配置 在yelee 文件夹下的_config.yml 中添加<br>文章分类: /categories/<br><img src="https://img-blog.csdnimg.cn/20200316134250326.png" alt="在这里插入图片描述"></p><h1 id="增加功能"><a href="#增加功能" class="headerlink" title="增加功能"></a>增加功能</h1><h2 id="添加统计字数"><a href="#添加统计字数" class="headerlink" title="添加统计字数"></a>添加统计字数</h2><blockquote><p><code>yarn add hexo-wordcount --dev</code></p></blockquote><p>文件配置：<br>1.在yelee/layout/_partial/post/下创建word.ejs文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"margin-top:10px;margin-bottom:30px;"</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">"post-time"</span>&gt;</span><br><span class="line">      &lt;span class=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">"fa fa-keyboard-o"</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-meta-item-text"</span>&gt;  字数统计: &lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-count"</span>&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span class=<span class="string">"post-time"</span>&gt;</span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      &lt;span class=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">"fa fa-hourglass-half"</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-meta-item-text"</span>&gt;  阅读时长: &lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-count"</span>&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2.然后在 themes/yelee/layout/_partial/article.ejs中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开始添加字数统计--&gt;</span><br><span class="line">        &lt;% <span class="keyword">if</span>(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt;</span><br><span class="line">          &lt;%- partial(<span class="string">'post/word'</span>) %&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">         &lt;!-- 添加完成 --&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202003161138119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.开启功能<br>在yelee主题的_config.yml中添加下面代码<br>word_count: True (这个在原先配置没有，直接复制放在最下面就可以了)<br><img src="https://img-blog.csdnimg.cn/20200316113856176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="配置本地搜索"><a href="#配置本地搜索" class="headerlink" title="配置本地搜索"></a>配置本地搜索</h2><blockquote><p><code>yarn add hexo-generator-search --dev</code></p></blockquote><p>然后配置文件themes/yelee/_config.yml中修改为<br><img src="https://img-blog.csdnimg.cn/20200316115000269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Url-持久化"><a href="#Url-持久化" class="headerlink" title="Url 持久化"></a>Url 持久化</h2><p>hexo 默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】太长<br><img src="https://img-blog.csdnimg.cn/20200316115507729.png" alt="在这里插入图片描述"><br>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-abbrlink --dev</span><br></pre></td></tr></table></figure><p>然后配置根目录的_config.yml（最外层，不是yelee中的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :title/</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316115924685.png" alt="在这里插入图片描述"><br>重启服务器 yarn server  现在地址就缩短了<br><img src="https://img-blog.csdnimg.cn/20200316120015497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="让Hexo一直在后台运行"><a href="#让Hexo一直在后台运行" class="headerlink" title="让Hexo一直在后台运行"></a>让Hexo一直在后台运行</h2><p>安装pm2</p><blockquote><p>npm install -g pm2</p></blockquote><p>在博客根目录下面创建一个app.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">//run</span><br><span class="line">const &#123; <span class="built_in">exec</span> &#125; = require(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">'yarn server'</span>,(error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                console.log(`<span class="built_in">exec</span> error: <span class="variable">$&#123;error&#125;</span>`)</span><br><span class="line">                <span class="built_in">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        console.log(`stdout: <span class="variable">$&#123;stdout&#125;</span>`);</span><br><span class="line">        console.log(`stderr: <span class="variable">$&#123;stderr&#125;</span>`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>启动 pm2 start app.js<br>停止 pm2 stop app.js<br>重启 pm2 restart app.js<br>访问：<a href="http://localhost:9232" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:9232</a></p><h2 id="网站运行时间添加"><a href="#网站运行时间添加" class="headerlink" title="网站运行时间添加"></a>网站运行时间添加</h2><p>在 hexo/themes/yelee/layout/_partial/footer.ejs 文件中 <div class="footer-left"> 内（具体位置可自选）加入如下代码：</div></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"timeDate"</span>&gt;载入天数...&lt;/span&gt;&lt;span id=<span class="string">"times"</span>&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var now = new Date(); </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">createtime</span></span>() &#123; </span><br><span class="line">var grt= new Date(<span class="string">"11/23/2018 20:00:00"</span>);//此处修改你的建站时间或者网站上线时间 </span><br><span class="line">now.setTime(now.getTime()+250); </span><br><span class="line">days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); </span><br><span class="line">hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); </span><br><span class="line"><span class="keyword">if</span>(String(hnum).length ==1 )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">mnum = Math.floor(minutes); <span class="keyword">if</span>(String(mnum).length ==1 )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span><br><span class="line">seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line">snum = Math.round(seconds); <span class="keyword">if</span>(String(snum).length ==1 )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span><br><span class="line">document.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span><br><span class="line">document.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span><br><span class="line">&#125; </span><br><span class="line">setInterval(<span class="string">"createtime()"</span>,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="头像-图标设置"><a href="#头像-图标设置" class="headerlink" title="头像 / 图标设置"></a>头像 / 图标设置</h2><p>头像、图标图片的存放位置是 /themes/yilia/source/ 下任意位置，可以自己新建一个文件夹存放，我存放在 assets 文件夹下</p><p>配置文件为 /themes/yelee/_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avatar: /assets/me.jpg</span><br><span class="line">favicon: /assets/me.jpg</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316135113642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="鼠标点击小红心的设置"><a href="#鼠标点击小红心的设置" class="headerlink" title="鼠标点击小红心的设置"></a>鼠标点击小红心的设置</h2><p>在 hexo/themes/yilia/source/js 文件目录下添加 love.js 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span>(e,t,a)&#123;<span class="keyword">function</span> <span class="function"><span class="title">r</span></span>()&#123;<span class="keyword">for</span>(var e=0;e&lt;s.length;e++)s[e].alpha&lt;=0?(t.body.removeChild(s[e].el),s.splice(e,1)):(s[e].y--,s[e].scale+=.004,s[e].alpha-=.013,s[e].el.style.cssText=<span class="string">"left:"</span>+s[e].x+<span class="string">"px;top:"</span>+s[e].y+<span class="string">"px;opacity:"</span>+s[e].alpha+<span class="string">";transform:scale("</span>+s[e].scale+<span class="string">","</span>+s[e].scale+<span class="string">") rotate(45deg);background:"</span>+s[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="keyword">function</span> <span class="function"><span class="title">n</span></span>()&#123;var t=<span class="string">"function"</span>==typeof e.onclick&amp;&amp;e.onclick;e.onclick=<span class="keyword">function</span>(e)&#123;t&amp;&amp;t(),o(e)&#125;&#125;<span class="keyword">function</span> o(e)&#123;var a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,s.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:c()&#125;),t.body.appendChild(a)&#125;<span class="keyword">function</span> i(e)&#123;var a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[0].appendChild(a)&#125;<span class="keyword">function</span> <span class="function"><span class="title">c</span></span>()&#123;<span class="built_in">return</span><span class="string">"rgb("</span>+~~(255*Math.random())+<span class="string">","</span>+~~(255*Math.random())+<span class="string">","</span>+~~(255*Math.random())+<span class="string">")"</span>&#125;var s=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="keyword">function</span>(e)&#123;setTimeout(e,1e3/60)&#125;,i(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),n(),r()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>在 hexo/themes/yilia/layout/_partial/footer.ejs 文件的最后， 添加以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/js/love.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="nofollow-标签的使用"><a href="#nofollow-标签的使用" class="headerlink" title="nofollow 标签的使用"></a>nofollow 标签的使用</h2><p>减少出站链接能够有效防止权重分散，hexo 有很方便的自动为出站链接添加 nofollow 的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-autonofollow --dev</span><br></pre></td></tr></table></figure><p>再在外层_config.yml 中添加配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外部链接优化</span></span><br><span class="line">nofollow:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:     <span class="comment"># 例外的链接，可将友情链接放置此处</span></span><br><span class="line">  - <span class="string">'yousite'</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-增加-RSS-功能"><a href="#Hexo-增加-RSS-功能" class="headerlink" title="Hexo 增加 RSS 功能"></a>Hexo 增加 RSS 功能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-generator-feed --dev</span><br></pre></td></tr></table></figure><p>在你项目根目录的_config.yml 配置文件下找到 Extensions 添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RSS订阅</span></span><br><span class="line">plugins: hexo-generater-feed</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316142117857.png" alt="在这里插入图片描述"><br>在主题配置文件里themes/yelee/_config.yml配置文件中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: <span class="string">"/atom.xml"</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316144926373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="github-图标不显示"><a href="#github-图标不显示" class="headerlink" title="github 图标不显示"></a>github 图标不显示</h2><p>是因为原来的地址cdn.bootcss.com/logos/0.2.0/github-octocat.svg已经失效，所以我们直接本地下载图片，然后从本地读取即可。<br><a href="https://www.iconfont.cn/search/index?searchType=icon&q=github" target="_blank" rel="external nofollow noopener noreferrer">下载logo的地址</a><br>从这个网站下载一个github图片，直接下载png格式的，并且命名为github.png<br>放在/yelee/source/img/下<br>修改/themes/yelee/source/css/_partial/customise/social-icon.styl 中的github 图片读取路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.GitHub</span><br><span class="line">        background url(root-url + <span class="string">'/img/'</span> + <span class="string">'github.png'</span>) no-repeat white</span><br><span class="line">        background-size 90%</span><br><span class="line">        background-position 50% 100%</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200318134408842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重启就可以了</p><h1 id="写bolg"><a href="#写bolg" class="headerlink" title="写bolg"></a>写bolg</h1><p>1.新增博客页面<br><code>hexo new page --path me</code><br>会在source/_posts下生成一个me.md文件</p><p>（推荐使用csdn 先写好文章,(因为.md 文件格式是 Markdown) 在复制进入到.md文件中）<br><img src="https://img-blog.csdnimg.cn/2020031614583359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制左边<br><img src="https://img-blog.csdnimg.cn/20200316145432739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>注意顶部 这是必须要的，不然启动会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo + yelee搭建一个快速、简洁且高效的博客框架</span><br><span class="line">abbrlink: 9409</span><br><span class="line">date: 2020-03-14 17:30:49</span><br><span class="line">updated: 2020-03-14 17:30:49</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316145625320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExMDYwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.增加通过年月创建文件夹放置文章 方便管理博客<br>修改根目录下的_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year&#x2F;:month&#x2F;:title.md</span><br></pre></td></tr></table></figure><p>创建 hexo new post me<br><img src="https://img-blog.csdnimg.cn/20200317204807997.png" alt="在这里插入图片描述"></p><h1 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h1><p><a href="https://tding.top/archives/9a232bbe/" target="_blank" rel="external nofollow noopener noreferrer">Hexo-Yilia 进阶笔记</a><br><a href="https://blog.csdn.net/qq_39211866/article/details/103435003" target="_blank" rel="external nofollow noopener noreferrer">博客系统hexo yelee搭建历程</a><br><a href="http://moxfive.coding.me/yelee/1.Getting-Started/installation.html" target="_blank" rel="external nofollow noopener noreferrer">yelee</a><br><a href="https://blog.csdn.net/weixin_43110609/article/details/104901113" target="_blank" rel="external nofollow noopener noreferrer">发布到github</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>其他地方使用，拉取代码<br>在项目更目录下<br>yarn 安装对应插件<br>清除缓存<br>hexo clean<br>启动<br>yarn server</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yelee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
